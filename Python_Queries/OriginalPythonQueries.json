{
    "1": {
        "APIs": [
            "random.randrange()"
        ],
        "APIClasses": [
            "random"
        ],
        "OriginalQuery": "How to generate a \"big\" random number in Python?",
        "Source": "Stack Overflow"
    },
    "2": {
        "APIs": [
            "sys.getsizeof()"
        ],
        "APIClasses": [
            "sys"
        ],
        "OriginalQuery": "Storing big numbers over 9,000 digits in Python",
        "Source": "Stack Overflow"
    },
    "3": {
        "APIs": [
            "math.gamma()"
        ],
        "APIClasses": [
            "math"
        ],
        "OriginalQuery": "Python: Calculate factorial of a non-integral number",
        "Source": "Stack Overflow"
    },
    "4": {
        "APIs": [
            "operator.itemgetter()"
        ],
        "APIClasses": [
            "operator"
        ],
        "OriginalQuery": "How to get first AND last element of tuple at the same time",
        "Source": "Stack Overflow"
    },
    "5": {
        "APIs": [
            "numpy.random.randint()"
        ],
        "APIClasses": [
            "numpy.random"
        ],
        "OriginalQuery": "PYTHON : Simple random generation driving if/else",
        "Source": "Stack Overflow"
    },
    "6": {
        "APIs": [
            "getattr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python: formatting dictionary having tuple as keys",
        "Source": "Stack Overflow"
    },
    "7": {
        "APIs": [
            "exec()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Call and receive output from Python script in Java?",
        "Source": "Stack Overflow"
    },
    "8": {
        "APIs": [
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Reading UTF-8 file with codecs in IronPython",
        "Source": "Stack Overflow"
    },
    "9": {
        "APIs": [
            "sys.exit()"
        ],
        "APIClasses": [
            "sys"
        ],
        "OriginalQuery": "Call Python From Bat File And Get Return Code",
        "Source": "Stack Overflow"
    },
    "10": {
        "APIs": [
            "msilib.View.Execute()"
        ],
        "APIClasses": [
            "msilib.View"
        ],
        "OriginalQuery": "Forming an insert statement with single quotes in Python with Postgres",
        "Source": "Stack Overflow"
    },
    "11": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python regex for Python function signatures",
        "Source": "Stack Overflow"
    },
    "12": {
        "APIs": [
            "os.path.expanduser()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "Find \"home directory\" in Python?",
        "Source": "Stack Overflow"
    },
    "13": {
        "APIs": [
            "inspect.stack()"
        ],
        "APIClasses": [
            "inspect"
        ],
        "OriginalQuery": "How can I log the package name in Python?",
        "Source": "Stack Overflow"
    },
    "14": {
        "APIs": [
            "os.getpid()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "How to get process PID for manual lock mechanism in Python?",
        "Source": "Stack Overflow"
    },
    "15": {
        "APIs": [
            "codecs.open()"
        ],
        "APIClasses": [
            "codecs"
        ],
        "OriginalQuery": "How to save to file a dictionary with utf-8 strings correctly",
        "Source": "Stack Overflow"
    },
    "16": {
        "OriginalQuery": "Python: find types of keys in locals()",
        "Source": "Stack Overflow"
    },
    "17": {
        "OriginalQuery": "Convert Python long integer to C char array",
        "Source": "Stack Overflow"
    },
    "18": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to perform element-wise multiplication of two lists?",
        "Source": "Stack Overflow"
    },
    "19": {
        "APIs": [
            "getattr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python: loop though list calling functions in namespace",
        "Source": "Stack Overflow"
    },
    "20": {
        "APIs": [
            "sys._current_frames()"
        ],
        "APIClasses": [
            "sys"
        ],
        "OriginalQuery": "Dump stacktraces of all active Threads",
        "Source": "Stack Overflow"
    },
    "21": {
        "APIs": [
            "xml.etree.ElementTree.register_namespace()"
        ],
        "APIClasses": [
            "xml.etree.ElementTree"
        ],
        "OriginalQuery": "Read XML file which has xmlns in tag with python",
        "Source": "Stack Overflow"
    },
    "22": {
        "APIs": [
            "numpy.partition()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "A fast way to find the largest N elements in an numpy array",
        "Source": "Stack Overflow"
    },
    "23": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "converting list of string to list of integer",
        "Source": "Stack Overflow"
    },
    "24": {
        "APIs": [
            "struct.pack()"
        ],
        "APIClasses": [
            "struct"
        ],
        "OriginalQuery": "Creating Twisted TCP socket and sending test value",
        "Source": "Stack Overflow"
    },
    "25": {
        "OriginalQuery": "matplotlib set yaxis label size",
        "Source": "Stack Overflow"
    },
    "26": {
        "APIs": [
            " request.form.get()"
        ],
        "APIClasses": [
            " request.form"
        ],
        "OriginalQuery": "Get the data received in a Flask request",
        "Source": "Stack Overflow"
    },
    "27": {
        "APIs": [
            "asyncio.asyncio.subprocess.Process.wait()"
        ],
        "APIClasses": [
            "asyncio.asyncio.subprocess.Process"
        ],
        "OriginalQuery": "Python subprocess.Popen to create a new directory",
        "Source": "Stack Overflow"
    },
    "28": {
        "APIs": [
            "numpy.save()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Uploading file via base64",
        "Source": "Stack Overflow"
    },
    "29": {
        "OriginalQuery": "How to draw a line in Python Mayavi?",
        "Source": "Stack Overflow"
    },
    "30": {
        "APIs": [
            "str.format()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Adding text to the front - Python",
        "Source": "Stack Overflow"
    },
    "31": {
        "APIs": [
            "time.ctime()"
        ],
        "APIClasses": [
            "time"
        ],
        "OriginalQuery": "Python convert long to date",
        "Source": "Stack Overflow"
    },
    "32": {
        "APIs": [
            "os.waitpid()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Python checking if a fork() process is finished",
        "Source": "Stack Overflow"
    },
    "33": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Sort a list of tuples by 2nd item (integer value)",
        "Source": "Stack Overflow"
    },
    "34": {
        "OriginalQuery": "how to add a dollar sign to a long object in python",
        "Source": "Stack Overflow"
    },
    "35": {
        "APIs": [
            "dict.items()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "sort dictionary of objects",
        "Source": "Stack Overflow"
    },
    "36": {
        "APIs": [
            "datetime.datetime.utctimetuple()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "How to specify time zone (UTC) when converting to Unix time? (Python)",
        "Source": "Stack Overflow"
    },
    "37": {
        "APIs": [
            "os.isatty()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Doing the ls output magic in python",
        "Source": "Stack Overflow"
    },
    "38": {
        "APIs": [
            "globals()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python: Create a global variable from a string?",
        "Source": "Stack Overflow"
    },
    "39": {
        "APIs": [
            "importlib.reload()"
        ],
        "APIClasses": [
            "importlib"
        ],
        "OriginalQuery": "is there an equivalent __reload__ function as to __import__?",
        "Source": "Stack Overflow"
    },
    "40": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "extract last two fields from split",
        "Source": "Stack Overflow"
    },
    "41": {
        "APIs": [
            "str.rstrip()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "python removing unwanted characters after scanning mp3 meta-data",
        "Source": "Stack Overflow"
    },
    "42": {
        "OriginalQuery": "How to convert a PyObject in Python C-extension to a string type?",
        "Source": "Stack Overflow"
    },
    "43": {
        "APIs": [
            "matplotlib.pyplot.tight_layout()"
        ],
        "APIClasses": [
            "matplotlib.pyplot"
        ],
        "OriginalQuery": "How to set the margins for a matplotlib figure?",
        "Source": "Stack Overflow"
    },
    "44": {
        "OriginalQuery": "how to compare keyboard input to a string in Python?",
        "Source": "Stack Overflow"
    },
    "45": {
        "APIs": [
            "str.encode()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Printing non-ascii characters in python/jinja",
        "Source": "Stack Overflow"
    },
    "46": {
        "APIs": [
            "tag_lower()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Tkinter Canvas move item to top level",
        "Source": "Stack Overflow"
    },
    "47": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Comparing and updating array values in Python",
        "Source": "Stack Overflow"
    },
    "48": {
        "APIs": [
            "datetime.datetime.date()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "How to do groupby in pandas with part of date string?",
        "Source": "Stack Overflow"
    },
    "49": {
        "APIs": [
            "msvcrt.getch()"
        ],
        "APIClasses": [
            "msvcrt"
        ],
        "OriginalQuery": "How to have password echoed as asterisks",
        "Source": "Stack Overflow"
    },
    "50": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python check if list of keys exist in dictionary",
        "Source": "Stack Overflow"
    },
    "51": {
        "OriginalQuery": "Get raw POST body in Python Flask regardless of Content-Type header",
        "Source": "Stack Overflow"
    },
    "52": {
        "APIs": [
            "str.strip()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Fastest way to split a concatenated string into a tuple and ignore empty strings",
        "Source": "Stack Overflow"
    },
    "53": {
        "OriginalQuery": "Python and bottle - how to get post data of a protocol bufer",
        "Source": "Stack Overflow"
    },
    "54": {
        "APIs": [
            "str.join()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "writing tab separated values into a file",
        "Source": "Stack Overflow"
    },
    "55": {
        "OriginalQuery": "open() function python default directory",
        "Source": "Stack Overflow"
    },
    "56": {
        "APIs": [
            "socket.inet_aton()"
        ],
        "APIClasses": [
            "socket"
        ],
        "OriginalQuery": "How to store an IP in mySQL",
        "Source": "Stack Overflow"
    },
    "57": {
        "APIs": [
            "json.loads()"
        ],
        "APIClasses": [
            "json"
        ],
        "OriginalQuery": "How can I get Json data with Python?",
        "Source": "Stack Overflow"
    },
    "58": {
        "OriginalQuery": "Checking if an exe is 32 bit or 64 bit",
        "Source": "Stack Overflow"
    },
    "59": {
        "APIs": [
            "repr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to store a floating point number as text without losing precision?",
        "Source": "Stack Overflow"
    },
    "60": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "create_string_buffer how to get used size",
        "Source": "Stack Overflow"
    },
    "61": {
        "APIs": [
            "array.array.reverse()"
        ],
        "APIClasses": [
            "array.array"
        ],
        "OriginalQuery": "How to correctly do HttpResponseRedirect with reverse?",
        "Source": "Stack Overflow"
    },
    "62": {
        "APIs": [
            "webbrowser.open()"
        ],
        "APIClasses": [
            "webbrowser"
        ],
        "OriginalQuery": "How would I add a link to my menu item in wxpython?",
        "Source": "Stack Overflow"
    },
    "63": {
        "APIs": [
            "dict.pop()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "How can I remove a key from a Python dictionary?",
        "Source": "Stack Overflow"
    },
    "64": {
        "APIs": [
            "os.path.expandvars()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "How to create file with open function in Python?",
        "Source": "Stack Overflow"
    },
    "65": {
        "OriginalQuery": "Python - communicate with subprocess",
        "Source": "Stack Overflow"
    },
    "66": {
        "APIs": [
            "list.sort()"
        ],
        "APIClasses": [
            "list"
        ],
        "OriginalQuery": "Sorting A List Comprehension In One Statement",
        "Source": "Stack Overflow"
    },
    "67": {
        "OriginalQuery": "Python: replace nonbreaking space in Unicode",
        "Source": "Stack Overflow"
    },
    "68": {
        "APIs": [
            "base64.encode()"
        ],
        "APIClasses": [
            "base64"
        ],
        "OriginalQuery": "How to print Unicode in Python 2 when LANG=C",
        "Source": "Stack Overflow"
    },
    "69": {
        "APIs": [
            "threading.Thread.setDaemon()"
        ],
        "APIClasses": [
            "threading.Thread"
        ],
        "OriginalQuery": "Python socket accept blocks - prevents app from quitting",
        "Source": "Stack Overflow"
    },
    "70": {
        "APIs": [
            "id()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Import Local module over global python",
        "Source": "Stack Overflow"
    },
    "71": {
        "APIs": [
            "zipfile.ZipFile.writestr()"
        ],
        "APIClasses": [
            "zipfile.ZipFile"
        ],
        "OriginalQuery": "How would I zip multiple StringIO files?",
        "Source": "Stack Overflow"
    },
    "72": {
        "APIs": [
            "dict.get()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Check if key exists in dictionary. If not, append it",
        "Source": "Stack Overflow"
    },
    "73": {
        "APIs": [
            "random.seed()"
        ],
        "APIClasses": [
            "random"
        ],
        "OriginalQuery": "Seeding random in django",
        "Source": "Stack Overflow"
    },
    "74": {
        "APIs": [
            "requests.get()"
        ],
        "APIClasses": [
            "requests"
        ],
        "OriginalQuery": "Python download image with lxml",
        "Source": "Stack Overflow"
    },
    "75": {
        "APIs": [
            "socket.getfqdn()"
        ],
        "APIClasses": [
            "socket"
        ],
        "OriginalQuery": "How do I get my computer's fully qualified domain name in Python?",
        "Source": "Stack Overflow"
    },
    "76": {
        "APIs": [
            "os.startfile()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Launch an independent process with python",
        "Source": "Stack Overflow"
    },
    "77": {
        "APIs": [
            "dict.get()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Assign a temporary value to a variable in a loop python",
        "Source": "Stack Overflow"
    },
    "78": {
        "APIs": [
            "repr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to save Python in-memory dictionary to a file as a Python source code?",
        "Source": "Stack Overflow"
    },
    "79": {
        "APIs": [
            "re.Pattern.search()"
        ],
        "APIClasses": [
            "re.Pattern"
        ],
        "OriginalQuery": "python re.compile match percent sign %",
        "Source": "Stack Overflow"
    },
    "80": {
        "APIs": [
            "shutil.copy()"
        ],
        "APIClasses": [
            "shutil"
        ],
        "OriginalQuery": "How can one copy the internal state of zlib compressor object in Python",
        "Source": "Stack Overflow"
    },
    "81": {
        "APIs": [
            "getattr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python: access class property from string",
        "Source": "Stack Overflow"
    },
    "82": {
        "APIs": [
            "list.sort()"
        ],
        "APIClasses": [
            "list"
        ],
        "OriginalQuery": "Evaluating strings against integers (Python)",
        "Source": "Stack Overflow"
    },
    "83": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Subtract values in one list from corresponding values in another list",
        "Source": "Stack Overflow"
    },
    "84": {
        "APIs": [
            "os.unlink()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "How to delete a symbolic link in python?",
        "Source": "Stack Overflow"
    },
    "85": {
        "APIs": [
            "threading.Thread.is_alive()"
        ],
        "APIClasses": [
            "threading.Thread"
        ],
        "OriginalQuery": "python: How to detect when my thread become orphan?",
        "Source": "Stack Overflow"
    },
    "86": {
        "APIs": [
            "inspect.getfile()"
        ],
        "APIClasses": [
            "inspect"
        ],
        "OriginalQuery": "Get the __file__ of the function one level up in the stack",
        "Source": "Stack Overflow"
    },
    "87": {
        "APIs": [
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "python joining two csv files",
        "Source": "Stack Overflow"
    },
    "88": {
        "APIs": [
            "code.interact()"
        ],
        "APIClasses": [
            "code"
        ],
        "OriginalQuery": "start interactive mode on a specific script line",
        "Source": "Stack Overflow"
    },
    "89": {
        "APIs": [
            "pandas.DataFrame.itertuples()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "How to generate a list from a pandas DataFrame with the column name and column values?",
        "Source": "Stack Overflow"
    },
    "90": {
        "APIs": [
            "socket.socket.shutdown()"
        ],
        "APIClasses": [
            "socket.socket"
        ],
        "OriginalQuery": "How do I gracefully interrupt urllib2 downloads?",
        "Source": "Stack Overflow"
    },
    "91": {
        "OriginalQuery": "How to check dict.has_key(k,x) with 2 variables",
        "Source": "Stack Overflow"
    },
    "92": {
        "APIs": [
            "str.partition()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How do I read the first line of a string?",
        "Source": "Stack Overflow"
    },
    "93": {
        "APIs": [
            "str.strip()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "traceroute multiple hosts in python",
        "Source": "Stack Overflow"
    },
    "94": {
        "OriginalQuery": "How do I get the key for the current record in GAE ndb in a Python for loop?",
        "Source": "Stack Overflow"
    },
    "95": {
        "APIs": [
            "codecs.encode()"
        ],
        "APIClasses": [
            "codecs"
        ],
        "OriginalQuery": "Django - POST data in latin1, decode as utf-8",
        "Source": "Stack Overflow"
    },
    "96": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "python - how to add unicode literal to a variable?",
        "Source": "Stack Overflow"
    },
    "97": {
        "APIs": [
            "itertools.combinations()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Getting all combinations of key/value pairs in Python dict",
        "Source": "Stack Overflow"
    },
    "98": {
        "OriginalQuery": "Parsing xhtml with lxml python",
        "Source": "Stack Overflow"
    },
    "99": {
        "APIs": [
            "etree.HTML()"
        ],
        "APIClasses": [
            "etree"
        ],
        "OriginalQuery": "Parsing UTF-8/unicode strings with lxml HTML",
        "Source": "Stack Overflow"
    },
    "100": {
        "OriginalQuery": "How to start a background process in Python?",
        "Source": "Stack Overflow"
    },
    "101": {
        "APIs": [
            "codecs.open()"
        ],
        "APIClasses": [
            "codecs"
        ],
        "OriginalQuery": "Remove \\xe2\\x80\\xa6 from string python",
        "Source": "Stack Overflow"
    },
    "102": {
        "OriginalQuery": "python json serialize datetime",
        "Source": "Stack Overflow"
    },
    "103": {
        "APIs": [
            "datetime.date.timetuple()"
        ],
        "APIClasses": [
            "datetime.date"
        ],
        "OriginalQuery": "How can I generate POSIX values for yesterday and today at midnight in Python?",
        "Source": "Stack Overflow"
    },
    "104": {
        "APIs": [
            "pandas.DataFrame.values()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Sorting a pandas series",
        "Source": "Stack Overflow"
    },
    "105": {
        "APIs": [
            "id()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Accessing Object Memory Address",
        "Source": "Stack Overflow"
    },
    "106": {
        "APIs": [
            "min()"
        ],
        "APIClasses": [],
        "OriginalQuery": "from list of integers, get number closest to a given value",
        "Source": "Stack Overflow"
    },
    "107": {
        "APIs": [
            "webbrowser.open()"
        ],
        "APIClasses": [
            "webbrowser"
        ],
        "OriginalQuery": "How can I accept and send cookies with Mechanize?",
        "Source": "Stack Overflow"
    },
    "108": {
        "APIs": [
            "dict.get()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "how to refer to empty dict value in python",
        "Source": "Stack Overflow"
    },
    "109": {
        "APIs": [
            "dict.items()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Mapping over values in a python dictionary",
        "Source": "Stack Overflow"
    },
    "110": {
        "APIs": [
            "time.strptime()"
        ],
        "APIClasses": [
            "time"
        ],
        "OriginalQuery": "How to format pubDate with Python",
        "Source": "Stack Overflow"
    },
    "111": {
        "APIs": [
            "shutil.copy2()"
        ],
        "APIClasses": [
            "shutil"
        ],
        "OriginalQuery": "How can a file be copied?",
        "Source": "Stack Overflow"
    },
    "112": {
        "OriginalQuery": "Binding Ctrl (-) in Python Tkinter",
        "Source": "Stack Overflow"
    },
    "113": {
        "APIs": [
            "base64.decode()"
        ],
        "APIClasses": [
            "base64"
        ],
        "OriginalQuery": "How to open an ascii-encoded file as UTF8?",
        "Source": "Stack Overflow"
    },
    "114": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to find size of list/tuple in python in constant time",
        "Source": "Stack Overflow"
    },
    "115": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Calculate values between two dicts in Python",
        "Source": "Stack Overflow"
    },
    "116": {
        "OriginalQuery": "Python - Read string from binary file",
        "Source": "Stack Overflow"
    },
    "117": {
        "APIs": [
            "bin()"
        ],
        "APIClasses": [],
        "OriginalQuery": "MAC address to binary bits conversion",
        "Source": "Stack Overflow"
    },
    "118": {
        "APIs": [
            "round()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Set global output precision python",
        "Source": "Stack Overflow"
    },
    "119": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Pythonic way to \"merge\" two lists to a list of tuples",
        "Source": "Stack Overflow"
    },
    "120": {
        "APIs": [
            "str.maketrans()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python 3: Print multiple lines to one line",
        "Source": "Stack Overflow"
    },
    "121": {
        "APIs": [
            "socket.socket.setsockopt()"
        ],
        "APIClasses": [
            "socket.socket"
        ],
        "OriginalQuery": "Shutting down sockets properly",
        "Source": "Stack Overflow"
    },
    "122": {
        "APIs": [
            "os.listdir()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Python, Deleting all files in a folder older than X days",
        "Source": "Stack Overflow"
    },
    "123": {
        "OriginalQuery": "Access Multiselect Form Field in Flask",
        "Source": "Stack Overflow"
    },
    "124": {
        "OriginalQuery": "Decompressing a .bz2 file in Python",
        "Source": "Stack Overflow"
    },
    "125": {
        "APIs": [
            "str.splitlines()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "String split on new line, tab and some number of spaces",
        "Source": "Stack Overflow"
    },
    "126": {
        "APIs": [
            "importlib.reload()"
        ],
        "APIClasses": [
            "importlib"
        ],
        "OriginalQuery": "Reimport a module in python while interactive",
        "Source": "Stack Overflow"
    },
    "127": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "django loop through model fields",
        "Source": "Stack Overflow"
    },
    "128": {
        "APIs": [
            "numpy.dot()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Norm of sparse python vectors",
        "Source": "Stack Overflow"
    },
    "129": {
        "APIs": [
            "shlex.split()"
        ],
        "APIClasses": [
            "shlex"
        ],
        "OriginalQuery": "Python: execute a long script without block the main process",
        "Source": "Stack Overflow"
    },
    "130": {
        "OriginalQuery": "Parsing a large (~40GB) XML text file in python",
        "Source": "Stack Overflow"
    },
    "131": {
        "APIs": [
            "unicodedata.numeric()"
        ],
        "APIClasses": [
            "unicodedata"
        ],
        "OriginalQuery": "How do I convert unicode characters to floats in Python?",
        "Source": "Stack Overflow"
    },
    "132": {
        "APIs": [
            "datetime.datetime.combine()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "Python - merge time and date",
        "Source": "Stack Overflow"
    },
    "133": {
        "APIs": [
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python check if any items of a tuple are in a string",
        "Source": "Stack Overflow"
    },
    "134": {
        "APIs": [
            "os.stat()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Check if an open file has been deleted after open in python",
        "Source": "Stack Overflow"
    },
    "135": {
        "APIs": [
            "datetime.datetime.strptime()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "Converting date string in unknown format to datetime",
        "Source": "Stack Overflow"
    },
    "136": {
        "APIs": [
            "str.replace()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Replacing instances of a character in a string",
        "Source": "Stack Overflow"
    },
    "137": {
        "APIs": [
            "re.sub()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "How can I substitute a regex only once in Python?",
        "Source": "Stack Overflow"
    },
    "138": {
        "APIs": [
            "itertools.islice()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "python list comprehension set max len",
        "Source": "Stack Overflow"
    },
    "139": {
        "APIs": [
            "re.sub()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Regular Expression - Remove all special characters except alphanumeric and accents",
        "Source": "Stack Overflow"
    },
    "140": {
        "APIs": [
            "vars()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Most concise way to create a python dictionary from local variables",
        "Source": "Stack Overflow"
    },
    "141": {
        "APIs": [
            "logging.Logger.addHandler()"
        ],
        "APIClasses": [
            "logging.Logger"
        ],
        "OriginalQuery": "Python log file in descending order",
        "Source": "Stack Overflow"
    },
    "142": {
        "APIs": [
            "chr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How can I do 'a' + 1 #=> 'b' in python?",
        "Source": "Stack Overflow"
    },
    "143": {
        "APIs": [
            "datetime.datetime.astimezone()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "Add ten seconds to creation time in windows",
        "Source": "Stack Overflow"
    },
    "144": {
        "APIs": [
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to determined if a 2 dimensional list contain a value?",
        "Source": "Stack Overflow"
    },
    "145": {
        "APIs": [
            "inspect.getsourcefile()"
        ],
        "APIClasses": [
            "inspect"
        ],
        "OriginalQuery": "Python: How to check if an imported module/package/class is from standard library",
        "Source": "Stack Overflow"
    },
    "146": {
        "APIs": [
            "dict.setdefault()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Python dict how to create key or append an element to key?",
        "Source": "Stack Overflow"
    },
    "147": {
        "APIs": [
            "os.popen()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Python capture output from wget?",
        "Source": "Stack Overflow"
    },
    "148": {
        "APIs": [
            "idk"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to get open files of a subprocess?",
        "Source": "Stack Overflow"
    },
    "149": {
        "OriginalQuery": "Python Decimal to Binary Array",
        "Source": "Stack Overflow"
    },
    "150": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "python line separated values in a text when converted to list, adds \"\\n\" to the elements in the list",
        "Source": "Stack Overflow"
    },
    "151": {
        "APIs": [
            "str.decode()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "how to receive regex from command line in python",
        "Source": "Stack Overflow"
    },
    "152": {
        "APIs": [
            "tkinter.filedialog.askdirectory()"
        ],
        "APIClasses": [
            "tkinter.filedialog"
        ],
        "OriginalQuery": "Selecting directory's path with tkinter",
        "Source": "Stack Overflow"
    },
    "153": {
        "OriginalQuery": "SQL multiple inserts with Python",
        "Source": "Stack Overflow"
    },
    "154": {
        "APIs": [
            "os.write()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "writing text file with line breaks",
        "Source": "Stack Overflow"
    },
    "155": {
        "APIs": [
            "help()"
        ],
        "APIClasses": [],
        "OriginalQuery": "pandas: slice on hierarchical index without a copy",
        "Source": "Stack Overflow"
    },
    "156": {
        "APIs": [
            "ast.literal_eval()"
        ],
        "APIClasses": [
            "ast"
        ],
        "OriginalQuery": "Pythonic way to convert a list with multiple types (including lists!)",
        "Source": "Stack Overflow"
    },
    "157": {
        "APIs": [
            "globals()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python: How to create a dictionary named after a list entry?",
        "Source": "Stack Overflow"
    },
    "158": {
        "APIs": [
            "itertools.chain()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "How to store itertools.chain and use it more than once?",
        "Source": "Stack Overflow"
    },
    "159": {
        "APIs": [
            "fcntl.lockf()"
        ],
        "APIClasses": [
            "fcntl"
        ],
        "OriginalQuery": "Detect and delete locked file in python",
        "Source": "Stack Overflow"
    },
    "160": {
        "APIs": [
            "pandas.concat()"
        ],
        "APIClasses": [
            "pandas"
        ],
        "OriginalQuery": "How to load only specific columns from csv file into a DataFrame",
        "Source": "Stack Overflow"
    },
    "161": {
        "OriginalQuery": "returning a list of words after reading a file in python",
        "Source": "Stack Overflow"
    },
    "162": {
        "APIs": [
            "repr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Retrieve SQLite Entry in Flask",
        "Source": "Stack Overflow"
    },
    "163": {
        "OriginalQuery": "Extract and save a slice from a volume with numpy",
        "Source": "Stack Overflow"
    },
    "164": {
        "APIs": [
            "sqlite3.Cursor.execute()"
        ],
        "APIClasses": [
            "sqlite3.Cursor"
        ],
        "OriginalQuery": "How do I determine if the row has been inserted?",
        "Source": "Stack Overflow"
    },
    "165": {
        "APIs": [
            "importlib.reload()"
        ],
        "APIClasses": [
            "importlib"
        ],
        "OriginalQuery": "Share a singleton across modules",
        "Source": "Stack Overflow"
    },
    "166": {
        "APIs": [
            "re.sub()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "What's the fastest way to fixup line-endings for SMTP sending?",
        "Source": "Stack Overflow"
    },
    "167": {
        "APIs": [
            "sys.exit()"
        ],
        "APIClasses": [
            "sys"
        ],
        "OriginalQuery": "how to exit from a pyplot loop?",
        "Source": "Stack Overflow"
    },
    "168": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Length of the longest sublist?",
        "Source": "Stack Overflow"
    },
    "169": {
        "APIs": [
            "logging.handlers.RotatingFileHandler.doRollover()"
        ],
        "APIClasses": [
            "logging.handlers.RotatingFileHandler"
        ],
        "OriginalQuery": "Do any python tools exist for rolling over log/configuration files?",
        "Source": "Stack Overflow"
    },
    "170": {
        "OriginalQuery": "Delete column from pandas DataFrame",
        "Source": "Stack Overflow"
    },
    "171": {
        "APIs": [
            "copy.copy()"
        ],
        "APIClasses": [
            "copy"
        ],
        "OriginalQuery": "pandas dataframe, copy by value",
        "Source": "Stack Overflow"
    },
    "172": {
        "APIs": [
            "str.replace()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How to make the python interpreter correctly handle non-ASCII characters in string operations?",
        "Source": "Stack Overflow"
    },
    "173": {
        "APIs": [
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "how to identify multiple keywords in raw_input? python",
        "Source": "Stack Overflow"
    },
    "174": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Calculate perimeter of numpy array",
        "Source": "Stack Overflow"
    },
    "175": {
        "OriginalQuery": "dot products on sparse matrices",
        "Source": "Stack Overflow"
    },
    "176": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "delimiting carat A in python",
        "Source": "Stack Overflow"
    },
    "177": {
        "APIs": [
            "unittest.TestCase.id()"
        ],
        "APIClasses": [
            "unittest.TestCase"
        ],
        "OriginalQuery": "How to extract the test method name from a test method in python",
        "Source": "Stack Overflow"
    },
    "178": {
        "APIs": [
            "id()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to store a hashtable of lists in Python (hashed by identity)?",
        "Source": "Stack Overflow"
    },
    "179": {
        "OriginalQuery": "Handling KeyboardInterrupt in a KDE Python application?",
        "Source": "Stack Overflow"
    },
    "180": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How can I find the dimensions of a matrix in Python?",
        "Source": "Stack Overflow"
    },
    "181": {
        "APIs": [
            "datetime.datetime.strptime()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "How do I strtotime in python?",
        "Source": "Stack Overflow"
    },
    "182": {
        "OriginalQuery": "pandas DataFrame Dividing a column by itself",
        "Source": "Stack Overflow"
    },
    "183": {
        "APIs": [
            "str.zfill()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How to return a number as a binary string with a set number of bits in python",
        "Source": "Stack Overflow"
    },
    "184": {
        "APIs": [
            "os.walk()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Setuptools. How to make package contain extra data folder and all folders inside",
        "Source": "Stack Overflow"
    },
    "185": {
        "APIs": [
            "hashlib.scrypt()"
        ],
        "APIClasses": [
            "hashlib"
        ],
        "OriginalQuery": "How to use scrypt to generate hash for password and salt in Python",
        "Source": "Stack Overflow"
    },
    "186": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Key of max value in a dict",
        "Source": "Stack Overflow"
    },
    "187": {
        "APIs": [
            "dict.items()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Python- How to find the average of multiple values/key in a dictionary",
        "Source": "Stack Overflow"
    },
    "188": {
        "APIs": [
            "count()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How do you make Python / PostgreSQL faster?",
        "Source": "Stack Overflow"
    },
    "189": {
        "APIs": [
            "dict.fromkeys()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Simultaneously replacing all values of a dictionary to zero python",
        "Source": "Stack Overflow"
    },
    "190": {
        "OriginalQuery": "How can i find the path of tempfile in django",
        "Source": "Stack Overflow"
    },
    "191": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How to get the first word in the string",
        "Source": "Stack Overflow"
    },
    "192": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Check if all the elements in that list are divisible by some given integer or not",
        "Source": "Stack Overflow"
    },
    "193": {
        "APIs": [
            "code.InteractiveConsole.raw_input()"
        ],
        "APIClasses": [
            "code.InteractiveConsole"
        ],
        "OriginalQuery": "Changing str to int in Python",
        "Source": "Stack Overflow"
    },
    "194": {
        "APIs": [
            "os.fork()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "is there a way to start/stop linux processes with python?",
        "Source": "Stack Overflow"
    },
    "195": {
        "APIs": [
            "datetime.now.date()"
        ],
        "APIClasses": [
            "datetime.now"
        ],
        "OriginalQuery": "Converting Twitter XML Date to Python Date Object",
        "Source": "Stack Overflow"
    },
    "196": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to delete rows from a pandas DataFrame based on a conditional expression",
        "Source": "Stack Overflow"
    },
    "197": {
        "APIs": [
            "dict.items()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Output sorted python dict within django template",
        "Source": "Stack Overflow"
    },
    "198": {
        "APIs": [
            "str.rfind()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "how do I find special character in the path string and how many times are they present",
        "Source": "Stack Overflow"
    },
    "199": {
        "APIs": [
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "\"group by\" aggregate functions with dictionary comprehensions",
        "Source": "Stack Overflow"
    },
    "200": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to sort words in text file?",
        "Source": "Stack Overflow"
    },
    "201": {
        "APIs": [
            "ord()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Getting char from string its hex value",
        "Source": "Stack Overflow"
    },
    "202": {
        "OriginalQuery": "Python Regex instantly replace groups",
        "Source": "Stack Overflow"
    },
    "203": {
        "APIs": [
            "re.search()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "How to extract numbers from filename in Python?",
        "Source": "Stack Overflow"
    },
    "204": {
        "APIs": [
            "re.findall()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "python parse file for ip addresses",
        "Source": "Stack Overflow"
    },
    "205": {
        "OriginalQuery": "Python 2,3 Convert Integer to \"bytes\" Cleanly",
        "Source": "Stack Overflow"
    },
    "206": {
        "OriginalQuery": "BeautifulSoup in Python - getting the n-th tag of a type",
        "Source": "Stack Overflow"
    },
    "207": {
        "APIs": [
            "ord()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to get '\\x01' to 1",
        "Source": "Stack Overflow"
    },
    "208": {
        "APIs": [
            "os.path.relpath()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "Getting folder name",
        "Source": "Stack Overflow"
    },
    "209": {
        "APIs": [
            "datetime.datetime.combine()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "sorting python list based on key",
        "Source": "Stack Overflow"
    },
    "210": {
        "OriginalQuery": "Handling a blobstore blob as a file (python)",
        "Source": "Stack Overflow"
    },
    "211": {
        "APIs": [
            "datetime.datetime.strptime()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "Convert string into datetime.time object",
        "Source": "Stack Overflow"
    },
    "212": {
        "OriginalQuery": "Concatenating lists in Python 3",
        "Source": "Stack Overflow"
    },
    "213": {
        "APIs": [
            "random.randrange()"
        ],
        "APIClasses": [
            "random"
        ],
        "OriginalQuery": "random boolean by percentage",
        "Source": "Stack Overflow"
    },
    "214": {
        "APIs": [
            "dict.keys()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "counting duplicate words in python the fastest way",
        "Source": "Stack Overflow"
    },
    "215": {
        "APIs": [
            "zlib.compressobj()"
        ],
        "APIClasses": [
            "zlib"
        ],
        "OriginalQuery": "Compress large python objects",
        "Source": "Stack Overflow"
    },
    "216": {
        "APIs": [
            "base64.decode()"
        ],
        "APIClasses": [
            "base64"
        ],
        "OriginalQuery": "Python converting latin1 to UTF8",
        "Source": "Stack Overflow"
    },
    "217": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How do I sort a list of datetime or date objects?",
        "Source": "Stack Overflow"
    },
    "218": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Iterating over zipped lists in python",
        "Source": "Stack Overflow"
    },
    "219": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Transposing a multi-dimensional matrix in Python with list comprehensions",
        "Source": "Stack Overflow"
    },
    "220": {
        "OriginalQuery": "How to check if a given entity exists in the datastore or not?",
        "Source": "Stack Overflow"
    },
    "221": {
        "OriginalQuery": "making a class callable in same instance",
        "Source": "Stack Overflow"
    },
    "222": {
        "APIs": [
            "flask.Flask.run()"
        ],
        "APIClasses": [
            "flask.Flask"
        ],
        "OriginalQuery": "Handling multiple requests in Flask",
        "Source": "Stack Overflow"
    },
    "223": {
        "APIs": [
            "getattr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Specifying object property in dot notation with a variable",
        "Source": "Stack Overflow"
    },
    "224": {
        "APIs": [
            "sleepBtn.update_idletasks() "
        ],
        "APIClasses": [
            "sleepBtn"
        ],
        "OriginalQuery": "How to redirect in real time STDOUT from imported module to Tkinter Text Widget in python?",
        "Source": "Stack Overflow"
    },
    "225": {
        "APIs": [
            "inspect.getmodule()"
        ],
        "APIClasses": [
            "inspect"
        ],
        "OriginalQuery": "How do I determine the proper `paramstyle` when all I have is a `Connection` object?",
        "Source": "Stack Overflow"
    },
    "226": {
        "APIs": [
            "urllib.request.urlopen()"
        ],
        "APIClasses": [
            "urllib.request"
        ],
        "OriginalQuery": "How to get HTTP return code from python urllib's urlopen?",
        "Source": "Stack Overflow"
    },
    "227": {
        "APIs": [
            "tkinter.ttk.Combobox.get()"
        ],
        "APIClasses": [
            "tkinter.ttk.Combobox"
        ],
        "OriginalQuery": "How to get the input from the Tkinter Text Widget?",
        "Source": "Stack Overflow"
    },
    "228": {
        "APIs": [
            "urllib.request.urlopen()"
        ],
        "APIClasses": [
            "urllib.request"
        ],
        "OriginalQuery": "Grab an image via the web and save it with Python",
        "Source": "Stack Overflow"
    },
    "229": {
        "APIs": [
            "sftp.stat()"
        ],
        "APIClasses": [
            "sftp"
        ],
        "OriginalQuery": "How to get size of remote file?",
        "Source": "Stack Overflow"
    },
    "230": {
        "OriginalQuery": "Convert sql result to list python",
        "Source": "Stack Overflow"
    },
    "231": {
        "APIs": [
            "numpy.array()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "How to round datetime64 values",
        "Source": "Stack Overflow"
    },
    "232": {
        "APIs": [
            "dict.values()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Max/Min value of Dictionary of List",
        "Source": "Stack Overflow"
    },
    "233": {
        "APIs": [
            "subprocess.check_output()"
        ],
        "APIClasses": [
            "subprocess"
        ],
        "OriginalQuery": "Running windows shell commands with python",
        "Source": "Stack Overflow"
    },
    "234": {
        "APIs": [
            "os.getppid()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "How to obtain the name of the calling shell in Python?",
        "Source": "Stack Overflow"
    },
    "235": {
        "APIs": [
            "str.endswith()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Create dictionary comprehension from os.walk",
        "Source": "Stack Overflow"
    },
    "236": {
        "APIs": [
            "print()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Is there any single function to print an iterable's values?",
        "Source": "Stack Overflow"
    },
    "237": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Check if object is a number or boolean",
        "Source": "Stack Overflow"
    },
    "238": {
        "APIs": [
            "idk"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python: How can I obtain something in a list of list?",
        "Source": "Stack Overflow"
    },
    "239": {
        "APIs": [
            "datetime.date.today()"
        ],
        "APIClasses": [
            "datetime.date"
        ],
        "OriginalQuery": "Cleanest and most Pythonic way to get tomorrow's date?",
        "Source": "Stack Overflow"
    },
    "240": {
        "APIs": [
            "str.rstrip()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python: file.readline adding a space at the end of the line",
        "Source": "Stack Overflow"
    },
    "241": {
        "APIs": [
            "flask.Config.from_object()"
        ],
        "APIClasses": [
            "flask.Config"
        ],
        "OriginalQuery": "How to import from config file in Flask?",
        "Source": "Stack Overflow"
    },
    "242": {
        "APIs": [
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Check if element exists in tuple of tuples",
        "Source": "Stack Overflow"
    },
    "243": {
        "OriginalQuery": "Sort list values to get a new order of its index, Python way",
        "Source": "Stack Overflow"
    },
    "244": {
        "APIs": [
            "str.join()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Converting .txt file to list AND be able to index and print list line by line",
        "Source": "Stack Overflow"
    },
    "245": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Check whether the type of a variable is a specific type in Python",
        "Source": "Stack Overflow"
    },
    "246": {
        "APIs": [
            "vars()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to pass on argparse argument to function as kwargs?",
        "Source": "Stack Overflow"
    },
    "247": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How do I Get The Selected Object type",
        "Source": "Stack Overflow"
    },
    "248": {
        "APIs": [
            "random.normalvariate()"
        ],
        "APIClasses": [
            "random"
        ],
        "OriginalQuery": "How to pass a random function as an argument?",
        "Source": "Stack Overflow"
    },
    "249": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python: compare first element of lists effectively",
        "Source": "Stack Overflow"
    },
    "250": {
        "APIs": [
            "scipy.integrate.quad()"
        ],
        "APIClasses": [
            "scipy.integrate"
        ],
        "OriginalQuery": "Calculate area between two curves (that are normal distributions)",
        "Source": "Stack Overflow"
    },
    "251": {
        "APIs": [
            "dict.keys()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "How to fetch the key/value pair of a dictionary only containing one item?",
        "Source": "Stack Overflow"
    },
    "252": {
        "APIs": [
            "min()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Find minimum values in a python 3.3 list",
        "Source": "Stack Overflow"
    },
    "253": {
        "APIs": [
            "get_result()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Extract type string with Clang bindings",
        "Source": "Stack Overflow"
    },
    "254": {
        "OriginalQuery": "Python - Sorting List of Ints User Input",
        "Source": "Stack Overflow"
    },
    "255": {
        "APIs": [
            "str.replace()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How to replace the quote \" and hyphen character in a string with nothing in Python?",
        "Source": "Stack Overflow"
    },
    "256": {
        "OriginalQuery": "Modify the default font in Python Tkinter",
        "Source": "Stack Overflow"
    },
    "257": {
        "APIs": [
            "operator.__eq__()"
        ],
        "APIClasses": [
            "operator"
        ],
        "OriginalQuery": "How to eliminate a python3 deprecation warning for the equality operator?",
        "Source": "Stack Overflow"
    },
    "258": {
        "APIs": [
            "super()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python converting *args to list",
        "Source": "Stack Overflow"
    },
    "259": {
        "APIs": [
            "locale.getpreferredencoding()"
        ],
        "APIClasses": [
            "locale"
        ],
        "OriginalQuery": "Is it possible for Python to read non-ascii text from file?",
        "Source": "Stack Overflow"
    },
    "260": {
        "APIs": [
            " collections.defaultdict()"
        ],
        "APIClasses": [
            " collections"
        ],
        "OriginalQuery": "Most efficient way to add new keys or append to old keys in a dictionary during iteration in Python?",
        "Source": "Stack Overflow"
    },
    "261": {
        "APIs": [
            "codecs.decode()"
        ],
        "APIClasses": [
            "codecs"
        ],
        "OriginalQuery": "convert hex ascii mixed string like r'\\x74op' to 'top' in python",
        "Source": "Stack Overflow"
    },
    "262": {
        "APIs": [
            "str.strip()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How to you remove characters before and after a string in python?",
        "Source": "Stack Overflow"
    },
    "263": {
        "APIs": [
            "format()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Add zeros to a float after the decimal point in Python",
        "Source": "Stack Overflow"
    },
    "264": {
        "APIs": [
            "threading.active_count()"
        ],
        "APIClasses": [
            "threading"
        ],
        "OriginalQuery": "Limit count of threads for python script",
        "Source": "Stack Overflow"
    },
    "265": {
        "APIs": [
            "time.perf_counter()"
        ],
        "APIClasses": [
            "time"
        ],
        "OriginalQuery": "Get timer ticks in Python",
        "Source": "Stack Overflow"
    },
    "266": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How can I check whether a variable is an instance of datetime.datetime or datetime.date",
        "Source": "Stack Overflow"
    },
    "267": {
        "APIs": [
            "django.db.models.query.QuerySet.get_or_create()"
        ],
        "APIClasses": [
            "django.db.models.query.QuerySet"
        ],
        "OriginalQuery": "Prevent multiple form submissions in Django",
        "Source": "Stack Overflow"
    },
    "268": {
        "OriginalQuery": "Django Formset - Check if row mark deleted",
        "Source": "Stack Overflow"
    },
    "269": {
        "OriginalQuery": "Python, etree: how to copy instance into new instance of a inherited class?",
        "Source": "Stack Overflow"
    },
    "270": {
        "APIs": [
            "multiprocessing.connection.Listener.close()"
        ],
        "APIClasses": [
            "multiprocessing.connection.Listener"
        ],
        "OriginalQuery": "Django with tastypie how to refresh queryset?",
        "Source": "Stack Overflow"
    },
    "271": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Longest string in numpy object_ array",
        "Source": "Stack Overflow"
    },
    "272": {
        "APIs": [
            "os.open()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Opening multiple python files from folder",
        "Source": "Stack Overflow"
    },
    "273": {
        "APIs": [
            "str.capitalize()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python How to capitalize nth letter of a string",
        "Source": "Stack Overflow"
    },
    "274": {
        "APIs": [
            "os.path.basename()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "How to Test if file contains full path or just file name, Python?",
        "Source": "Stack Overflow"
    },
    "275": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Find number in string between spaces and parse it",
        "Source": "Stack Overflow"
    },
    "276": {
        "APIs": [
            "numpy.savez_compressed()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Most appropriate conversion of .mat file for database purposes",
        "Source": "Stack Overflow"
    },
    "277": {
        "APIs": [
            "itertools.islice()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Speed up python loop",
        "Source": "Stack Overflow"
    },
    "278": {
        "OriginalQuery": "Redirect bash output to python script",
        "Source": "Stack Overflow"
    },
    "279": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Printing a column in an matrix without numpy",
        "Source": "Stack Overflow"
    },
    "280": {
        "APIs": [
            "re.search()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "checking if year is in the string (4 consecutive digits)",
        "Source": "Stack Overflow"
    },
    "281": {
        "APIs": [
            "re.findall()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Grab certain words and phrases from a text file in Python",
        "Source": "Stack Overflow"
    },
    "282": {
        "OriginalQuery": "Importing bz2 compressed binary file as numpy array",
        "Source": "Stack Overflow"
    },
    "283": {
        "OriginalQuery": "How to launch and run external script in background?",
        "Source": "Stack Overflow"
    },
    "284": {
        "APIs": [
            "getattr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python: access structure field through its name in a string",
        "Source": "Stack Overflow"
    },
    "285": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "how can I get filenames without directory name",
        "Source": "Stack Overflow"
    },
    "286": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to obtain the total numbers of rows from a CSV file in Python?",
        "Source": "Stack Overflow"
    },
    "287": {
        "APIs": [
            "turtle.speed()"
        ],
        "APIClasses": [
            "turtle"
        ],
        "OriginalQuery": "How to speed up python's 'turtle' function and stop it freezing at the end",
        "Source": "Stack Overflow"
    },
    "288": {
        "APIs": [
            "open()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to decode file in Python-3.x?",
        "Source": "Stack Overflow"
    },
    "289": {
        "APIs": [
            "str.lower()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Checking a file exists (and ignoring case) in Python",
        "Source": "Stack Overflow"
    },
    "290": {
        "APIs": [
            "pandas.Series.add()"
        ],
        "APIClasses": [
            "pandas.Series"
        ],
        "OriginalQuery": "Adding two Series with NaNs",
        "Source": "Stack Overflow"
    },
    "291": {
        "APIs": [
            "json.dump()"
        ],
        "APIClasses": [
            "json"
        ],
        "OriginalQuery": "python, writing Json to file",
        "Source": "Stack Overflow"
    },
    "292": {
        "APIs": [
            "os.path.isdir()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "Automate conversion txt to xls",
        "Source": "Stack Overflow"
    },
    "293": {
        "APIs": [
            "pandas.DataFrame.append()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Search value in tree of dicts in python",
        "Source": "Stack Overflow"
    },
    "294": {
        "APIs": [
            "random.uniform()"
        ],
        "APIClasses": [
            "random"
        ],
        "OriginalQuery": "Generate random number between 0.1 and 1.0. Python",
        "Source": "Stack Overflow"
    },
    "295": {
        "OriginalQuery": "Check if tags are empty",
        "Source": "Stack Overflow"
    },
    "296": {
        "APIs": [
            "str.format()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Formatting a string to be a constant length in Python",
        "Source": "Stack Overflow"
    },
    "297": {
        "APIs": [
            "threading.Thread.setDaemon()"
        ],
        "APIClasses": [
            "threading.Thread"
        ],
        "OriginalQuery": "Terminate a multi-thread python program",
        "Source": "Stack Overflow"
    },
    "298": {
        "APIs": [
            "str.rstrip()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How to join all the lines together in a text file in python?",
        "Source": "Stack Overflow"
    },
    "299": {
        "OriginalQuery": "Get json data via url and use in python (simplejson)",
        "Source": "Stack Overflow"
    },
    "300": {
        "APIs": [
            "dict.fromkeys()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Initializing unknown number of keys with specific values in a dictionary in Python",
        "Source": "Stack Overflow"
    },
    "301": {
        "APIs": [
            "io.IOBase.close()"
        ],
        "APIClasses": [
            "io.IOBase"
        ],
        "OriginalQuery": "How to clear a multiprocessing queue in python",
        "Source": "Stack Overflow"
    },
    "302": {
        "APIs": [
            "logging.basicConfig()"
        ],
        "APIClasses": [
            "logging"
        ],
        "OriginalQuery": "How to configure format of Python 2.3 logging messages?",
        "Source": "Stack Overflow"
    },
    "303": {
        "OriginalQuery": "matplotlib:plot a line closed",
        "Source": "Stack Overflow"
    },
    "304": {
        "APIs": [
            "io.IOBase.readlines()"
        ],
        "APIClasses": [
            "io.IOBase"
        ],
        "OriginalQuery": "python read single line from file as string",
        "Source": "Stack Overflow"
    },
    "305": {
        "APIs": [
            "datetime.datetime.now()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "Parse string with date and timezone to UTC datetime",
        "Source": "Stack Overflow"
    },
    "306": {
        "APIs": [
            "http.client.HTTPResponse.getheaders()"
        ],
        "APIClasses": [
            "http.client.HTTPResponse"
        ],
        "OriginalQuery": "How to handle multiple Set-Cookie header in HTTP response",
        "Source": "Stack Overflow"
    },
    "307": {
        "OriginalQuery": "Pymongo - How to insert document to the front of the collection?",
        "Source": "Stack Overflow"
    },
    "308": {
        "APIs": [
            "dbm.open()"
        ],
        "APIClasses": [
            "dbm"
        ],
        "OriginalQuery": "How to empty DBM file in Python efficiently?",
        "Source": "Stack Overflow"
    },
    "309": {
        "OriginalQuery": "How do I read numpy source?",
        "Source": "Stack Overflow"
    },
    "310": {
        "APIs": [
            "super()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Calling a superclass method from a subclass in python",
        "Source": "Stack Overflow"
    },
    "311": {
        "APIs": [
            "dict.items()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Dictionary with Tuples as Values?",
        "Source": "Stack Overflow"
    },
    "312": {
        "APIs": [
            "os.popen()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "How can I get the full list of running processes on a Mac from a python app",
        "Source": "Stack Overflow"
    },
    "313": {
        "APIs": [
            "operator.itemgetter()"
        ],
        "APIClasses": [
            "operator"
        ],
        "OriginalQuery": "in python, I want to select from array an range by given string",
        "Source": "Stack Overflow"
    },
    "314": {
        "OriginalQuery": "Does Python have a toString() equivalent, and can I convert a db.Model element to String?",
        "Source": "Stack Overflow"
    },
    "315": {
        "APIs": [
            "dict.keys()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "How to return dictionary keys as a list in Python?",
        "Source": "Stack Overflow"
    },
    "316": {
        "APIs": [
            "mimetypes.guess_extension()"
        ],
        "APIClasses": [
            "mimetypes"
        ],
        "OriginalQuery": "How can i get a file extension from a filetype?",
        "Source": "Stack Overflow"
    },
    "317": {
        "OriginalQuery": "Python (pygame): Get image color information?",
        "Source": "Stack Overflow"
    },
    "318": {
        "OriginalQuery": "Check to see if a collection of properties exist inside a dict object in Python",
        "Source": "Stack Overflow"
    },
    "319": {
        "APIs": [
            "xml.etree.ElementTree.ElementTree.findall()"
        ],
        "APIClasses": [
            "xml.etree.ElementTree.ElementTree"
        ],
        "OriginalQuery": "Extracting tables containing a string with BeautifulSoup",
        "Source": "Stack Overflow"
    },
    "320": {
        "APIs": [
            "decimal.Decimal.sqrt()"
        ],
        "APIClasses": [
            "decimal.Decimal"
        ],
        "OriginalQuery": "Calculating Pi with decimal on Python",
        "Source": "Stack Overflow"
    },
    "321": {
        "APIs": [
            "str.isdigit()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python check if list items are integers?",
        "Source": "Stack Overflow"
    },
    "322": {
        "OriginalQuery": "Django -- Pre-populating Hidden Fields",
        "Source": "Stack Overflow"
    },
    "323": {
        "APIs": [
            "format()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Convert scientific notation to decimal - python",
        "Source": "Stack Overflow"
    },
    "324": {
        "APIs": [
            "textwrap.fill()"
        ],
        "APIClasses": [
            "textwrap"
        ],
        "OriginalQuery": "Wrapping text during print Python",
        "Source": "Stack Overflow"
    },
    "325": {
        "APIs": [
            "time.strftime()"
        ],
        "APIClasses": [
            "time"
        ],
        "OriginalQuery": "python get time stamp on file in mm/dd/yyyy format",
        "Source": "Stack Overflow"
    },
    "326": {
        "APIs": [
            "repr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python - print string to screen, include \\n in output",
        "Source": "Stack Overflow"
    },
    "327": {
        "APIs": [
            "bytes.join()"
        ],
        "APIClasses": [
            "bytes"
        ],
        "OriginalQuery": "Joining byte list with python",
        "Source": "Stack Overflow"
    },
    "328": {
        "APIs": [
            "str.join()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Integer array to string in Python",
        "Source": "Stack Overflow"
    },
    "329": {
        "APIs": [
            "exec()"
        ],
        "APIClasses": [],
        "OriginalQuery": "eval to import a module",
        "Source": "Stack Overflow"
    },
    "330": {
        "APIs": [
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to find a value in a list of python dictionaries?",
        "Source": "Stack Overflow"
    },
    "331": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "how to get a value out of ValuesQuerySet",
        "Source": "Stack Overflow"
    },
    "332": {
        "APIs": [
            "open()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python 3.3.0: How to output a variable onto a .txt file",
        "Source": "Stack Overflow"
    },
    "333": {
        "APIs": [
            "signal.alarm()"
        ],
        "APIClasses": [
            "signal"
        ],
        "OriginalQuery": "how to run python script with os.fork on windows?",
        "Source": "Stack Overflow"
    },
    "334": {
        "APIs": [
            "str.replace()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Handing options with a comma with python's argparse",
        "Source": "Stack Overflow"
    },
    "335": {
        "APIs": [
            "numpy.fromfile()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Read floats from file as numpy array without knowing the data size",
        "Source": "Stack Overflow"
    },
    "336": {
        "APIs": [
            "smtplib.SMTP.sendmail()"
        ],
        "APIClasses": [
            "smtplib.SMTP"
        ],
        "OriginalQuery": "python and email.utils - How to add CC list",
        "Source": "Stack Overflow"
    },
    "337": {
        "APIs": [
            "str.translate()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "python: How to remove punctuations from file",
        "Source": "Stack Overflow"
    },
    "338": {
        "APIs": [
            "round()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Convert float to string with cutting zero decimals afer point in Python",
        "Source": "Stack Overflow"
    },
    "339": {
        "OriginalQuery": "Conflicting Python Packages How can it be Resolved?",
        "Source": "Stack Overflow"
    },
    "340": {
        "APIs": [
            "str.join()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How to receive certain size of data in socket programming?",
        "Source": "Stack Overflow"
    },
    "341": {
        "APIs": [
            "re.split()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python equivalent of ruby's StringScanner?",
        "Source": "Stack Overflow"
    },
    "342": {
        "APIs": [
            "heapq.heappushpop()"
        ],
        "APIClasses": [
            "heapq"
        ],
        "OriginalQuery": "How to set a max length for a python list/set?",
        "Source": "Stack Overflow"
    },
    "343": {
        "APIs": [
            "str.rstrip()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How to read line (from a file) and then append + print in python?",
        "Source": "Stack Overflow"
    },
    "344": {
        "APIs": [
            "struct.pack()"
        ],
        "APIClasses": [
            "struct"
        ],
        "OriginalQuery": "how to separate view and controller in python tkinter?",
        "Source": "Stack Overflow"
    },
    "345": {
        "APIs": [
            "callable()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to check for a function type in Python?",
        "Source": "Stack Overflow"
    },
    "346": {
        "OriginalQuery": "Flask - How do I read the raw body in a POST request when the content type is \"application/x-www-form-urlencoded\"",
        "Source": "Stack Overflow"
    },
    "347": {
        "OriginalQuery": "for or while loop to do something n times",
        "Source": "Stack Overflow"
    },
    "348": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to print out the full distribution of words in an LDA topic in gensim?",
        "Source": "Stack Overflow"
    },
    "349": {
        "APIs": [
            "socket.socket.send()"
        ],
        "APIClasses": [
            "socket.socket"
        ],
        "OriginalQuery": "How to limit download rate of HTTP requests in requests python library?",
        "Source": "Stack Overflow"
    },
    "350": {
        "APIs": [
            "time.sleep()"
        ],
        "APIClasses": [
            "time"
        ],
        "OriginalQuery": "Check a log file every 15 minutes with Python",
        "Source": "Stack Overflow"
    },
    "351": {
        "APIs": [
            "itertools.combinations()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Iterate over array twice (cartesian product) but consider only half the elements",
        "Source": "Stack Overflow"
    },
    "352": {
        "APIs": [
            "str.len()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How to delete everything after a certain character in a string?",
        "Source": "Stack Overflow"
    },
    "353": {
        "OriginalQuery": "Numpy - show decimal values in array results",
        "Source": "Stack Overflow"
    },
    "354": {
        "APIs": [
            "struct.unpack()"
        ],
        "APIClasses": [
            "struct"
        ],
        "OriginalQuery": "Converting Tuple to Hex with unknown type",
        "Source": "Stack Overflow"
    },
    "355": {
        "APIs": [
            "math.isnan()"
        ],
        "APIClasses": [
            "math"
        ],
        "OriginalQuery": "replace the NaN value zero after an operation with arrays",
        "Source": "Stack Overflow"
    },
    "356": {
        "APIs": [
            "numpy.sum()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Sum element by element list of lists python",
        "Source": "Stack Overflow"
    },
    "357": {
        "APIs": [
            "str.isalpha()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How can I get a loop to ignore non-letter elements in a list?",
        "Source": "Stack Overflow"
    },
    "358": {
        "APIs": [
            "str.translate()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Filtering Characters from a String",
        "Source": "Stack Overflow"
    },
    "359": {
        "APIs": [
            "str.upper()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "using regexp, how to find strings containing only uppercase or lowercase",
        "Source": "Stack Overflow"
    },
    "360": {
        "APIs": [
            "min()"
        ],
        "APIClasses": [],
        "OriginalQuery": "python dict, find value closest to x",
        "Source": "Stack Overflow"
    },
    "361": {
        "APIs": [
            "str.join()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python dict to string",
        "Source": "Stack Overflow"
    },
    "362": {
        "APIs": [
            "globals()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to reset some function variables in Python in a loop",
        "Source": "Stack Overflow"
    },
    "363": {
        "OriginalQuery": "Allowing users to delete user input in python",
        "Source": "Stack Overflow"
    },
    "364": {
        "OriginalQuery": "how to get the integer value of a single pyserial byte in python",
        "Source": "Stack Overflow"
    },
    "365": {
        "OriginalQuery": "How to read an array of integers from single line of input in python3",
        "Source": "Stack Overflow"
    },
    "366": {
        "OriginalQuery": "How to install python package in a specific directory",
        "Source": "Stack Overflow"
    },
    "367": {
        "APIs": [
            "requests.get()"
        ],
        "APIClasses": [
            "requests"
        ],
        "OriginalQuery": "requests: disable auto decoding",
        "Source": "Stack Overflow"
    },
    "368": {
        "APIs": [
            "numpy.partition()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "How to split a string in Python?",
        "Source": "Stack Overflow"
    },
    "369": {
        "OriginalQuery": "Executing shell command from python",
        "Source": "Stack Overflow"
    },
    "370": {
        "APIs": [
            "str.rstrip()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Splitting characters from a text file in Python",
        "Source": "Stack Overflow"
    },
    "371": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Elegant way to remove items from sequence in Python?",
        "Source": "Stack Overflow"
    },
    "372": {
        "APIs": [
            "multiprocessing.Process.join()"
        ],
        "APIClasses": [
            "multiprocessing.Process"
        ],
        "OriginalQuery": "Python Multiprocessing Kill Processes",
        "Source": "Stack Overflow"
    },
    "373": {
        "APIs": [
            "django.contrib.sitemaps.views.index()"
        ],
        "APIClasses": [
            "django.contrib.sitemaps.views"
        ],
        "OriginalQuery": "Display icons in Django admin for each item",
        "Source": "Stack Overflow"
    },
    "374": {
        "APIs": [
            "str.strip()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How to remove all spaces in the strings in list",
        "Source": "Stack Overflow"
    },
    "375": {
        "APIs": [
            "datetime.datetime.strptime()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "Convert string to datetime.time object",
        "Source": "Stack Overflow"
    },
    "376": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Convert list of lists to list of integers",
        "Source": "Stack Overflow"
    },
    "377": {
        "APIs": [
            "seek()"
        ],
        "APIClasses": [],
        "OriginalQuery": "how to break out of only one nested loop",
        "Source": "Stack Overflow"
    },
    "378": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Draw line with matplotlib (timeseries)",
        "Source": "Stack Overflow"
    },
    "379": {
        "APIs": [
            "str.strip()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Split function add: \\xef\\xbb\\xbf...\\n to my list",
        "Source": "Stack Overflow"
    },
    "380": {
        "APIs": [
            "repr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Recognizing newline characters in Python",
        "Source": "Stack Overflow"
    },
    "381": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "how to split a unicode string into list",
        "Source": "Stack Overflow"
    },
    "382": {
        "OriginalQuery": "How to write a function that takes a positive integer N and returns a list of the first N natural numbers",
        "Source": "Stack Overflow"
    },
    "383": {
        "APIs": [
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "how to 'index' a named tuple",
        "Source": "Stack Overflow"
    },
    "384": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "In dictionary where keys are numbers, how to find key which is smaller but the most near to given number?",
        "Source": "Stack Overflow"
    },
    "385": {
        "APIs": [
            "json.dumps()"
        ],
        "APIClasses": [
            "json"
        ],
        "OriginalQuery": "CSV to JSON script",
        "Source": "Stack Overflow"
    },
    "386": {
        "OriginalQuery": "Programmatically exiting python script while multithreading",
        "Source": "Stack Overflow"
    },
    "387": {
        "OriginalQuery": "Python 2.7 : Write to file instantly",
        "Source": "Stack Overflow"
    },
    "388": {
        "APIs": [
            "str.join()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "File stores contents in one line but how to store it line by line.?",
        "Source": "Stack Overflow"
    },
    "389": {
        "APIs": [
            "json.loads()"
        ],
        "APIClasses": [
            "json"
        ],
        "OriginalQuery": "Parsing JSON in Python and AngularJS",
        "Source": "Stack Overflow"
    },
    "390": {
        "APIs": [
            "re.escape()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "python re find string that may contain brackets",
        "Source": "Stack Overflow"
    },
    "391": {
        "APIs": [
            "numpy.concatenate()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "How do I add rows and columns to a NUMPY array?",
        "Source": "Stack Overflow"
    },
    "392": {
        "APIs": [
            "dict.keys()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Efficient Dictionary Searching?",
        "Source": "Stack Overflow"
    },
    "393": {
        "OriginalQuery": "Pretty-print an entire Pandas Series / DataFrame",
        "Source": "Stack Overflow"
    },
    "394": {
        "APIs": [
            "os.system()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "double quote escaping in os.system on windows",
        "Source": "Stack Overflow"
    },
    "395": {
        "APIs": [
            "datetime.date.strftime()"
        ],
        "APIClasses": [
            "datetime.date"
        ],
        "OriginalQuery": "Python date formatting without space?",
        "Source": "Stack Overflow"
    },
    "396": {
        "OriginalQuery": "Django How to pass list of values one views function to other views function",
        "Source": "Stack Overflow"
    },
    "397": {
        "OriginalQuery": "Sum ndarray values",
        "Source": "Stack Overflow"
    },
    "398": {
        "OriginalQuery": "Find ordered vector in numpy array",
        "Source": "Stack Overflow"
    },
    "399": {
        "APIs": [
            "chr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Convert string / character to integer in python",
        "Source": "Stack Overflow"
    },
    "400": {
        "APIs": [
            "str.rsplit()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python getting the last part after spliting with a dot",
        "Source": "Stack Overflow"
    },
    "401": {
        "APIs": [
            "time.time()"
        ],
        "APIClasses": [
            "time"
        ],
        "OriginalQuery": "Python- Quickselect function finding the median",
        "Source": "Stack Overflow"
    },
    "402": {
        "APIs": [
            "numpy.mean()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Double Summation in Python",
        "Source": "Stack Overflow"
    },
    "403": {
        "APIs": [
            "multiprocessing.Process.is_alive()"
        ],
        "APIClasses": [
            "multiprocessing.Process"
        ],
        "OriginalQuery": "how to kill zombie processes created by multiprocessing module?",
        "Source": "Stack Overflow"
    },
    "404": {
        "APIs": [
            "os.path.dirname()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "How do I find directory of the Python running script from inside the script?",
        "Source": "Stack Overflow"
    },
    "405": {
        "APIs": [
            "io.open()"
        ],
        "APIClasses": [
            "io"
        ],
        "OriginalQuery": "python xml processing - how to loop through all elements?",
        "Source": "Stack Overflow"
    },
    "406": {
        "APIs": [
            "configparser.ConfigParser.optionxform()"
        ],
        "APIClasses": [
            "configparser.ConfigParser"
        ],
        "OriginalQuery": "ConfigParser reads capital keys and make them lower case",
        "Source": "Stack Overflow"
    },
    "407": {
        "APIs": [
            "multiprocessing.Process.join()"
        ],
        "APIClasses": [
            "multiprocessing.Process"
        ],
        "OriginalQuery": "The right way to limit maximum number of threads running at once?",
        "Source": "Stack Overflow"
    },
    "408": {
        "APIs": [
            "numpy.ravel()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Constructing a Python set from a Numpy matrix",
        "Source": "Stack Overflow"
    },
    "409": {
        "APIs": [
            "bin()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Converts integer into a bit number of specific length, fast",
        "Source": "Stack Overflow"
    },
    "410": {
        "APIs": [
            "json.JSONEncoder.default()"
        ],
        "APIClasses": [
            "json.JSONEncoder"
        ],
        "OriginalQuery": "Encoding list of objects as JSON object",
        "Source": "Stack Overflow"
    },
    "411": {
        "OriginalQuery": "BeautifulSoup searching for specific children",
        "Source": "Stack Overflow"
    },
    "412": {
        "APIs": [
            "lxml()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to stream XML output quickly from Python",
        "Source": "Stack Overflow"
    },
    "413": {
        "APIs": [
            "logging.basicConfig()"
        ],
        "APIClasses": [
            "logging"
        ],
        "OriginalQuery": "How can I get python logging.debug() messages to output to standard output?",
        "Source": "Stack Overflow"
    },
    "414": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "making a 3d python array from three 1d arrays",
        "Source": "Stack Overflow"
    },
    "415": {
        "APIs": [
            "logging.Logger.setLevel()"
        ],
        "APIClasses": [
            "logging.Logger"
        ],
        "OriginalQuery": "Dynamically changing log level without restarting the application",
        "Source": "Stack Overflow"
    },
    "416": {
        "APIs": [
            "str.join()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "generating a string from a list or dictionary, how to treat first element differently?",
        "Source": "Stack Overflow"
    },
    "417": {
        "APIs": [
            "operator.mul()"
        ],
        "APIClasses": [
            "operator"
        ],
        "OriginalQuery": "multiplication of two arguments in python",
        "Source": "Stack Overflow"
    },
    "418": {
        "APIs": [
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Simplest way of checking for string that contains a string in list?",
        "Source": "Stack Overflow"
    },
    "419": {
        "OriginalQuery": "Print single character at a time in loop",
        "Source": "Stack Overflow"
    },
    "420": {
        "APIs": [
            "ord()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to read raw bytes from socket in Python?",
        "Source": "Stack Overflow"
    },
    "421": {
        "APIs": [
            "itertools.groupby()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Django, grouping query items",
        "Source": "Stack Overflow"
    },
    "422": {
        "OriginalQuery": "Converting hex to int in python",
        "Source": "Stack Overflow"
    },
    "423": {
        "OriginalQuery": "django-registration passing extra_context to Registration Form",
        "Source": "Stack Overflow"
    },
    "424": {
        "APIs": [
            "logging.getLogger()"
        ],
        "APIClasses": [
            "logging"
        ],
        "OriginalQuery": "Determining if root logger is set to DEBUG level in Python?",
        "Source": "Stack Overflow"
    },
    "425": {
        "APIs": [
            "os.listdir()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Fast way to read filename from directory?",
        "Source": "Stack Overflow"
    },
    "426": {
        "OriginalQuery": "How to get the resolution of a monitor in Pygame?",
        "Source": "Stack Overflow"
    },
    "427": {
        "APIs": [
            "eval()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Convert a string equation to an integer answer",
        "Source": "Stack Overflow"
    },
    "428": {
        "APIs": [
            "pandas.DataFrame.shift()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Calculate Daily Returns with Pandas DataFrame",
        "Source": "Stack Overflow"
    },
    "429": {
        "OriginalQuery": "Setting default values to table fields inside view web2py",
        "Source": "Stack Overflow"
    },
    "430": {
        "APIs": [
            "dict.keys()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Python - How to put sqlite result into a list",
        "Source": "Stack Overflow"
    },
    "431": {
        "APIs": [
            "pandas.DataFrame.reset_index()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Removing index column in pandas when reading a csv",
        "Source": "Stack Overflow"
    },
    "432": {
        "APIs": [
            "pandas.DataFrame.reset_index()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Turn Pandas Multi-Index into column",
        "Source": "Stack Overflow"
    },
    "433": {
        "APIs": [
            "codecs.encode()"
        ],
        "APIClasses": [
            "codecs"
        ],
        "OriginalQuery": "Python string encoding for a variable",
        "Source": "Stack Overflow"
    },
    "434": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Find value of scrabble word",
        "Source": "Stack Overflow"
    },
    "435": {
        "APIs": [
            "traceback.format_tb()"
        ],
        "APIClasses": [
            "traceback"
        ],
        "OriginalQuery": "How can I get the traceback object ( sys.exc_info()[2] , same as sys.exc_traceback ) as a string?",
        "Source": "Stack Overflow"
    },
    "436": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python: Sort 2-Dimensional Array by Array length?",
        "Source": "Stack Overflow"
    },
    "437": {
        "APIs": [
            "hash()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Looking for a way to preprocess string features",
        "Source": "Stack Overflow"
    },
    "438": {
        "APIs": [
            "multiprocessing.Process.terminate()"
        ],
        "APIClasses": [
            "multiprocessing.Process"
        ],
        "OriginalQuery": "How to run a subprocess in the background python",
        "Source": "Stack Overflow"
    },
    "439": {
        "APIs": [
            "print()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Printing within list comprehension in Python",
        "Source": "Stack Overflow"
    },
    "440": {
        "APIs": [
            "numpy.place()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Setting objects coordinates in tkinter",
        "Source": "Stack Overflow"
    },
    "441": {
        "OriginalQuery": "Cleanest way to hide every nth tick label in matplotlib colorbar?",
        "Source": "Stack Overflow"
    },
    "442": {
        "OriginalQuery": "Solve multi-objectives optimization of a graph in Python",
        "Source": "Stack Overflow"
    },
    "443": {
        "APIs": [
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to simplify multiple conditions in Python",
        "Source": "Stack Overflow"
    },
    "444": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "split and strip elements in list python",
        "Source": "Stack Overflow"
    },
    "445": {
        "APIs": [
            "os.listdir()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Use python to reproduce bash command 'ls -a' output",
        "Source": "Stack Overflow"
    },
    "446": {
        "OriginalQuery": "Reading *.wav files in Python",
        "Source": "Stack Overflow"
    },
    "447": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to write to file without parenthesis in python",
        "Source": "Stack Overflow"
    },
    "448": {
        "OriginalQuery": "render a django template from database html contents",
        "Source": "Stack Overflow"
    },
    "449": {
        "OriginalQuery": "Django join multiple annotated querysets",
        "Source": "Stack Overflow"
    },
    "450": {
        "APIs": [
            "str.find()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Case Insensitive Python string split() method",
        "Source": "Stack Overflow"
    },
    "451": {
        "APIs": [
            "repr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to store bash shell script in the JSON document effectively for Python script",
        "Source": "Stack Overflow"
    },
    "452": {
        "APIs": [
            "django.contrib.admin.autodiscover()"
        ],
        "APIClasses": [
            "django.contrib.admin"
        ],
        "OriginalQuery": "How to get the path of the function call in Python?",
        "Source": "Stack Overflow"
    },
    "453": {
        "APIs": [
            "locale.setlocale()"
        ],
        "APIClasses": [
            "locale"
        ],
        "OriginalQuery": "python datetime localization",
        "Source": "Stack Overflow"
    },
    "454": {
        "APIs": [
            "tarfile.TarFile.getnames()"
        ],
        "APIClasses": [
            "tarfile.TarFile"
        ],
        "OriginalQuery": "Python: Untar a single folder from a tarball",
        "Source": "Stack Overflow"
    },
    "455": {
        "APIs": [
            "ax.set_yargmin()"
        ],
        "APIClasses": [
            "ax"
        ],
        "OriginalQuery": "Adding offset to x y axes in matplotlib",
        "Source": "Stack Overflow"
    },
    "456": {
        "OriginalQuery": "Python List indexed by tuples",
        "Source": "Stack Overflow"
    },
    "457": {
        "OriginalQuery": "DecimalField Converts Zero to 0E-10",
        "Source": "Stack Overflow"
    },
    "458": {
        "APIs": [
            "warnings.filterwarnings()"
        ],
        "APIClasses": [
            "warnings"
        ],
        "OriginalQuery": "trapping a MySql warning",
        "Source": "Stack Overflow"
    },
    "459": {
        "APIs": [
            "numpy.delete()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "How to exclude rows/columns from numpy.ndarray data",
        "Source": "Stack Overflow"
    },
    "460": {
        "APIs": [
            "collections.Counter.most_common()"
        ],
        "APIClasses": [
            "collections.Counter"
        ],
        "OriginalQuery": "How do I find the mode of a list or tuple without the frequency?",
        "Source": "Stack Overflow"
    },
    "461": {
        "APIs": [
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to check if a range of numbers supplied exist in a list? - Python",
        "Source": "Stack Overflow"
    },
    "462": {
        "APIs": [
            "io.IOBase.seek()"
        ],
        "APIClasses": [
            "io.IOBase"
        ],
        "OriginalQuery": "Re-open files in Python?",
        "Source": "Stack Overflow"
    },
    "463": {
        "APIs": [
            "hasattr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How can one assert in Django that a model field has already been populated from the DB?",
        "Source": "Stack Overflow"
    },
    "464": {
        "APIs": [
            "codecs.encode()"
        ],
        "APIClasses": [
            "codecs"
        ],
        "OriginalQuery": "Writing text from BeautifulSoup to file",
        "Source": "Stack Overflow"
    },
    "465": {
        "APIs": [
            "re.sub()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "python function to convert camel case to snake case",
        "Source": "Stack Overflow"
    },
    "466": {
        "APIs": [
            "binascii.unhexlify()"
        ],
        "APIClasses": [
            "binascii"
        ],
        "OriginalQuery": "python text to hex and searching hex data or convert everything to binary",
        "Source": "Stack Overflow"
    },
    "467": {
        "APIs": [
            "numpy.ones()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "How to create a numpy array of all True or all False?",
        "Source": "Stack Overflow"
    },
    "468": {
        "APIs": [
            "socket.socket.listen()"
        ],
        "APIClasses": [
            "socket.socket"
        ],
        "OriginalQuery": "How do I allow more simultaneous socket connections?",
        "Source": "Stack Overflow"
    },
    "469": {
        "APIs": [
            "os.path.abspath()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "Python importing only modules within package",
        "Source": "Stack Overflow"
    },
    "470": {
        "APIs": [
            "str.join()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Copy 'N' lines from one file to another in python?",
        "Source": "Stack Overflow"
    },
    "471": {
        "OriginalQuery": "How do I change the pygame icon?",
        "Source": "Stack Overflow"
    },
    "472": {
        "APIs": [
            "pandas.Index.intersection()"
        ],
        "APIClasses": [
            "pandas.Index"
        ],
        "OriginalQuery": "How to pass list of sets as separate arguments into function?",
        "Source": "Stack Overflow"
    },
    "473": {
        "APIs": [
            "io.TextIOBase.seek()"
        ],
        "APIClasses": [
            "io.TextIOBase"
        ],
        "OriginalQuery": "Read last n lines of file (tail) without reading it line-by-line?",
        "Source": "Stack Overflow"
    },
    "474": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Shortest way to replace parts of strings in NumPy array",
        "Source": "Stack Overflow"
    },
    "475": {
        "APIs": [
            "str.startswith()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python: How to check if path is a subpath",
        "Source": "Stack Overflow"
    },
    "476": {
        "OriginalQuery": "How to append one value to every tuple within a list?",
        "Source": "Stack Overflow"
    },
    "477": {
        "APIs": [
            "os.read()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "How do I perform low level I/O on a Linux device file in Python?",
        "Source": "Stack Overflow"
    },
    "478": {
        "APIs": [
            "os.path.exists()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "Django How to make only one query with queryset exists method?",
        "Source": "Stack Overflow"
    },
    "479": {
        "APIs": [
            "time.gmtime()"
        ],
        "APIClasses": [
            "time"
        ],
        "OriginalQuery": "how to find time at particular timezone from anywhere",
        "Source": "Stack Overflow"
    },
    "480": {
        "APIs": [
            "pandas.core.groupby.DataFrameGroupBy.hist()"
        ],
        "APIClasses": [
            "pandas.core.groupby.DataFrameGroupBy"
        ],
        "OriginalQuery": "Plotting histograms against classes in pandas / matplotlib",
        "Source": "Stack Overflow"
    },
    "481": {
        "OriginalQuery": "output group of json objects on new line instead of single line",
        "Source": "Stack Overflow"
    },
    "482": {
        "OriginalQuery": "How do I get logger to delete existing log file before writing to it again?",
        "Source": "Stack Overflow"
    },
    "483": {
        "OriginalQuery": "Python 3: Programmatically converting list of hex numbers to binary",
        "Source": "Stack Overflow"
    },
    "484": {
        "OriginalQuery": "How to determine the name of an egg for a Python package on Github?",
        "Source": "Stack Overflow"
    },
    "485": {
        "APIs": [
            "pandas.concat()"
        ],
        "APIClasses": [
            "pandas"
        ],
        "OriginalQuery": "How can I avoid repeated indices in pandas DataFrame after concat?",
        "Source": "Stack Overflow"
    },
    "486": {
        "APIs": [
            "iteritems()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Sort dictionary by the INT value of the value",
        "Source": "Stack Overflow"
    },
    "487": {
        "APIs": [
            "getattr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python: Concatenate two strings for getting a variable from a class",
        "Source": "Stack Overflow"
    },
    "488": {
        "OriginalQuery": "How do I make a Twisted application handle SIGTERM?",
        "Source": "Stack Overflow"
    },
    "489": {
        "APIs": [
            "str.startswith()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "python string split",
        "Source": "Stack Overflow"
    },
    "490": {
        "APIs": [
            "curses.window.delch()"
        ],
        "APIClasses": [
            "curses.window"
        ],
        "OriginalQuery": "How to clear string in a specific coordinate range in ncurses?",
        "Source": "Stack Overflow"
    },
    "491": {
        "APIs": [
            "getattr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Iterate over model instance field names and values in template",
        "Source": "Stack Overflow"
    },
    "492": {
        "OriginalQuery": "How to close a SQLAlchemy session?",
        "Source": "Stack Overflow"
    },
    "493": {
        "APIs": [
            "numpy.dot()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Convert 1x1 sparse matrix to scalar",
        "Source": "Stack Overflow"
    },
    "494": {
        "OriginalQuery": "getting the id of a created record in SQLAlchemy",
        "Source": "Stack Overflow"
    },
    "495": {
        "APIs": [
            "str.splitlines()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Replace newlines in a Unicode string",
        "Source": "Stack Overflow"
    },
    "496": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Django filter objects with at least one many-to-many having attribute of value",
        "Source": "Stack Overflow"
    },
    "497": {
        "APIs": [
            "subprocess.check_output()"
        ],
        "APIClasses": [
            "subprocess"
        ],
        "OriginalQuery": "Print subprocess.call result",
        "Source": "Stack Overflow"
    },
    "498": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Converting a list of lists into a list of strings - Python",
        "Source": "Stack Overflow"
    },
    "499": {
        "APIs": [
            "eval()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python convert a string to a logic operator",
        "Source": "Stack Overflow"
    },
    "500": {
        "APIs": [
            "os.open()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Open file for read/write, create if needed",
        "Source": "Stack Overflow"
    },
    "501": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "python tuple division",
        "Source": "Stack Overflow"
    },
    "502": {
        "APIs": [
            "vars()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Instantiate a Python class from a name",
        "Source": "Stack Overflow"
    },
    "503": {
        "APIs": [
            "ax.text()"
        ],
        "APIClasses": [
            "ax"
        ],
        "OriginalQuery": "add text to pandas dataframe plot",
        "Source": "Stack Overflow"
    },
    "504": {
        "APIs": [
            "numpy.load()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Extracting specific values from .npy file",
        "Source": "Stack Overflow"
    },
    "505": {
        "APIs": [
            "re.escape()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "regex + Python: How to find string with '?' in it?",
        "Source": "Stack Overflow"
    },
    "506": {
        "APIs": [
            "tkinter.ttk.Treeview.see()"
        ],
        "APIClasses": [
            "tkinter.ttk.Treeview"
        ],
        "OriginalQuery": "controlling the position of the scrollbar in Tkinter",
        "Source": "Stack Overflow"
    },
    "507": {
        "APIs": [
            "ord()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python: manipulating bits in a char in a string",
        "Source": "Stack Overflow"
    },
    "508": {
        "APIs": [
            "tarfile.TarFile.addfile()"
        ],
        "APIClasses": [
            "tarfile.TarFile"
        ],
        "OriginalQuery": "How can files be added to a tarfile with Python, without adding the directory hierarchy?",
        "Source": "Stack Overflow"
    },
    "509": {
        "APIs": [
            "dict.fromkeys()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "How to initialize a dict with keys from a list and empty value in Python?",
        "Source": "Stack Overflow"
    },
    "510": {
        "APIs": [
            "struct.pack()"
        ],
        "APIClasses": [
            "struct"
        ],
        "OriginalQuery": "How to print out the memory contents of object in python?",
        "Source": "Stack Overflow"
    },
    "511": {
        "APIs": [
            "django.db.models.query.QuerySet.all()"
        ],
        "APIClasses": [
            "django.db.models.query.QuerySet"
        ],
        "OriginalQuery": "is there a simple way to get group names of a user in django",
        "Source": "Stack Overflow"
    },
    "512": {
        "APIs": [
            "numpy.random.bytes()"
        ],
        "APIClasses": [
            "numpy.random"
        ],
        "OriginalQuery": "Flipping the last bit in a byte",
        "Source": "Stack Overflow"
    },
    "513": {
        "APIs": [
            "input()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Equivalent to System('PAUSE')",
        "Source": "Stack Overflow"
    },
    "514": {
        "APIs": [
            "re.sub()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "pandas applying regex to replace values",
        "Source": "Stack Overflow"
    },
    "515": {
        "APIs": [
            "os.path.isfile()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "Pythonic way to check if a file exists?",
        "Source": "Stack Overflow"
    },
    "516": {
        "APIs": [
            "multiprocessing.Pipe()"
        ],
        "APIClasses": [
            "multiprocessing"
        ],
        "OriginalQuery": "how to unit test a python process",
        "Source": "Stack Overflow"
    },
    "517": {
        "APIs": [
            "lxml.html.parse()"
        ],
        "APIClasses": [
            "lxml.html"
        ],
        "OriginalQuery": "how to parse iframe in lxml in python?",
        "Source": "Stack Overflow"
    },
    "518": {
        "APIs": [
            "logging.basicConfig()"
        ],
        "APIClasses": [
            "logging"
        ],
        "OriginalQuery": "How to enable logging at the initialization of the module in Python?",
        "Source": "Stack Overflow"
    },
    "519": {
        "APIs": [
            "setattr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "how to define generic variables in Python (syntax question)",
        "Source": "Stack Overflow"
    },
    "520": {
        "OriginalQuery": "Django, get an attribute from a model",
        "Source": "Stack Overflow"
    },
    "521": {
        "APIs": [
            "json.dump()"
        ],
        "APIClasses": [
            "json"
        ],
        "OriginalQuery": "Pretty print JSON python",
        "Source": "Stack Overflow"
    },
    "522": {
        "OriginalQuery": "turn off axis border for polar matplotlib plot",
        "Source": "Stack Overflow"
    },
    "523": {
        "APIs": [
            "sqlite3.Cursor.execute()"
        ],
        "APIClasses": [
            "sqlite3.Cursor"
        ],
        "OriginalQuery": "How do i update values in an SQL database? SQLite/Python",
        "Source": "Stack Overflow"
    },
    "524": {
        "APIs": [
            "os.system()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Python clear the screen",
        "Source": "Stack Overflow"
    },
    "525": {
        "APIs": [
            "os.urandom()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Can I generate authentic random number with python?",
        "Source": "Stack Overflow"
    },
    "526": {
        "APIs": [
            "pandas.core.groupby.GroupBy.first()"
        ],
        "APIClasses": [
            "pandas.core.groupby.GroupBy"
        ],
        "OriginalQuery": "Fastest Way to Drop Duplicated Index in a Pandas DataFrame",
        "Source": "Stack Overflow"
    },
    "527": {
        "OriginalQuery": "matplotlib: enlarge axis-scale label",
        "Source": "Stack Overflow"
    },
    "528": {
        "OriginalQuery": "How to collect stats from within scrapy spider callback?",
        "Source": "Stack Overflow"
    },
    "529": {
        "APIs": [
            "dict.keys()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Python3: sorting a list of dictionary keys",
        "Source": "Stack Overflow"
    },
    "530": {
        "OriginalQuery": "How to use Twitter API to check if a user/password is valid?",
        "Source": "Stack Overflow"
    },
    "531": {
        "APIs": [
            "os.dup2()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Redirect stderr to stdout on exec-ed process from python?",
        "Source": "Stack Overflow"
    },
    "532": {
        "APIs": [
            "list()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python: How to create new identical list object?",
        "Source": "Stack Overflow"
    },
    "533": {
        "APIs": [
            "multiprocessing.pool.Pool.map()"
        ],
        "APIClasses": [
            "multiprocessing.pool.Pool"
        ],
        "OriginalQuery": "How to use threads within a Flask route",
        "Source": "Stack Overflow"
    },
    "534": {
        "APIs": [
            "django.db.models.query.QuerySet.values()"
        ],
        "APIClasses": [
            "django.db.models.query.QuerySet"
        ],
        "OriginalQuery": "Django: Group Counts on Foreign Keys",
        "Source": "Stack Overflow"
    },
    "535": {
        "OriginalQuery": "Using Python, how can I check which object in an `if or` statement returned `True`?",
        "Source": "Stack Overflow"
    },
    "536": {
        "APIs": [
            "pandas.DataFrame.from_records()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Converting a list of dicts to a Pandas dataframe",
        "Source": "Stack Overflow"
    },
    "537": {
        "APIs": [
            "np.multiply()"
        ],
        "APIClasses": [
            "np"
        ],
        "OriginalQuery": "NumPy: matrix by vector multiplication",
        "Source": "Stack Overflow"
    },
    "538": {
        "OriginalQuery": "Return common element indices between two numpy arrays",
        "Source": "Stack Overflow"
    },
    "539": {
        "APIs": [
            "locale.str()"
        ],
        "APIClasses": [
            "locale"
        ],
        "OriginalQuery": "Convert dbus.String to normal string",
        "Source": "Stack Overflow"
    },
    "540": {
        "OriginalQuery": "How can I run a py2exe program in windows without the terminal?",
        "Source": "Stack Overflow"
    },
    "541": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python: Memory efficient sort of a list of tuples by two elements",
        "Source": "Stack Overflow"
    },
    "542": {
        "OriginalQuery": "How to verify if a button is enabled and disabled in Webdriver Python?",
        "Source": "Stack Overflow"
    },
    "543": {
        "APIs": [
            "sys._current_frames()"
        ],
        "APIClasses": [
            "sys"
        ],
        "OriginalQuery": "Detect when threads are running in a python application?",
        "Source": "Stack Overflow"
    },
    "544": {
        "OriginalQuery": "Use Mercurial API to Get Changes to a Repository For a Given Changeset",
        "Source": "Stack Overflow"
    },
    "545": {
        "APIs": [
            "numpy.dot()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "multiply multidimensional arrays in python",
        "Source": "Stack Overflow"
    },
    "546": {
        "APIs": [
            "str.lstrip()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How can I convert string to \"command\" in Python?",
        "Source": "Stack Overflow"
    },
    "547": {
        "APIs": [
            "os.getppid()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "After starting process, how to get parent's PID in the child?",
        "Source": "Stack Overflow"
    },
    "548": {
        "APIs": [
            "numpy.arange()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "numpy 2d array max/argmax",
        "Source": "Stack Overflow"
    },
    "549": {
        "APIs": [
            "numpy.dot()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "XOR Matrix Multiplication in Python",
        "Source": "Stack Overflow"
    },
    "550": {
        "OriginalQuery": "How to write CSV output to stdout?",
        "Source": "Stack Overflow"
    },
    "551": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "how to zip function with two arrays as a return value - Python",
        "Source": "Stack Overflow"
    },
    "552": {
        "APIs": [
            "socket.socket.recv()"
        ],
        "APIClasses": [
            "socket.socket"
        ],
        "OriginalQuery": "How to check if all data are received with a TCP Socket in Python",
        "Source": "Stack Overflow"
    },
    "553": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How might I create an acronym by splitting a string at the spaces, taking the character indexed at 0, joining it together, and capitalizing it?",
        "Source": "Stack Overflow"
    },
    "554": {
        "APIs": [
            "multiprocessing.Array()"
        ],
        "APIClasses": [
            "multiprocessing"
        ],
        "OriginalQuery": "Python shared string memory for multiprocessing",
        "Source": "Stack Overflow"
    },
    "555": {
        "APIs": [
            "select.select()"
        ],
        "APIClasses": [
            "select"
        ],
        "OriginalQuery": "Can I somehow select a specific element from dropdown list on the page via splinter module in Python",
        "Source": "Stack Overflow"
    },
    "556": {
        "APIs": [
            "pandas.DataFrame.reset_index()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Pandas/Python Converting a series with two columns into a dataframe",
        "Source": "Stack Overflow"
    },
    "557": {
        "APIs": [
            "dict.items()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "filter items in a python dictionary where keys contain a specific string",
        "Source": "Stack Overflow"
    },
    "558": {
        "APIs": [
            "__import__()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python, dynamically invoke script",
        "Source": "Stack Overflow"
    },
    "559": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How do I search for indices that satisfy condition in numpy?",
        "Source": "Stack Overflow"
    },
    "560": {
        "OriginalQuery": "Python/Django: How to deserialize foo[]=1&foo[]=2&",
        "Source": "Stack Overflow"
    },
    "561": {
        "OriginalQuery": "Reading utf-8 escape sequences from a file",
        "Source": "Stack Overflow"
    },
    "562": {
        "APIs": [
            "gc.get_referrers()"
        ],
        "APIClasses": [
            "gc"
        ],
        "OriginalQuery": "How to implement Garbage Collection in Numpy",
        "Source": "Stack Overflow"
    },
    "563": {
        "APIs": [
            "ord()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Converting character to int and vice versa in Python",
        "Source": "Stack Overflow"
    },
    "564": {
        "OriginalQuery": "Plot with many y-axis in different scales: how to tight figure",
        "Source": "Stack Overflow"
    },
    "565": {
        "APIs": [
            "pandas.DataFrame.reset_index()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "How to create a new dataframe column with shifted values from another column?",
        "Source": "Stack Overflow"
    },
    "566": {
        "APIs": [
            "os.path.dirname()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "Get the last '/' or '\\\\' character in Python",
        "Source": "Stack Overflow"
    },
    "567": {
        "APIs": [
            "multiprocessing.Process.terminate()"
        ],
        "APIClasses": [
            "multiprocessing.Process"
        ],
        "OriginalQuery": "How to stop single Multiprocessing Process in Python?",
        "Source": "Stack Overflow"
    },
    "568": {
        "OriginalQuery": "Function to create in-memory zip file and return as http response",
        "Source": "Stack Overflow"
    },
    "569": {
        "APIs": [
            "logging.config.dictConfig()"
        ],
        "APIClasses": [
            "logging.config"
        ],
        "OriginalQuery": "How to always write log message to file regardless of level setting",
        "Source": "Stack Overflow"
    },
    "570": {
        "APIs": [
            "pandas.DataFrame.median()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Python Pandas: Get row by median value",
        "Source": "Stack Overflow"
    },
    "571": {
        "APIs": [
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to get one value at a time from a generator function in Python?",
        "Source": "Stack Overflow"
    },
    "572": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "manipulating list items python",
        "Source": "Stack Overflow"
    },
    "573": {
        "APIs": [
            "str.replace()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Delete ^L character in a log file",
        "Source": "Stack Overflow"
    },
    "574": {
        "APIs": [
            "csv.reader()"
        ],
        "APIClasses": [
            "csv"
        ],
        "OriginalQuery": "correctly parsing a CSV file from an FTP server with app engine",
        "Source": "Stack Overflow"
    },
    "575": {
        "APIs": [
            "os.path.abspath()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "PYTHON: How to pass asterisk (*) as command line argument",
        "Source": "Stack Overflow"
    },
    "576": {
        "APIs": [
            "array.array.append()"
        ],
        "APIClasses": [
            "array.array"
        ],
        "OriginalQuery": "Appending raw input to a list",
        "Source": "Stack Overflow"
    },
    "577": {
        "APIs": [
            "str.replace()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "python - how to concatenate two words from one string without spaces",
        "Source": "Stack Overflow"
    },
    "578": {
        "OriginalQuery": "Match multiline regex in file object",
        "Source": "Stack Overflow"
    },
    "579": {
        "APIs": [
            "str.rstrip()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Log a string without ending newline",
        "Source": "Stack Overflow"
    },
    "580": {
        "APIs": [
            "pandas.Series.to_dict()"
        ],
        "APIClasses": [
            "pandas.Series"
        ],
        "OriginalQuery": "How to turn Flask Response Object into Dictionary",
        "Source": "Stack Overflow"
    },
    "581": {
        "APIs": [
            "io.StringIO.getvalue()"
        ],
        "APIClasses": [
            "io.StringIO"
        ],
        "OriginalQuery": "Writing PDFs to STDOUT with Python",
        "Source": "Stack Overflow"
    },
    "582": {
        "APIs": [
            "msilib.Database.Commit()"
        ],
        "APIClasses": [
            "msilib.Database"
        ],
        "OriginalQuery": "Get updated MySQL table entries in python without closing connection",
        "Source": "Stack Overflow"
    },
    "583": {
        "APIs": [
            "str.title()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Quicker way than \"try\" and \"except\" ? - Python",
        "Source": "Stack Overflow"
    },
    "584": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python 2 dict_items.sort() in Python 3",
        "Source": "Stack Overflow"
    },
    "585": {
        "APIs": [
            "itertools.combinations()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Efficient method to get all k combinations of a python list",
        "Source": "Stack Overflow"
    },
    "586": {
        "APIs": [
            "Index.unique()"
        ],
        "APIClasses": [
            "Index"
        ],
        "OriginalQuery": "Pandas: Get unique MultiIndex level values by label",
        "Source": "Stack Overflow"
    },
    "587": {
        "APIs": [
            "id()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How do I get the name of a function or method from within a Python function or method?",
        "Source": "Stack Overflow"
    },
    "588": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Django filter foreignkey field",
        "Source": "Stack Overflow"
    },
    "589": {
        "APIs": [
            "pandas.DataFrame.groupby()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Efficient strided slicing along a column in a pandas dataframe",
        "Source": "Stack Overflow"
    },
    "590": {
        "APIs": [
            "struct.pack()"
        ],
        "APIClasses": [
            "struct"
        ],
        "OriginalQuery": "How to arrange the layout of frames with navigation bar",
        "Source": "Stack Overflow"
    },
    "591": {
        "APIs": [
            "os.system()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "How to clear console in sublime text editor",
        "Source": "Stack Overflow"
    },
    "592": {
        "APIs": [
            "django.http.QueryDict.getlist()"
        ],
        "APIClasses": [
            "django.http.QueryDict"
        ],
        "OriginalQuery": "Sending a form array to Flask",
        "Source": "Stack Overflow"
    },
    "593": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Testing variable types in Python",
        "Source": "Stack Overflow"
    },
    "594": {
        "APIs": [
            "str.replace()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Prevent python from printing newline",
        "Source": "Stack Overflow"
    },
    "595": {
        "APIs": [
            "math.gamma()"
        ],
        "APIClasses": [
            "math"
        ],
        "OriginalQuery": "Python: How to express a division of factorials in decimal format?",
        "Source": "Stack Overflow"
    },
    "596": {
        "OriginalQuery": "Smart way of converting dictionary to key=value connection string in python",
        "Source": "Stack Overflow"
    },
    "597": {
        "APIs": [
            "hasattr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Django: Check if settings variable is set",
        "Source": "Stack Overflow"
    },
    "598": {
        "OriginalQuery": "get key by value in dictionary with same value in python?",
        "Source": "Stack Overflow"
    },
    "599": {
        "APIs": [
            "repr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How can I print the raw unicode in python?",
        "Source": "Stack Overflow"
    },
    "600": {
        "OriginalQuery": "How to plot asymptotes?",
        "Source": "Stack Overflow"
    },
    "601": {
        "APIs": [
            "json.loads()"
        ],
        "APIClasses": [
            "json"
        ],
        "OriginalQuery": "<class 'requests.models.Response'> to Json",
        "Source": "Stack Overflow"
    },
    "602": {
        "APIs": [
            "str.join()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Printing elements out of list",
        "Source": "Stack Overflow"
    },
    "603": {
        "APIs": [
            "os.cpu_count()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Python pool map and choosing number of processes",
        "Source": "Stack Overflow"
    },
    "604": {
        "APIs": [
            "os.chroot()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "How to chroot Django",
        "Source": "Stack Overflow"
    },
    "605": {
        "APIs": [
            "dict.items()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Python iterating through object attributes",
        "Source": "Stack Overflow"
    },
    "606": {
        "OriginalQuery": "Pandas Dataframe Series To List - Suppress Float Scientific Notation",
        "Source": "Stack Overflow"
    },
    "607": {
        "APIs": [
            "random.betavariate()"
        ],
        "APIClasses": [
            "random"
        ],
        "OriginalQuery": "How can I pass a random number generating function into a Python class?",
        "Source": "Stack Overflow"
    },
    "608": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to add additional column to Django QuerySet",
        "Source": "Stack Overflow"
    },
    "609": {
        "APIs": [
            "urllib.parse.urljoin()"
        ],
        "APIClasses": [
            "urllib.parse"
        ],
        "OriginalQuery": "Apply relative URL to an absolute URL",
        "Source": "Stack Overflow"
    },
    "610": {
        "APIs": [
            "datetime.date.strftime()"
        ],
        "APIClasses": [
            "datetime.date"
        ],
        "OriginalQuery": "how to convert string to date without time in python",
        "Source": "Stack Overflow"
    },
    "611": {
        "APIs": [
            "kivy.uix.widget.Widget.to_local, kivy.uix.widget.Widget.to_parent, kivy.uix.widget.Widget.to_widget, kivy.uix.widget.Widget.to_window"
        ],
        "APIClasses": [
            "kivy.uix.widget.Widget.to_local, kivy.uix.widget.Widget.to_parent, kivy.uix.widget.Widget.to_widget, kivy.uix.widget.Widget"
        ],
        "OriginalQuery": "How to get a widget position inside it's layout in Kivy?",
        "Source": "Stack Overflow"
    },
    "612": {
        "APIs": [
            "json.load()"
        ],
        "APIClasses": [
            "json"
        ],
        "OriginalQuery": "Python JSON list parsing",
        "Source": "Stack Overflow"
    },
    "613": {
        "APIs": [
            "frozenset.intersection()"
        ],
        "APIClasses": [
            "frozenset"
        ],
        "OriginalQuery": "Best way to find the intersection of multiple sets?",
        "Source": "Stack Overflow"
    },
    "614": {
        "APIs": [
            "copy.deepcopy()"
        ],
        "APIClasses": [
            "copy"
        ],
        "OriginalQuery": "Copying nested lists in Python",
        "Source": "Stack Overflow"
    },
    "615": {
        "APIs": [
            "socket.socket.setblocking()"
        ],
        "APIClasses": [
            "socket.socket"
        ],
        "OriginalQuery": "Creating non-blocking socket in python",
        "Source": "Stack Overflow"
    },
    "616": {
        "APIs": [
            "xml.etree.ElementTree.tostring()"
        ],
        "APIClasses": [
            "xml.etree.ElementTree"
        ],
        "OriginalQuery": "Print out xml to the console (xml.etree.ElementTree)",
        "Source": "Stack Overflow"
    },
    "617": {
        "APIs": [
            "array.array.tolist()"
        ],
        "APIClasses": [
            "array.array"
        ],
        "OriginalQuery": "python pandas flatten a dataframe to a list",
        "Source": "Stack Overflow"
    },
    "618": {
        "OriginalQuery": "Converting a string into a list in Python",
        "Source": "Stack Overflow"
    },
    "619": {
        "OriginalQuery": "How do I get the \"id\" after INSERT into MySQL database with Python?",
        "Source": "Stack Overflow"
    },
    "620": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to enumerate a .csv file in python?",
        "Source": "Stack Overflow"
    },
    "621": {
        "APIs": [
            "os.path.realpath()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "How to find the filename of a script being run when it is executed from a symlink on linux",
        "Source": "Stack Overflow"
    },
    "622": {
        "OriginalQuery": "How to extract text between <h1></h1> in Python?",
        "Source": "Stack Overflow"
    },
    "623": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to remove duplicates from a list of tuples but keeping the original order",
        "Source": "Stack Overflow"
    },
    "624": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to replace efficiently values on a pandas DataFrame?",
        "Source": "Stack Overflow"
    },
    "625": {
        "APIs": [
            "dict.keys()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Right way to check for key in dictionary in python",
        "Source": "Stack Overflow"
    },
    "626": {
        "APIs": [
            "input()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python, timing in program: How far away storm is?",
        "Source": "Stack Overflow"
    },
    "627": {
        "APIs": [
            "idk"
        ],
        "APIClasses": [],
        "OriginalQuery": "Kivy Buttons- Play sound on click",
        "Source": "Stack Overflow"
    },
    "628": {
        "OriginalQuery": "upgrading python module within code",
        "Source": "Stack Overflow"
    },
    "629": {
        "OriginalQuery": "how to convert N space separated numbers into in array in python?",
        "Source": "Stack Overflow"
    },
    "630": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to know if object is of str or list or dict or int?",
        "Source": "Stack Overflow"
    },
    "631": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How to replace empty string with zero in comma-separated string?",
        "Source": "Stack Overflow"
    },
    "632": {
        "APIs": [
            "tarfile.TarFile.list()"
        ],
        "APIClasses": [
            "tarfile.TarFile"
        ],
        "OriginalQuery": "How can I get the \"old\" zip() in Python3?",
        "Source": "Stack Overflow"
    },
    "633": {
        "APIs": [
            "os.getenv()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "How to set and retrieve environment variable in Python",
        "Source": "Stack Overflow"
    },
    "634": {
        "APIs": [
            "subprocess.Popen.poll()"
        ],
        "APIClasses": [
            "subprocess.Popen"
        ],
        "OriginalQuery": "How to really test signal handling in Python?",
        "Source": "Stack Overflow"
    },
    "635": {
        "OriginalQuery": "matplotlib plot and then wait for raw input",
        "Source": "Stack Overflow"
    },
    "636": {
        "OriginalQuery": "inner product for Python",
        "Source": "Stack Overflow"
    },
    "637": {
        "APIs": [
            "os.remove()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Remove element from a list generated with range in python?",
        "Source": "Stack Overflow"
    },
    "638": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to convert integers in list to string in python",
        "Source": "Stack Overflow"
    },
    "639": {
        "APIs": [
            "re.findall()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Extract until end of line after a special character: Python",
        "Source": "Stack Overflow"
    },
    "640": {
        "OriginalQuery": "How do I match contents of an element in XPath (lxml)?",
        "Source": "Stack Overflow"
    },
    "641": {
        "APIs": [
            "sys.exit()"
        ],
        "APIClasses": [
            "sys"
        ],
        "OriginalQuery": "Python 2.7.3 Multiprocessing Pool hanging",
        "Source": "Stack Overflow"
    },
    "642": {
        "APIs": [
            "multiprocessing.Queue.empty()"
        ],
        "APIClasses": [
            "multiprocessing.Queue"
        ],
        "OriginalQuery": "Staggered data loading with multiprocessing.Queue sometimes leads to items being consumed out of order",
        "Source": "Stack Overflow"
    },
    "643": {
        "APIs": [
            "urllib.parse.parse_qs()"
        ],
        "APIClasses": [
            "urllib.parse"
        ],
        "OriginalQuery": "How to parse empty value of parameter in HTTP request in python?",
        "Source": "Stack Overflow"
    },
    "644": {
        "APIs": [
            "multiprocessing.Process.terminate()"
        ],
        "APIClasses": [
            "multiprocessing.Process"
        ],
        "OriginalQuery": "Kill the background process executed by python",
        "Source": "Stack Overflow"
    },
    "645": {
        "APIs": [
            "pandas.DataFrame.astype()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Python pandas insert list into a cell",
        "Source": "Stack Overflow"
    },
    "646": {
        "OriginalQuery": "How to remove extra string \"Line2D\" in matplotlib legend",
        "Source": "Stack Overflow"
    },
    "647": {
        "OriginalQuery": "Using beautifulsoup how do I remove a single class from an element with multiple classes",
        "Source": "Stack Overflow"
    },
    "648": {
        "OriginalQuery": "How to create sound of ball bouncing off of bar",
        "Source": "Stack Overflow"
    },
    "649": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Identify rows with punctuation in pandas data frame",
        "Source": "Stack Overflow"
    },
    "650": {
        "APIs": [
            "os.path.normpath()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "Elegant way to take basename of directory in Python?",
        "Source": "Stack Overflow"
    },
    "651": {
        "APIs": [
            "DataFrame.index()"
        ],
        "APIClasses": [
            "DataFrame"
        ],
        "OriginalQuery": "How do I get the name of the rows from the index of a data frame?",
        "Source": "Stack Overflow"
    },
    "652": {
        "APIs": [
            "dict.items()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "How do I print the key-value pairs of a dictionary in python",
        "Source": "Stack Overflow"
    },
    "653": {
        "APIs": [
            "str.rfind()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Remove last part of string after dot from one column in a data file",
        "Source": "Stack Overflow"
    },
    "654": {
        "APIs": [
            "urllib.request.urlretrieve()"
        ],
        "APIClasses": [
            "urllib.request"
        ],
        "OriginalQuery": "how to extract the data from from website and save the into txt file",
        "Source": "Stack Overflow"
    },
    "655": {
        "APIs": [
            "boto.ec2.connect_to_region()"
        ],
        "APIClasses": [
            "boto.ec2"
        ],
        "OriginalQuery": "How to get list of all EBS Snapshots \"started\" before a certain date?",
        "Source": "Stack Overflow"
    },
    "656": {
        "APIs": [
            "str.format()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "matplotlib.pyplot title adjusts number of digits to display in floating points",
        "Source": "Stack Overflow"
    },
    "657": {
        "APIs": [
            "os.path.expanduser()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "How can I use Python to open \"~/.bash_profile\"",
        "Source": "Stack Overflow"
    },
    "658": {
        "APIs": [
            "itertools.islice()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Simplest way to get the first n elements of an iterator",
        "Source": "Stack Overflow"
    },
    "659": {
        "APIs": [
            "math.sqrt()"
        ],
        "APIClasses": [
            "math"
        ],
        "OriginalQuery": "How to find perfect squares in a range efficiently when the inputs are large numbers in Python",
        "Source": "Stack Overflow"
    },
    "660": {
        "APIs": [
            "os.listdir()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "List Directories and get the name of the Directory",
        "Source": "Stack Overflow"
    },
    "661": {
        "APIs": [
            "itertools.islice()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Fast iterating over first n items of an iterable (not a list) in python",
        "Source": "Stack Overflow"
    },
    "662": {
        "APIs": [
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Select an element that satisfies a condition",
        "Source": "Stack Overflow"
    },
    "663": {
        "APIs": [
            "codecs.decode()"
        ],
        "APIClasses": [
            "codecs"
        ],
        "OriginalQuery": "How to convert unicode to its original character in Python",
        "Source": "Stack Overflow"
    },
    "664": {
        "APIs": [
            "str.find()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python: Search for words before and after a pair of keywords",
        "Source": "Stack Overflow"
    },
    "665": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How can I get n largest lists from a list of lists in python",
        "Source": "Stack Overflow"
    },
    "666": {
        "APIs": [
            "dict.pop()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "how to remove attribute of a etree Element?",
        "Source": "Stack Overflow"
    },
    "667": {
        "OriginalQuery": "lxml get second last element",
        "Source": "Stack Overflow"
    },
    "668": {
        "APIs": [
            "pandas.DataFrame.mean()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Calculating the mean of groups in python/pandas",
        "Source": "Stack Overflow"
    },
    "669": {
        "APIs": [
            "abs()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python: How to find two equal/closest values between two separate arrays?",
        "Source": "Stack Overflow"
    },
    "670": {
        "OriginalQuery": "python regular expression, extracting set of numbers from a string",
        "Source": "Stack Overflow"
    },
    "671": {
        "APIs": [
            "shutil.copytree()"
        ],
        "APIClasses": [
            "shutil"
        ],
        "OriginalQuery": "Copy large list of files from one location to another",
        "Source": "Stack Overflow"
    },
    "672": {
        "APIs": [
            "numpy.matrix.tolist()"
        ],
        "APIClasses": [
            "numpy.matrix"
        ],
        "OriginalQuery": "Copied dictionary via numpy.copy. Now is ndarray; how to recover the original dictionary?",
        "Source": "Stack Overflow"
    },
    "673": {
        "APIs": [
            "xml.etree.ElementTree.Element.get()"
        ],
        "APIClasses": [
            "xml.etree.ElementTree.Element"
        ],
        "OriginalQuery": "Django: getting previous url",
        "Source": "Stack Overflow"
    },
    "674": {
        "APIs": [
            "io.IOBase.flush()"
        ],
        "APIClasses": [
            "io.IOBase"
        ],
        "OriginalQuery": "How to send a new command to a subprocess",
        "Source": "Stack Overflow"
    },
    "675": {
        "APIs": [
            "os.path.join()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "Python, add trailing slash to directory string, os independently",
        "Source": "Stack Overflow"
    },
    "676": {
        "APIs": [
            "str.replace()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "how to generate py files without default windows crlf?",
        "Source": "Stack Overflow"
    },
    "677": {
        "APIs": [
            "Gdk.get_default_root_window()"
        ],
        "APIClasses": [
            "Gdk"
        ],
        "OriginalQuery": "Get screen pixel color linux python3",
        "Source": "Stack Overflow"
    },
    "678": {
        "APIs": [
            "print()"
        ],
        "APIClasses": [],
        "OriginalQuery": "opening a jpg file in python",
        "Source": "Stack Overflow"
    },
    "679": {
        "APIs": [
            "numpy.unique()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "How to keep certain levels of a categorical variable and set remaining as \"other\" in pandas data frame",
        "Source": "Stack Overflow"
    },
    "680": {
        "OriginalQuery": "How to make shell output redirect (>) write while script is still running?",
        "Source": "Stack Overflow"
    },
    "681": {
        "APIs": [
            "str.replace()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Convert spaces to %20 in list",
        "Source": "Stack Overflow"
    },
    "682": {
        "APIs": [
            "str.strip()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Read .txt file line by line in Python",
        "Source": "Stack Overflow"
    },
    "683": {
        "APIs": [
            "numpy.ceil()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Floor or ceiling of a pandas series in python?",
        "Source": "Stack Overflow"
    },
    "684": {
        "OriginalQuery": "Iterating over key and value of defaultdict dictionaries",
        "Source": "Stack Overflow"
    },
    "685": {
        "APIs": [
            "str.isdigit()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How to check if input is a natural number in Python?",
        "Source": "Stack Overflow"
    },
    "686": {
        "APIs": [
            "numpy.split()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Python/Numpy: Divide array",
        "Source": "Stack Overflow"
    },
    "687": {
        "APIs": [
            "math.ceil()"
        ],
        "APIClasses": [
            "math"
        ],
        "OriginalQuery": "How do I find the largest integer less than x?",
        "Source": "Stack Overflow"
    },
    "688": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to get number of groups in a groupby object in pandas?",
        "Source": "Stack Overflow"
    },
    "689": {
        "OriginalQuery": "How to create and restore a backup from SqlAlchemy?",
        "Source": "Stack Overflow"
    },
    "690": {
        "APIs": [
            "tkinter.ttk.Style.lookup()"
        ],
        "APIClasses": [
            "tkinter.ttk.Style"
        ],
        "OriginalQuery": "get default background of ttk.Frame",
        "Source": "Stack Overflow"
    },
    "691": {
        "OriginalQuery": "libtorrent how to get a list of files seed content?",
        "Source": "Stack Overflow"
    },
    "692": {
        "OriginalQuery": "Lightweight Django: settings.ALLOWED_HOSTS set as environment variable",
        "Source": "Stack Overflow"
    },
    "693": {
        "OriginalQuery": "How do I pass a Python Variable to Bash?",
        "Source": "Stack Overflow"
    },
    "694": {
        "APIs": [
            "multiprocessing.Process.terminate()"
        ],
        "APIClasses": [
            "multiprocessing.Process"
        ],
        "OriginalQuery": "how to kill subprocesses when parent exits in python?",
        "Source": "Stack Overflow"
    },
    "695": {
        "OriginalQuery": "Implement a random math operation (+, -, or *)",
        "Source": "Stack Overflow"
    },
    "696": {
        "APIs": [
            "subprocess.Popen.communicate()"
        ],
        "APIClasses": [
            "subprocess.Popen"
        ],
        "OriginalQuery": "Python subprocess.popen() without waiting",
        "Source": "Stack Overflow"
    },
    "697": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Iterating through a dictionary that starts at the first key value each iteration",
        "Source": "Stack Overflow"
    },
    "698": {
        "APIs": [
            "re.compile()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "how to include \\ in the string as pattern for regex python",
        "Source": "Stack Overflow"
    },
    "699": {
        "APIs": [
            "matplotlib.pyplot.yscale()"
        ],
        "APIClasses": [
            "matplotlib.pyplot"
        ],
        "OriginalQuery": "Vary the scale of x-axis with Matplotlib",
        "Source": "Stack Overflow"
    },
    "700": {
        "APIs": [
            "urllib.request.urlopen()"
        ],
        "APIClasses": [
            "urllib.request"
        ],
        "OriginalQuery": "How to convert an urlopen into a string in python",
        "Source": "Stack Overflow"
    },
    "701": {
        "APIs": [
            "str.count()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python - List files and folders in Bucket",
        "Source": "Stack Overflow"
    },
    "702": {
        "APIs": [
            "pandas.DataFrame.reset_index()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "How to collapse columns into row elements in pandas?",
        "Source": "Stack Overflow"
    },
    "703": {
        "APIs": [
            "os.kill()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Multiple python scripts sending messages to a single central script",
        "Source": "Stack Overflow"
    },
    "704": {
        "APIs": [
            "itertools.product()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Cartesian product of a list of sets in python",
        "Source": "Stack Overflow"
    },
    "705": {
        "APIs": [
            "curses.window.scrollok()"
        ],
        "APIClasses": [
            "curses.window"
        ],
        "OriginalQuery": "How to scroll with curses?",
        "Source": "Stack Overflow"
    },
    "706": {
        "APIs": [
            "str.format()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How to print variables without spaces between values",
        "Source": "Stack Overflow"
    },
    "707": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Multiply two fields together in django orm",
        "Source": "Stack Overflow"
    },
    "708": {
        "APIs": [
            "copy.deepcopy()"
        ],
        "APIClasses": [
            "copy"
        ],
        "OriginalQuery": "Python copy a list of lists",
        "Source": "Stack Overflow"
    },
    "709": {
        "APIs": [
            "os.listdir()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Python - How to copy only new modified files",
        "Source": "Stack Overflow"
    },
    "710": {
        "APIs": [
            "super()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python subclassing process with initialiser",
        "Source": "Stack Overflow"
    },
    "711": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Evaluating boolean expression across Pandas DataFrame",
        "Source": "Stack Overflow"
    },
    "712": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to convert nested list strings to integers then sort them in python 3?",
        "Source": "Stack Overflow"
    },
    "713": {
        "APIs": [
            "re.Match.group()"
        ],
        "APIClasses": [
            "re.Match"
        ],
        "OriginalQuery": "Extract only the portion of a string between two regex patterns",
        "Source": "Stack Overflow"
    },
    "714": {
        "APIs": [
            "str.splitlines()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Parsing Python subprocess.check_output()",
        "Source": "Stack Overflow"
    },
    "715": {
        "OriginalQuery": "Read large csv file with many duplicate values, drop duplicates while reading",
        "Source": "Stack Overflow"
    },
    "716": {
        "APIs": [
            "struct.unpack()"
        ],
        "APIClasses": [
            "struct"
        ],
        "OriginalQuery": "Fastest way to pack and unpack binary data into list",
        "Source": "Stack Overflow"
    },
    "717": {
        "OriginalQuery": "How to test django model method __str__()",
        "Source": "Stack Overflow"
    },
    "718": {
        "APIs": [
            "io.open()"
        ],
        "APIClasses": [
            "io"
        ],
        "OriginalQuery": "Python unicode to ASCII conversion in write to file",
        "Source": "Stack Overflow"
    },
    "719": {
        "APIs": [
            "str.len()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Remove empty lists in pandas series",
        "Source": "Stack Overflow"
    },
    "720": {
        "APIs": [
            "pandas.DataFrame.keys()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Update OrderedDict's value at position?",
        "Source": "Stack Overflow"
    },
    "721": {
        "APIs": [
            "os.stat()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "How do I split a huge text file in python",
        "Source": "Stack Overflow"
    },
    "722": {
        "APIs": [
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to check if *either* character is in a string in Python?",
        "Source": "Stack Overflow"
    },
    "723": {
        "OriginalQuery": "find position of string elements in pandas dataframe",
        "Source": "Stack Overflow"
    },
    "724": {
        "APIs": [
            "time.strftime()"
        ],
        "APIClasses": [
            "time"
        ],
        "OriginalQuery": "Python Convert a Date Time to just Time",
        "Source": "Stack Overflow"
    },
    "725": {
        "OriginalQuery": "How to write an XML file without header in Python?",
        "Source": "Stack Overflow"
    },
    "726": {
        "APIs": [
            "copy.deepcopy()"
        ],
        "APIClasses": [
            "copy"
        ],
        "OriginalQuery": "How to copy instances of a custom defined class in Python 3.3?",
        "Source": "Stack Overflow"
    },
    "727": {
        "APIs": [
            "numpy.ndarray.__ne__()"
        ],
        "APIClasses": [
            "numpy.ndarray"
        ],
        "OriginalQuery": "How to count the number of occurrences of `None` in a list?",
        "Source": "Stack Overflow"
    },
    "728": {
        "APIs": [
            "itertools.product()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "repeating a numpy array a specified number of times for itertools",
        "Source": "Stack Overflow"
    },
    "729": {
        "APIs": [
            "str.strip()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How to remove brackets from python string?",
        "Source": "Stack Overflow"
    },
    "730": {
        "APIs": [
            "eval()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Convert a string to preexisting variable names",
        "Source": "Stack Overflow"
    },
    "731": {
        "APIs": [
            "json.loads()"
        ],
        "APIClasses": [
            "json"
        ],
        "OriginalQuery": "Get request body as string in Django",
        "Source": "Stack Overflow"
    },
    "732": {
        "APIs": [
            "os.path.expanduser()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "Accessing relative path in Python",
        "Source": "Stack Overflow"
    },
    "733": {
        "APIs": [
            "ord()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to print carriage return in unicode representation in python?",
        "Source": "Stack Overflow"
    },
    "734": {
        "APIs": [
            "print db_data.count()"
        ],
        "APIClasses": [
            "print db_data"
        ],
        "OriginalQuery": "How to limit mongo query in python",
        "Source": "Stack Overflow"
    },
    "735": {
        "APIs": [
            "min()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Get earliest and latest times from a list of datetimes",
        "Source": "Stack Overflow"
    },
    "736": {
        "OriginalQuery": "How to open password protected zip file in Python 3",
        "Source": "Stack Overflow"
    },
    "737": {
        "OriginalQuery": "How to convert neo4j return types to python types",
        "Source": "Stack Overflow"
    },
    "738": {
        "APIs": [
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Get list of all second-order keys in nested dictionary",
        "Source": "Stack Overflow"
    },
    "739": {
        "APIs": [
            "xml.etree.ElementTree.Element.get()"
        ],
        "APIClasses": [
            "xml.etree.ElementTree.Element"
        ],
        "OriginalQuery": "Parsing data with elementtree into a dictionary/list",
        "Source": "Stack Overflow"
    },
    "740": {
        "APIs": [
            "socket.socket.recv()"
        ],
        "APIClasses": [
            "socket.socket"
        ],
        "OriginalQuery": "Escape sequences appearing in socket messages",
        "Source": "Stack Overflow"
    },
    "741": {
        "APIs": [
            "os.path.dirname()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "Python ctypes: loading DLL from from a relative path",
        "Source": "Stack Overflow"
    },
    "742": {
        "OriginalQuery": "How to change Tkinter label text on button press",
        "Source": "Stack Overflow"
    },
    "743": {
        "APIs": [
            "id()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to check if two instances are of the same class Python",
        "Source": "Stack Overflow"
    },
    "744": {
        "OriginalQuery": "Checking if nested attribute exists",
        "Source": "Stack Overflow"
    },
    "745": {
        "APIs": [
            "copy.deepcopy()"
        ],
        "APIClasses": [
            "copy"
        ],
        "OriginalQuery": "Python duplicate a python-igraph",
        "Source": "Stack Overflow"
    },
    "746": {
        "OriginalQuery": "Opposite of set.intersection in python?",
        "Source": "Stack Overflow"
    },
    "747": {
        "APIs": [
            "asyncio.new_event_loop()"
        ],
        "APIClasses": [
            "asyncio"
        ],
        "OriginalQuery": "How to write custom event loop policy?",
        "Source": "Stack Overflow"
    },
    "748": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Summing list of counters in python",
        "Source": "Stack Overflow"
    },
    "749": {
        "APIs": [
            "re.findall()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python: How can I find all strings matching any of the multiple patterns given",
        "Source": "Stack Overflow"
    },
    "750": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python - How to delete rest of string after a specific word/character",
        "Source": "Stack Overflow"
    },
    "751": {
        "OriginalQuery": "Django - Get query parameter list",
        "Source": "Stack Overflow"
    },
    "752": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Django: how to get model field is ManyToManyField or not",
        "Source": "Stack Overflow"
    },
    "753": {
        "APIs": [
            "os.chmod()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Python script to delete old SVN files lacks permission",
        "Source": "Stack Overflow"
    },
    "754": {
        "APIs": [
            "print()"
        ],
        "APIClasses": [],
        "OriginalQuery": "how to create the new line character",
        "Source": "Stack Overflow"
    },
    "755": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Pandas: How to groupby and count and select a portion of counts?",
        "Source": "Stack Overflow"
    },
    "756": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Sort list from a specific index value in python",
        "Source": "Stack Overflow"
    },
    "757": {
        "APIs": [
            "io.TextIOBase.seek()"
        ],
        "APIClasses": [
            "io.TextIOBase"
        ],
        "OriginalQuery": "Writing to a file in Python inserts null bytes",
        "Source": "Stack Overflow"
    },
    "758": {
        "APIs": [
            "db.session.flush()"
        ],
        "APIClasses": [
            "db.session"
        ],
        "OriginalQuery": "Bulk inserts with Flask-SQLAlchemy",
        "Source": "Stack Overflow"
    },
    "759": {
        "APIs": [
            "numpy.random.seed()"
        ],
        "APIClasses": [
            "numpy.random"
        ],
        "OriginalQuery": "Pandas: create new column in df with random integers from range",
        "Source": "Stack Overflow"
    },
    "760": {
        "APIs": [
            "dict.values()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "List comprehension, check if item is unique",
        "Source": "Stack Overflow"
    },
    "761": {
        "APIs": [
            "datetime.datetime.strftime()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "In my date time value I want to use regex to strip out the slash and colon from time and replace it with underscore",
        "Source": "Stack Overflow"
    },
    "762": {
        "APIs": [
            "str.isdigit()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Getting an average from a text file",
        "Source": "Stack Overflow"
    },
    "763": {
        "APIs": [
            "str.index()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How do I get the length of the first line in a multi line string?",
        "Source": "Stack Overflow"
    },
    "764": {
        "OriginalQuery": "Sending an image in python without saving it",
        "Source": "Stack Overflow"
    },
    "765": {
        "APIs": [
            "pickle.dumps()"
        ],
        "APIClasses": [
            "pickle"
        ],
        "OriginalQuery": "How to pickle and unpickle to portable string in Python 3",
        "Source": "Stack Overflow"
    },
    "766": {
        "APIs": [
            "pandas.concat()"
        ],
        "APIClasses": [
            "pandas"
        ],
        "OriginalQuery": "pandas: Convert Series of DataFrames to single DataFrame",
        "Source": "Stack Overflow"
    },
    "767": {
        "OriginalQuery": "Adding a column to the end of a column within the same DataFrame",
        "Source": "Stack Overflow"
    },
    "768": {
        "OriginalQuery": "How to convert list to float in Python",
        "Source": "Stack Overflow"
    },
    "769": {
        "APIs": [
            "chr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Converting to ASCII with numbers above 128",
        "Source": "Stack Overflow"
    },
    "770": {
        "APIs": [
            "re.findall()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Extract all words that match from a string with regex",
        "Source": "Stack Overflow"
    },
    "771": {
        "OriginalQuery": "How to run flask socket.io on localhost (xampp)",
        "Source": "Stack Overflow"
    },
    "772": {
        "APIs": [
            "os.path.relpath()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "How to find the relative path between two directories?",
        "Source": "Stack Overflow"
    },
    "773": {
        "APIs": [
            "socket.setsockopt()"
        ],
        "APIClasses": [
            "socket"
        ],
        "OriginalQuery": "How to set Send Buffer Size for sockets in python",
        "Source": "Stack Overflow"
    },
    "774": {
        "APIs": [
            "dict.get()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Python getattr equivalent for dictionaries?",
        "Source": "Stack Overflow"
    },
    "775": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Find the greatest number in a list of numbers",
        "Source": "Stack Overflow"
    },
    "776": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Conditional zip of two lists",
        "Source": "Stack Overflow"
    },
    "777": {
        "OriginalQuery": "Return a parent tag attribute from selected child",
        "Source": "Stack Overflow"
    },
    "778": {
        "OriginalQuery": "Divide each python dictionary value by total value",
        "Source": "Stack Overflow"
    },
    "779": {
        "OriginalQuery": "Python Pandas: How I can unique my table only based on certain columns?",
        "Source": "Stack Overflow"
    },
    "780": {
        "OriginalQuery": "How can I read the dynamic section of an ELF file in python",
        "Source": "Stack Overflow"
    },
    "781": {
        "APIs": [
            "os.makedirs()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Python check if a directory exists, then create it if necessary and save graph to new directory?",
        "Source": "Stack Overflow"
    },
    "782": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to remove rows where all numerical columns contain zero in Pandas Dataframe with mixed type of columns?",
        "Source": "Stack Overflow"
    },
    "783": {
        "OriginalQuery": "Call PyObject_CallObject with more than one function argument",
        "Source": "Stack Overflow"
    },
    "784": {
        "OriginalQuery": "Flask: How to prevent to go to login page when already logged in?",
        "Source": "Stack Overflow"
    },
    "785": {
        "OriginalQuery": "How to create a reusable basemap",
        "Source": "Stack Overflow"
    },
    "786": {
        "APIs": [
            "msilib.Database.Commit()"
        ],
        "APIClasses": [
            "msilib.Database"
        ],
        "OriginalQuery": "How to insert values in mysql from loop in Python",
        "Source": "Stack Overflow"
    },
    "787": {
        "APIs": [
            "django.views.generic.base.TemplateResponseMixin.get_template_names()"
        ],
        "APIClasses": [
            "django.views.generic.base.TemplateResponseMixin"
        ],
        "OriginalQuery": "Django 1.8 check if template exists in view",
        "Source": "Stack Overflow"
    },
    "788": {
        "OriginalQuery": "Sort list by attribute of list",
        "Source": "Stack Overflow"
    },
    "789": {
        "OriginalQuery": "Make primary-key fields editable in Flask-Admin",
        "Source": "Stack Overflow"
    },
    "790": {
        "OriginalQuery": "How to get pandas to print out data and not the memory address?",
        "Source": "Stack Overflow"
    },
    "791": {
        "APIs": [
            "io.open()"
        ],
        "APIClasses": [
            "io"
        ],
        "OriginalQuery": "Reliable way of handling non-ASCII characters in Python?",
        "Source": "Stack Overflow"
    },
    "792": {
        "APIs": [
            "os.path.abspath()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "Package data with relative path",
        "Source": "Stack Overflow"
    },
    "793": {
        "APIs": [
            "os.rename()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Rename file on remote server on Python",
        "Source": "Stack Overflow"
    },
    "794": {
        "APIs": [
            "locals()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Passing all arguments of a function to another function",
        "Source": "Stack Overflow"
    },
    "795": {
        "APIs": [
            "sqlite3.Cursor.fetchall()"
        ],
        "APIClasses": [
            "sqlite3.Cursor"
        ],
        "OriginalQuery": "How to get Field names from a SQL database into a list in python",
        "Source": "Stack Overflow"
    },
    "796": {
        "APIs": [
            "open()"
        ],
        "APIClasses": [],
        "OriginalQuery": "read and write on same csv file",
        "Source": "Stack Overflow"
    },
    "797": {
        "APIs": [
            "str.join()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Automagically expanding a Python list with formatted output",
        "Source": "Stack Overflow"
    },
    "798": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "separate unicode by commas in list",
        "Source": "Stack Overflow"
    },
    "799": {
        "APIs": [
            "dict.items()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Swap dictionary keys and values when values are lists",
        "Source": "Stack Overflow"
    },
    "800": {
        "APIs": [
            "time.gmtime()"
        ],
        "APIClasses": [
            "time"
        ],
        "OriginalQuery": "Getting computer's UTC offset in Python",
        "Source": "Stack Overflow"
    },
    "801": {
        "APIs": [
            "logging.basicConfig()"
        ],
        "APIClasses": [
            "logging"
        ],
        "OriginalQuery": "Prevent cherrypy from logging access",
        "Source": "Stack Overflow"
    },
    "802": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to get peewee result length",
        "Source": "Stack Overflow"
    },
    "803": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python equivalent of Haskell's [1..] (to index a list)",
        "Source": "Stack Overflow"
    },
    "804": {
        "APIs": [
            "numpy.array()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Numpy array being rounded? subtraction of small floats",
        "Source": "Stack Overflow"
    },
    "805": {
        "OriginalQuery": "How do I close an image opened in Pillow?",
        "Source": "Stack Overflow"
    },
    "806": {
        "APIs": [
            "pandas.DataFrame.reset_index()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Reassigning index in pandas DataFrame",
        "Source": "Stack Overflow"
    },
    "807": {
        "APIs": [
            "sqlite3.Cursor.execute()"
        ],
        "APIClasses": [
            "sqlite3.Cursor"
        ],
        "OriginalQuery": "Searching a mysql query from python",
        "Source": "Stack Overflow"
    },
    "808": {
        "APIs": [
            "pandas.DataFrame.shift()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Keep only the first row of consecutive duplicate rows in a DataFrame",
        "Source": "Stack Overflow"
    },
    "809": {
        "OriginalQuery": "A better way to get only specific attributes from a Django queryset?",
        "Source": "Stack Overflow"
    },
    "810": {
        "APIs": [
            "pandas.DataFrame.apply()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Python & Pandas: How to do conditional calculation",
        "Source": "Stack Overflow"
    },
    "811": {
        "OriginalQuery": "How to do a general \"search bar\" search across multiple SQLAlchemy models",
        "Source": "Stack Overflow"
    },
    "812": {
        "APIs": [
            "re.escape()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Check if string (or split string) contains any words from list",
        "Source": "Stack Overflow"
    },
    "813": {
        "APIs": [
            "str.rfind()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "find last occurence of multiple characters in a string in Python",
        "Source": "Stack Overflow"
    },
    "814": {
        "APIs": [
            "os.path.join()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "Navigate directories in Python without changing the current directory?",
        "Source": "Stack Overflow"
    },
    "815": {
        "APIs": [
            "datetime.date.today()"
        ],
        "APIClasses": [
            "datetime.date"
        ],
        "OriginalQuery": "How to assign current date to a date field in odoo v8?",
        "Source": "Stack Overflow"
    },
    "816": {
        "APIs": [
            "datetime.date.strftime()"
        ],
        "APIClasses": [
            "datetime.date"
        ],
        "OriginalQuery": "python datetime swapping day month",
        "Source": "Stack Overflow"
    },
    "817": {
        "APIs": [
            "sys.exit()"
        ],
        "APIClasses": [
            "sys"
        ],
        "OriginalQuery": "In Python, how can a function of a script be called from within a module that is imported by that script?",
        "Source": "Stack Overflow"
    },
    "818": {
        "APIs": [
            "random.shuffle()"
        ],
        "APIClasses": [
            "random"
        ],
        "OriginalQuery": "Python: How to find scrambled words in a wordlist",
        "Source": "Stack Overflow"
    },
    "819": {
        "APIs": [
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Get the index of the exact match from a list",
        "Source": "Stack Overflow"
    },
    "820": {
        "OriginalQuery": "Getting the current date (and time) in Django",
        "Source": "Stack Overflow"
    },
    "821": {
        "APIs": [
            "dict.keys()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Pythonic way to check if two dictionaries have the identical set of keys?",
        "Source": "Stack Overflow"
    },
    "822": {
        "APIs": [
            "repr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "xlrd read number as string",
        "Source": "Stack Overflow"
    },
    "823": {
        "APIs": [
            "str.strip()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How to use a Item loader in my Scrapy spider code?",
        "Source": "Stack Overflow"
    },
    "824": {
        "APIs": [
            "re.search()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "How to match double quote in python regex?",
        "Source": "Stack Overflow"
    },
    "825": {
        "APIs": [
            "str.count()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python: Count instances of a specific character in all rows within a dataframe column",
        "Source": "Stack Overflow"
    },
    "826": {
        "APIs": [
            "os.system()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "run linux cat command in python or bash loop",
        "Source": "Stack Overflow"
    },
    "827": {
        "APIs": [
            "str.format()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Reformatting a list of date strings to day, month, year in Python",
        "Source": "Stack Overflow"
    },
    "828": {
        "OriginalQuery": "Finding the index of an element in a list. Binary search or use the index function?",
        "Source": "Stack Overflow"
    },
    "829": {
        "APIs": [
            "os.chdir()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Passing list elements to a for loop",
        "Source": "Stack Overflow"
    },
    "830": {
        "APIs": [
            "xml.etree.ElementTree.ElementTree.getroot()"
        ],
        "APIClasses": [
            "xml.etree.ElementTree.ElementTree"
        ],
        "OriginalQuery": "Adding attributes to existing elements, removing elements, etc with lxml",
        "Source": "Stack Overflow"
    },
    "831": {
        "APIs": [
            "argparse.ArgumentParser.parse_known_args()"
        ],
        "APIClasses": [
            "argparse.ArgumentParser"
        ],
        "OriginalQuery": "How to call parse_args() twice on the same set of arguments in Python's argparse?",
        "Source": "Stack Overflow"
    },
    "832": {
        "OriginalQuery": "How to use variables for slicing Python lists?",
        "Source": "Stack Overflow"
    },
    "833": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Finding average length of strings in a list",
        "Source": "Stack Overflow"
    },
    "834": {
        "APIs": [
            "getattr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Pythonic syntax for appending an arbitrary class object list property",
        "Source": "Stack Overflow"
    },
    "835": {
        "OriginalQuery": "Python print scraped data with beautifulsoup without tags",
        "Source": "Stack Overflow"
    },
    "836": {
        "APIs": [
            "title()"
        ],
        "APIClasses": [],
        "OriginalQuery": "tkinter - retrieve file name during askopenfile",
        "Source": "Stack Overflow"
    },
    "837": {
        "OriginalQuery": "Python - How to send data from a certain point (resume download)",
        "Source": "Stack Overflow"
    },
    "838": {
        "APIs": [
            "io.IOBase.seek()"
        ],
        "APIClasses": [
            "io.IOBase"
        ],
        "OriginalQuery": "How to reload a file in python?",
        "Source": "Stack Overflow"
    },
    "839": {
        "APIs": [
            "getattr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python string to attribute",
        "Source": "Stack Overflow"
    },
    "840": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How to create a dictionary that contains key\u2010value pairs from a text file",
        "Source": "Stack Overflow"
    },
    "841": {
        "OriginalQuery": "`re` module match text between two pairs of brackets in Python3",
        "Source": "Stack Overflow"
    },
    "842": {
        "APIs": [
            "str.join()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Replace keys in a dictionary",
        "Source": "Stack Overflow"
    },
    "843": {
        "APIs": [
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Check if list contains a type?",
        "Source": "Stack Overflow"
    },
    "844": {
        "OriginalQuery": "Fast hamming distance computation between binary numpy arrays",
        "Source": "Stack Overflow"
    },
    "845": {
        "OriginalQuery": "Python:writing files in a folder to zipfile and compressing it",
        "Source": "Stack Overflow"
    },
    "846": {
        "APIs": [
            "numpy.save()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Write & read ndarray",
        "Source": "Stack Overflow"
    },
    "847": {
        "APIs": [
            "datetime.datetime.today()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "How can I compare a date and a datetime in Python?",
        "Source": "Stack Overflow"
    },
    "848": {
        "APIs": [
            "functools.reduce()"
        ],
        "APIClasses": [
            "functools"
        ],
        "OriginalQuery": "Python Chain getattr as a string",
        "Source": "Stack Overflow"
    },
    "849": {
        "APIs": [
            "min()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Get the key corresponding to the minimum value within a dictionary",
        "Source": "Stack Overflow"
    },
    "850": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python: How do you sort the contents of a .txt file in numerical order?",
        "Source": "Stack Overflow"
    },
    "851": {
        "APIs": [
            "math.sqrt()"
        ],
        "APIClasses": [
            "math"
        ],
        "OriginalQuery": "Integer factorization in python",
        "Source": "Stack Overflow"
    },
    "852": {
        "APIs": [
            "io.IOBase.readlines()"
        ],
        "APIClasses": [
            "io.IOBase"
        ],
        "OriginalQuery": "Reading from a plain text file",
        "Source": "Stack Overflow"
    },
    "853": {
        "OriginalQuery": "Converting a list to string in python 2.7",
        "Source": "Stack Overflow"
    },
    "854": {
        "APIs": [
            "subprocess.check_call()"
        ],
        "APIClasses": [
            "subprocess"
        ],
        "OriginalQuery": "Ouputting the results of os.popen()",
        "Source": "Stack Overflow"
    },
    "855": {
        "APIs": [
            "re.match()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "python regex, check last two characters of variable",
        "Source": "Stack Overflow"
    },
    "856": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python: how to unpack more than one value in a for?",
        "Source": "Stack Overflow"
    },
    "857": {
        "APIs": [
            "myProcess.kill"
        ],
        "APIClasses": [
            "myProcess"
        ],
        "OriginalQuery": "How to stop a python subprocess which is running unit tests right away? Terminate and kill not working",
        "Source": "Stack Overflow"
    },
    "858": {
        "APIs": [
            "re.search()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Match .htm or .html extensions with python RE",
        "Source": "Stack Overflow"
    },
    "859": {
        "APIs": [
            "gui.Container()"
        ],
        "APIClasses": [
            "gui"
        ],
        "OriginalQuery": "Making popup windows in pygame with pgu",
        "Source": "Stack Overflow"
    },
    "860": {
        "APIs": [
            "sqlite3.Cursor.execute()"
        ],
        "APIClasses": [
            "sqlite3.Cursor"
        ],
        "OriginalQuery": "pysqlite - how to save images",
        "Source": "Stack Overflow"
    },
    "861": {
        "APIs": [
            "os.setsid()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Run program in another process and receive pid in Python",
        "Source": "Stack Overflow"
    },
    "862": {
        "APIs": [
            "pow()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Implementing RSA in python",
        "Source": "Stack Overflow"
    },
    "863": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "how do i sort data from a csv file numerically in python",
        "Source": "Stack Overflow"
    },
    "864": {
        "APIs": [
            "socket.socket.sendall()"
        ],
        "APIClasses": [
            "socket.socket"
        ],
        "OriginalQuery": "send a PNG file with TCP connection",
        "Source": "Stack Overflow"
    },
    "865": {
        "APIs": [
            "json.loads()"
        ],
        "APIClasses": [
            "json"
        ],
        "OriginalQuery": "Try to read a json file with python",
        "Source": "Stack Overflow"
    },
    "866": {
        "APIs": [
            "numpy.hstack()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "numpy - resize array filling with 0",
        "Source": "Stack Overflow"
    },
    "867": {
        "OriginalQuery": "Remove tables from html files in python",
        "Source": "Stack Overflow"
    },
    "868": {
        "OriginalQuery": "Sort list of dictionaries with natsort to obtain natural sort order",
        "Source": "Stack Overflow"
    },
    "869": {
        "APIs": [
            "str.replace()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "pandas: write df to text file - indent df to right by 5 white spaces",
        "Source": "Stack Overflow"
    },
    "870": {
        "OriginalQuery": "calculate of mean for columns of text file in python",
        "Source": "Stack Overflow"
    },
    "871": {
        "APIs": [
            "os.system()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Python read a txt file into a list of lists of numbers",
        "Source": "Stack Overflow"
    },
    "872": {
        "APIs": [
            "locals()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python - How to call an instance from a given string?",
        "Source": "Stack Overflow"
    },
    "873": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Use Python pandas to check if coloumns contain identical values or NaN",
        "Source": "Stack Overflow"
    },
    "874": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Fast way to convert strings into lists of ints in a Pandas column?",
        "Source": "Stack Overflow"
    },
    "875": {
        "APIs": [
            "input()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Getting user input",
        "Source": "Stack Overflow"
    },
    "876": {
        "APIs": [
            "dict.update()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "using python3 and django, how do I push into JSON DICT object",
        "Source": "Stack Overflow"
    },
    "877": {
        "OriginalQuery": "How to make tkinter repond events while waiting socket data?",
        "Source": "Stack Overflow"
    },
    "878": {
        "APIs": [
            "str.join()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Print Variable/Dynamic List of String",
        "Source": "Stack Overflow"
    },
    "879": {
        "APIs": [
            "random.shuffle()"
        ],
        "APIClasses": [
            "random"
        ],
        "OriginalQuery": "How to randomly partition a list into n nearly equal parts?",
        "Source": "Stack Overflow"
    },
    "880": {
        "APIs": [
            "subprocess.Popen.poll()"
        ],
        "APIClasses": [
            "subprocess.Popen"
        ],
        "OriginalQuery": "Python Script Calling Make and Other Utilities",
        "Source": "Stack Overflow"
    },
    "881": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Creating a magic square",
        "Source": "Stack Overflow"
    },
    "882": {
        "APIs": [
            "min()"
        ],
        "APIClasses": [],
        "OriginalQuery": "timeit module - get fastest and slowest loop",
        "Source": "Stack Overflow"
    },
    "883": {
        "OriginalQuery": "How do I get the current value of a Variable?",
        "Source": "Stack Overflow"
    },
    "884": {
        "APIs": [
            "sqlite3.Cursor.execute()"
        ],
        "APIClasses": [
            "sqlite3.Cursor"
        ],
        "OriginalQuery": "How to update a column in PostgreSQL with a string (converted from dictionary)?",
        "Source": "Stack Overflow"
    },
    "885": {
        "APIs": [
            "DataFrame.groupby()"
        ],
        "APIClasses": [
            "DataFrame"
        ],
        "OriginalQuery": "Performing multiple calculations on a Python Pandas group from CSV data",
        "Source": "Stack Overflow"
    },
    "886": {
        "APIs": [
            "ord()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to remove '\\x' from a hex string in Python?",
        "Source": "Stack Overflow"
    },
    "887": {
        "APIs": [
            "logging.basicConfig()"
        ],
        "APIClasses": [
            "logging"
        ],
        "OriginalQuery": "python logging only to file",
        "Source": "Stack Overflow"
    },
    "888": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "check type of classifier object in python cv2?",
        "Source": "Stack Overflow"
    },
    "889": {
        "APIs": [
            "str.startswith()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Check if text starts with blank space",
        "Source": "Stack Overflow"
    },
    "890": {
        "APIs": [
            "_thread.interrupt_main()"
        ],
        "APIClasses": [
            "_thread"
        ],
        "OriginalQuery": "how do I halt execution in a python script?",
        "Source": "Stack Overflow"
    },
    "891": {
        "OriginalQuery": "Parse html element with lxml / xpath",
        "Source": "Stack Overflow"
    },
    "892": {
        "APIs": [
            "array.array.append()"
        ],
        "APIClasses": [
            "array.array"
        ],
        "OriginalQuery": "Python - How can I return a list for each xml node I am iterating through using xml.etree.ElementTree?",
        "Source": "Stack Overflow"
    },
    "893": {
        "APIs": [
            "os.wait()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Playing audio data with sounddevice- Python",
        "Source": "Stack Overflow"
    },
    "894": {
        "APIs": [
            "str.isalpha()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Check if all characters of a string are uppercase",
        "Source": "Stack Overflow"
    },
    "895": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Sort list by a given custom order",
        "Source": "Stack Overflow"
    },
    "896": {
        "APIs": [
            "argparse.ArgumentParser.parse_args()"
        ],
        "APIClasses": [
            "argparse.ArgumentParser"
        ],
        "OriginalQuery": "Disable unique prefix matches for argparse and optparse",
        "Source": "Stack Overflow"
    },
    "897": {
        "APIs": [
            "socket.socket.send()"
        ],
        "APIClasses": [
            "socket.socket"
        ],
        "OriginalQuery": "Socket module, how to send integer",
        "Source": "Stack Overflow"
    },
    "898": {
        "APIs": [
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "python: how do i always start from the second row in csv?",
        "Source": "Stack Overflow"
    },
    "899": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to count non-null elements in an iterable?",
        "Source": "Stack Overflow"
    },
    "900": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "how to sort list according certain criterion",
        "Source": "Stack Overflow"
    },
    "901": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How can I get the object count for a model in Django's templates?",
        "Source": "Stack Overflow"
    },
    "902": {
        "APIs": [
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Return the first element or None from filter",
        "Source": "Stack Overflow"
    },
    "903": {
        "APIs": [
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Check if list is either empty or only containing zeroes",
        "Source": "Stack Overflow"
    },
    "904": {
        "APIs": [
            "format()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Rounding scientific notation in python",
        "Source": "Stack Overflow"
    },
    "905": {
        "APIs": [
            "base64.b64encode()"
        ],
        "APIClasses": [
            "base64"
        ],
        "OriginalQuery": "How to store cipher text in Django Models",
        "Source": "Stack Overflow"
    },
    "906": {
        "APIs": [
            "gc.get_objects()"
        ],
        "APIClasses": [
            "gc"
        ],
        "OriginalQuery": "Check if an object id exists in Python",
        "Source": "Stack Overflow"
    },
    "907": {
        "APIs": [
            "numpy.random.choice()"
        ],
        "APIClasses": [
            "numpy.random"
        ],
        "OriginalQuery": "Is there a Python equivalent to R's sample() function?",
        "Source": "Stack Overflow"
    },
    "908": {
        "APIs": [
            "inspect.stack()"
        ],
        "APIClasses": [
            "inspect"
        ],
        "OriginalQuery": "How do I get the current depth of the Python interpreter stack?",
        "Source": "Stack Overflow"
    },
    "909": {
        "APIs": [
            "xml.etree.ElementTree.Element.findall()"
        ],
        "APIClasses": [
            "xml.etree.ElementTree.Element"
        ],
        "OriginalQuery": "BeautifulSoup get value from class",
        "Source": "Stack Overflow"
    },
    "910": {
        "APIs": [
            "json.loads()"
        ],
        "APIClasses": [
            "json"
        ],
        "OriginalQuery": "Converting JSON string into Python dictionary",
        "Source": "Stack Overflow"
    },
    "911": {
        "OriginalQuery": "Remove duplicates from a string so that it appears once",
        "Source": "Stack Overflow"
    },
    "912": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "django - filter after slice / filter on queryset where results have been limited",
        "Source": "Stack Overflow"
    },
    "913": {
        "APIs": [
            "os.path.basename()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "Adding file to existing zipfile",
        "Source": "Stack Overflow"
    },
    "914": {
        "APIs": [
            "sqlite3.Cursor.execute()"
        ],
        "APIClasses": [
            "sqlite3.Cursor"
        ],
        "OriginalQuery": "How do I import a MySQL database in a Python script?",
        "Source": "Stack Overflow"
    },
    "915": {
        "APIs": [
            "subprocess.check_output()"
        ],
        "APIClasses": [
            "subprocess"
        ],
        "OriginalQuery": "python - execute command and get output",
        "Source": "Stack Overflow"
    },
    "916": {
        "APIs": [
            "xpaht()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Control search depth findall Lxml",
        "Source": "Stack Overflow"
    },
    "917": {
        "APIs": [
            "str.replace()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How to remove curly quotes?",
        "Source": "Stack Overflow"
    },
    "918": {
        "OriginalQuery": "How do you mix raw SQL with ORM APIs when you use django.db?",
        "Source": "Stack Overflow"
    },
    "919": {
        "APIs": [
            "str.decode()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Removing lxml control characters",
        "Source": "Stack Overflow"
    },
    "920": {
        "APIs": [
            "shutil.copy()"
        ],
        "APIClasses": [
            "shutil"
        ],
        "OriginalQuery": "Copying and renaming excel files with Python",
        "Source": "Stack Overflow"
    },
    "921": {
        "OriginalQuery": "Fastest way to get average value of frequencies within range",
        "Source": "Stack Overflow"
    },
    "922": {
        "APIs": [
            "curses.window.getstr()"
        ],
        "APIClasses": [
            "curses.window"
        ],
        "OriginalQuery": "Limit raw_input length",
        "Source": "Stack Overflow"
    },
    "923": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Select Specific Columns only form a dataframe in Python",
        "Source": "Stack Overflow"
    },
    "924": {
        "APIs": [
            "str.count()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Fastest Text search method in a large text file",
        "Source": "Stack Overflow"
    },
    "925": {
        "APIs": [
            "ctypes.POINTER()"
        ],
        "APIClasses": [
            "ctypes"
        ],
        "OriginalQuery": "How to convert a Python 'bytes' object to ctypes 'POINTER(c_byte)'",
        "Source": "Stack Overflow"
    },
    "926": {
        "APIs": [
            "datetime.datetime.strptime()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "Python string of numbers to date",
        "Source": "Stack Overflow"
    },
    "927": {
        "OriginalQuery": "Trying to use BeautifulSoup to find a specific table in an HTML doc",
        "Source": "Stack Overflow"
    },
    "928": {
        "APIs": [
            "pandas.read_csv()"
        ],
        "APIClasses": [
            "pandas"
        ],
        "OriginalQuery": "How to concatenate pandas.DataFrames columns",
        "Source": "Stack Overflow"
    },
    "929": {
        "APIs": [
            "tensorflow.reduce_sum()"
        ],
        "APIClasses": [
            "tensorflow"
        ],
        "OriginalQuery": "Count number of \"True\" values in boolean Tensor",
        "Source": "Stack Overflow"
    },
    "930": {
        "APIs": [
            "os.read()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Read file object as string in python",
        "Source": "Stack Overflow"
    },
    "931": {
        "OriginalQuery": "Python - How to move output text to the left / up?",
        "Source": "Stack Overflow"
    },
    "932": {
        "APIs": [
            "Mm.n.d()"
        ],
        "APIClasses": [
            "Mm.n"
        ],
        "OriginalQuery": "How to get numpy array of RGB colors from pygame.surface",
        "Source": "Stack Overflow"
    },
    "933": {
        "APIs": [
            "pandas.DataFrame.copy()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Extracting specific selected columns to new DataFrame as a copy",
        "Source": "Stack Overflow"
    },
    "934": {
        "APIs": [
            "pandas.DataFrame.fillna()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Replace np.nan in dataframe with minimum from other series",
        "Source": "Stack Overflow"
    },
    "935": {
        "APIs": [
            "logging.getLogger()"
        ],
        "APIClasses": [
            "logging"
        ],
        "OriginalQuery": "Send email with Python logging",
        "Source": "Stack Overflow"
    },
    "936": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Split a string by a delimiter in python",
        "Source": "Stack Overflow"
    },
    "937": {
        "APIs": [
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Selecting Rows in Dataframe that have any column equal to any item in a list",
        "Source": "Stack Overflow"
    },
    "938": {
        "OriginalQuery": "Iterate individual elements in python sets",
        "Source": "Stack Overflow"
    },
    "939": {
        "OriginalQuery": "Interchange location of y and z axis in 3D matplotlib plot",
        "Source": "Stack Overflow"
    },
    "940": {
        "APIs": [
            "seek()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to extract a given frame from a .gif animation in Python",
        "Source": "Stack Overflow"
    },
    "941": {
        "OriginalQuery": "How to set variable in Tkinter in checkbox in newly created window",
        "Source": "Stack Overflow"
    },
    "942": {
        "OriginalQuery": "How to select all data in PyMongo?",
        "Source": "Stack Overflow"
    },
    "943": {
        "APIs": [
            "min()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python - Setting a limit on a variable",
        "Source": "Stack Overflow"
    },
    "944": {
        "APIs": [
            "input()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to give jupyter cell standard input in python?",
        "Source": "Stack Overflow"
    },
    "945": {
        "OriginalQuery": "reset_index() to original column indices after pandas groupby()?",
        "Source": "Stack Overflow"
    },
    "946": {
        "APIs": [
            "str.strip()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Compare the number of significant digits in two numbers",
        "Source": "Stack Overflow"
    },
    "947": {
        "APIs": [
            "pandas.DataFrame.reset_index()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Python pandas - writing groupby output to file",
        "Source": "Stack Overflow"
    },
    "948": {
        "OriginalQuery": "POST list to django restapi",
        "Source": "Stack Overflow"
    },
    "949": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Linear regression line on facet grid with logarithmic Y axis",
        "Source": "Stack Overflow"
    },
    "950": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Delete rest of string after n-th occurence",
        "Source": "Stack Overflow"
    },
    "951": {
        "APIs": [
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python: how to get the first file in directory?",
        "Source": "Stack Overflow"
    },
    "952": {
        "OriginalQuery": "How do I find common items from Python dictionary values?",
        "Source": "Stack Overflow"
    },
    "953": {
        "APIs": [
            "http.cookiejar.FileCookieJar.save()"
        ],
        "APIClasses": [
            "http.cookiejar.FileCookieJar"
        ],
        "OriginalQuery": "Django: Assign current user as foreign key to comments model",
        "Source": "Stack Overflow"
    },
    "954": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Determine cost of items in one dictionary based on prices in another",
        "Source": "Stack Overflow"
    },
    "955": {
        "OriginalQuery": "How to run setup in each pytest-xdist process",
        "Source": "Stack Overflow"
    },
    "956": {
        "OriginalQuery": "Calculating CRC16 in Python",
        "Source": "Stack Overflow"
    },
    "957": {
        "APIs": [
            "json.load()"
        ],
        "APIClasses": [
            "json"
        ],
        "OriginalQuery": "log file to json file conversion",
        "Source": "Stack Overflow"
    },
    "958": {
        "APIs": [
            "xxx.__version__"
        ],
        "APIClasses": [
            "xxx"
        ],
        "OriginalQuery": "How do I get a python module's version number through code?",
        "Source": "Stack Overflow"
    },
    "959": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to check if all values of a dictionary are 0",
        "Source": "Stack Overflow"
    },
    "960": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "get count of values associated with key in dict python",
        "Source": "Stack Overflow"
    },
    "961": {
        "APIs": [
            "operator.__getitem__()"
        ],
        "APIClasses": [
            "operator"
        ],
        "OriginalQuery": "Get a value in a numpy array from a index in a variable",
        "Source": "Stack Overflow"
    },
    "962": {
        "APIs": [
            "operator.contains()"
        ],
        "APIClasses": [
            "operator"
        ],
        "OriginalQuery": "How to find elements with two possible class names by XPath?",
        "Source": "Stack Overflow"
    },
    "963": {
        "APIs": [
            "str.splitlines()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How to convert string into a dict escaping special characters in python",
        "Source": "Stack Overflow"
    },
    "964": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Delete array from list of arrays Python",
        "Source": "Stack Overflow"
    },
    "965": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "In Python, how to sum nested lists: [[1,0], [1,1], [1,0]] \u2192 [3,1]",
        "Source": "Stack Overflow"
    },
    "966": {
        "APIs": [
            "open()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Serve static files through a view in Django",
        "Source": "Stack Overflow"
    },
    "967": {
        "APIs": [
            "dict.items()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Printing kwargs in Python 3",
        "Source": "Stack Overflow"
    },
    "968": {
        "OriginalQuery": "How can I get a url from Chrome by Python?",
        "Source": "Stack Overflow"
    },
    "969": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python - How to place a whole numpy array in Queue.Queue all at once but retrieve each row separately",
        "Source": "Stack Overflow"
    },
    "970": {
        "APIs": [
            "repr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python remove &#xD from XML",
        "Source": "Stack Overflow"
    },
    "971": {
        "APIs": [
            "open()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python: Read hex from file into list?",
        "Source": "Stack Overflow"
    },
    "972": {
        "APIs": [
            "logging.getLogger()"
        ],
        "APIClasses": [
            "logging"
        ],
        "OriginalQuery": "How do you add a handler to a Python Logger object globally?",
        "Source": "Stack Overflow"
    },
    "973": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Sorting dictionary descending in Python",
        "Source": "Stack Overflow"
    },
    "974": {
        "APIs": [
            "socketserver.BaseRequestHandler.handle()"
        ],
        "APIClasses": [
            "socketserver.BaseRequestHandler"
        ],
        "OriginalQuery": "Accepting multiple clients in python socket server",
        "Source": "Stack Overflow"
    },
    "975": {
        "APIs": [
            "subprocess.Popen.communicate()"
        ],
        "APIClasses": [
            "subprocess.Popen"
        ],
        "OriginalQuery": "Python: How to be notified when the subprocess is ended opened by Popen",
        "Source": "Stack Overflow"
    },
    "976": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Check if string contains more than one element from array in Python",
        "Source": "Stack Overflow"
    },
    "977": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Sorting list based on the values of dictionary",
        "Source": "Stack Overflow"
    },
    "978": {
        "APIs": [
            "statistics.mean()"
        ],
        "APIClasses": [
            "statistics"
        ],
        "OriginalQuery": "How to calculate the mean of last five rows in Python pandas",
        "Source": "Stack Overflow"
    },
    "979": {
        "OriginalQuery": "Parse large JSON files (Python)",
        "Source": "Stack Overflow"
    },
    "980": {
        "APIs": [
            "gtk.gdk.screen_width()"
        ],
        "APIClasses": [
            "gtk.gdk"
        ],
        "OriginalQuery": "Getting Monitor resolution in Python on Ubuntu",
        "Source": "Stack Overflow"
    },
    "981": {
        "OriginalQuery": "How to delete columns in xlwings?",
        "Source": "Stack Overflow"
    },
    "982": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Turning a list into a set - Python",
        "Source": "Stack Overflow"
    },
    "983": {
        "APIs": [
            "django.db.models.query.QuerySet.bulk_create()"
        ],
        "APIClasses": [
            "django.db.models.query.QuerySet"
        ],
        "OriginalQuery": "Django one-to-one field reverse update",
        "Source": "Stack Overflow"
    },
    "984": {
        "APIs": [
            "str.replace()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Manually setting time zone in Django form",
        "Source": "Stack Overflow"
    },
    "985": {
        "APIs": [
            "curses.window.instr()"
        ],
        "APIClasses": [
            "curses.window"
        ],
        "OriginalQuery": "Get string from window in curses",
        "Source": "Stack Overflow"
    },
    "986": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python: How to sort the letters in a string alphabetically keeping distinction between uppercases and lowercases",
        "Source": "Stack Overflow"
    },
    "987": {
        "APIs": [
            "subprocess.call()"
        ],
        "APIClasses": [
            "subprocess"
        ],
        "OriginalQuery": "Converting a pdf to text/html in python so I can parse it",
        "Source": "Stack Overflow"
    },
    "988": {
        "OriginalQuery": "Python: how to add a column to a pandas dataframe between two columns?",
        "Source": "Stack Overflow"
    },
    "989": {
        "OriginalQuery": "Tkinter: how to clear Entry Widget and copy multiple notes to a CSV file",
        "Source": "Stack Overflow"
    },
    "990": {
        "APIs": [
            "dict.items()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Adding labels to Key Value Pairs in JSON",
        "Source": "Stack Overflow"
    },
    "991": {
        "APIs": [
            "datetime.date.strftime()"
        ],
        "APIClasses": [
            "datetime.date"
        ],
        "OriginalQuery": "Print out datetime as DD-MM-YYYY",
        "Source": "Stack Overflow"
    },
    "992": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Count spaces in text (treat consecutive spaces as one)",
        "Source": "Stack Overflow"
    },
    "993": {
        "APIs": [
            "os.path.exists()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "use fabric on localhost",
        "Source": "Stack Overflow"
    },
    "994": {
        "APIs": [
            "pygame.display.get_surface()"
        ],
        "APIClasses": [
            "pygame.display"
        ],
        "OriginalQuery": "How do I get the size (width x height) of my pygame window",
        "Source": "Stack Overflow"
    },
    "995": {
        "APIs": [
            "DataFrame.merge()"
        ],
        "APIClasses": [
            "DataFrame"
        ],
        "OriginalQuery": "How to merge xArray datasets with conflicting coordinates",
        "Source": "Stack Overflow"
    },
    "996": {
        "OriginalQuery": "PIL/Pillow convert Image to list and back again",
        "Source": "Stack Overflow"
    },
    "997": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Combine two loop into one",
        "Source": "Stack Overflow"
    },
    "998": {
        "APIs": [
            "json.loads()"
        ],
        "APIClasses": [
            "json"
        ],
        "OriginalQuery": "Downloaded page posts from facebook. How do I handle the JSON data?",
        "Source": "Stack Overflow"
    },
    "999": {
        "OriginalQuery": "How to find binary data within ConstBitStream starting from a given offset?",
        "Source": "Stack Overflow"
    },
    "1000": {
        "APIs": [
            "sqlite3.Cursor.fetchone()"
        ],
        "APIClasses": [
            "sqlite3.Cursor"
        ],
        "OriginalQuery": "How to get rid of brackets when selecting data from SQL table (Python)?",
        "Source": "Stack Overflow"
    },
    "1001": {
        "APIs": [
            "unicodedata.decimal()"
        ],
        "APIClasses": [
            "unicodedata"
        ],
        "OriginalQuery": "How to create integer of a certain length with Sqlalchemy?",
        "Source": "Stack Overflow"
    },
    "1002": {
        "APIs": [
            "zipfile.ZipFile.infolist()"
        ],
        "APIClasses": [
            "zipfile.ZipFile"
        ],
        "OriginalQuery": "zipfile - python: how to get meta-data of files inside compressed folder",
        "Source": "Stack Overflow"
    },
    "1003": {
        "APIs": [
            "str.lower()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How to convert lists inside lists to lowercase?",
        "Source": "Stack Overflow"
    },
    "1004": {
        "APIs": [
            "str.isdigit()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How to strip string of all integers and spaces",
        "Source": "Stack Overflow"
    },
    "1005": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python max list in a dictionary",
        "Source": "Stack Overflow"
    },
    "1006": {
        "APIs": [
            "time.sleep()"
        ],
        "APIClasses": [
            "time"
        ],
        "OriginalQuery": "How to disable query cache?",
        "Source": "Stack Overflow"
    },
    "1007": {
        "APIs": [
            "re.match()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "How to remove empty lines with or without whitespace in Python",
        "Source": "Stack Overflow"
    },
    "1008": {
        "OriginalQuery": "Replacing characters in Scrapy item",
        "Source": "Stack Overflow"
    },
    "1009": {
        "APIs": [
            "numpy.array()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Getting a vector of dictionary values in an array, python",
        "Source": "Stack Overflow"
    },
    "1010": {
        "APIs": [
            "repr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python binary conversion to hex",
        "Source": "Stack Overflow"
    },
    "1011": {
        "OriginalQuery": "Determine whether a key is present in a dictionary",
        "Source": "Stack Overflow"
    },
    "1012": {
        "APIs": [
            "json.dumps()"
        ],
        "APIClasses": [
            "json"
        ],
        "OriginalQuery": "using Python, Flask and Ajax, how can I parse a response from an ajax call and print as HTML?",
        "Source": "Stack Overflow"
    },
    "1013": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Check if multiple variables have the same value",
        "Source": "Stack Overflow"
    },
    "1014": {
        "APIs": [
            "os.utime()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "touch a directory in python (Linux)",
        "Source": "Stack Overflow"
    },
    "1015": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Combine multiple columns into 1 column [python,pandas]",
        "Source": "Stack Overflow"
    },
    "1016": {
        "OriginalQuery": "How do I convert a datetime to date?",
        "Source": "Stack Overflow"
    },
    "1017": {
        "APIs": [
            "str.encode()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python / Mako : How to get unicode strings/characters parsed correctly?",
        "Source": "Stack Overflow"
    },
    "1018": {
        "APIs": [
            "shutil.copymode()"
        ],
        "APIClasses": [
            "shutil"
        ],
        "OriginalQuery": "How to copy directory permissions",
        "Source": "Stack Overflow"
    },
    "1019": {
        "APIs": [
            "os.path.dirname()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "How to correctly setup a path relative to running script also in tests?",
        "Source": "Stack Overflow"
    },
    "1020": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "how to extract from list python, element with index multiple of 2",
        "Source": "Stack Overflow"
    },
    "1021": {
        "APIs": [
            "pandas.DataFrame.apply()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "python/pandas: convert month int to month name",
        "Source": "Stack Overflow"
    },
    "1022": {
        "OriginalQuery": "Generate bigrams with NLTK",
        "Source": "Stack Overflow"
    },
    "1023": {
        "APIs": [
            "str.join()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Get command line arguments as string",
        "Source": "Stack Overflow"
    },
    "1024": {
        "APIs": [
            "matplotlib.pyplot.clf()"
        ],
        "APIClasses": [
            "matplotlib.pyplot"
        ],
        "OriginalQuery": "savefig loop adds previous plots to figure",
        "Source": "Stack Overflow"
    },
    "1025": {
        "APIs": [
            "time.sleep()"
        ],
        "APIClasses": [
            "time"
        ],
        "OriginalQuery": "How do I get my Python program to sleep for 50 milliseconds?",
        "Source": "Stack Overflow"
    },
    "1026": {
        "APIs": [
            "cloudstorage.open()"
        ],
        "APIClasses": [
            "cloudstorage"
        ],
        "OriginalQuery": "pickling python objects to google cloud storage",
        "Source": "Stack Overflow"
    },
    "1027": {
        "APIs": [
            "pandas.DataFrame.copy()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Creating new dataframe from existing - SettingWithCopyWarning",
        "Source": "Stack Overflow"
    },
    "1028": {
        "APIs": [
            "format()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Load multiple files into dataframe",
        "Source": "Stack Overflow"
    },
    "1029": {
        "APIs": [
            "str.join()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python - print link.get href - print output url only separated by commas",
        "Source": "Stack Overflow"
    },
    "1030": {
        "APIs": [
            "numpy.sort()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Find rank and percentage rank in list",
        "Source": "Stack Overflow"
    },
    "1031": {
        "OriginalQuery": "Django - How to count the number of deletions that occur for a model?",
        "Source": "Stack Overflow"
    },
    "1032": {
        "APIs": [
            "pandas.DataFrame.select_dtypes()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "How to calculate the mean of a pandas DataFrame with NaN values",
        "Source": "Stack Overflow"
    },
    "1033": {
        "APIs": [
            "numpy.argmin()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Calculating medoid of a cluster (Python)",
        "Source": "Stack Overflow"
    },
    "1034": {
        "APIs": [
            "datetime.date.today()"
        ],
        "APIClasses": [
            "datetime.date"
        ],
        "OriginalQuery": "python date time get the current time but with seconds and hour and minute",
        "Source": "Stack Overflow"
    },
    "1035": {
        "OriginalQuery": "python, subprocess: reading output from subprocess",
        "Source": "Stack Overflow"
    },
    "1036": {
        "APIs": [
            "threading.Thread.start()"
        ],
        "APIClasses": [
            "threading.Thread"
        ],
        "OriginalQuery": "How can I initialize a python threaded socketserver with another class?",
        "Source": "Stack Overflow"
    },
    "1037": {
        "APIs": [
            "sys.exit()"
        ],
        "APIClasses": [
            "sys"
        ],
        "OriginalQuery": "Python how to exit main function",
        "Source": "Stack Overflow"
    },
    "1038": {
        "APIs": [
            "array.array.pop()"
        ],
        "APIClasses": [
            "array.array"
        ],
        "OriginalQuery": "Python: Removing a last element from list of list?",
        "Source": "Stack Overflow"
    },
    "1039": {
        "APIs": [
            "urllib.request.HTTPPasswordMgrWithPriorAuth.is_authenticated()"
        ],
        "APIClasses": [
            "urllib.request.HTTPPasswordMgrWithPriorAuth"
        ],
        "OriginalQuery": "In django, how can I link a model with a user. I'd like the user to add information about their company website and name",
        "Source": "Stack Overflow"
    },
    "1040": {
        "APIs": [
            "select.select()"
        ],
        "APIClasses": [
            "select"
        ],
        "OriginalQuery": "What's the most efficient way to sleep in Python?",
        "Source": "Stack Overflow"
    },
    "1041": {
        "OriginalQuery": "Python: extract the text string from a DataFrame to a long string",
        "Source": "Stack Overflow"
    },
    "1042": {
        "OriginalQuery": "Get column data by Column name and sheet name",
        "Source": "Stack Overflow"
    },
    "1043": {
        "OriginalQuery": "Converting object to datetime format in python",
        "Source": "Stack Overflow"
    },
    "1044": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "faster way to replacing specific values per column, python",
        "Source": "Stack Overflow"
    },
    "1045": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Filter with multiple conditions on a single related object",
        "Source": "Stack Overflow"
    },
    "1046": {
        "OriginalQuery": "pandas collapse Series values into one value",
        "Source": "Stack Overflow"
    },
    "1047": {
        "APIs": [
            "os.path.expanduser()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "Pandas.read_excel: Accessing the home directory",
        "Source": "Stack Overflow"
    },
    "1048": {
        "APIs": [
            "re.findall()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python - Find sequence of same characters",
        "Source": "Stack Overflow"
    },
    "1049": {
        "APIs": [
            "pandas.Timestamp.timestamp()"
        ],
        "APIClasses": [
            "pandas.Timestamp"
        ],
        "OriginalQuery": "how to check if a datetime data is in the index of a dataframe",
        "Source": "Stack Overflow"
    },
    "1050": {
        "APIs": [
            "re.escape()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "How to escape unicode string for regular expressions?",
        "Source": "Stack Overflow"
    },
    "1051": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "extract hours and minutes from string python",
        "Source": "Stack Overflow"
    },
    "1052": {
        "APIs": [
            "zipfile.ZipFile.namelist()"
        ],
        "APIClasses": [
            "zipfile.ZipFile"
        ],
        "OriginalQuery": "How do I mock a class's function's return value?",
        "Source": "Stack Overflow"
    },
    "1053": {
        "OriginalQuery": "Tkinter : How to bind parentheses key",
        "Source": "Stack Overflow"
    },
    "1054": {
        "APIs": [
            "str.join()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How do I modify a single character in a string, in Python?",
        "Source": "Stack Overflow"
    },
    "1055": {
        "APIs": [
            "copy.copy()"
        ],
        "APIClasses": [
            "copy"
        ],
        "OriginalQuery": "Adding or merging python dictionaries without loss",
        "Source": "Stack Overflow"
    },
    "1056": {
        "APIs": [
            "pandas.DataFrame.sum()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "how to add columns label on a Pandas DataFrame",
        "Source": "Stack Overflow"
    },
    "1057": {
        "APIs": [
            "os._exit()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "When/How does an anonymous file object close?",
        "Source": "Stack Overflow"
    },
    "1058": {
        "APIs": [
            "multiprocessing.managers.SyncManager.dict()"
        ],
        "APIClasses": [
            "multiprocessing.managers.SyncManager"
        ],
        "OriginalQuery": "How do I create a dictionary with keys from a list and values defaulting to (say) zero?",
        "Source": "Stack Overflow"
    },
    "1059": {
        "APIs": [
            "dict.get()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "How to determine if a non-empty string exists in a dictionary?",
        "Source": "Stack Overflow"
    },
    "1060": {
        "APIs": [
            "str.replace()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Convert comma to space in list",
        "Source": "Stack Overflow"
    },
    "1061": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Field names from dtype listing?",
        "Source": "Stack Overflow"
    },
    "1062": {
        "OriginalQuery": "Counting login attempts in Flask",
        "Source": "Stack Overflow"
    },
    "1063": {
        "APIs": [
            "pandas.DataFrame.mean()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Create a rolling custom EWMA on a pandas dataframe",
        "Source": "Stack Overflow"
    },
    "1064": {
        "APIs": [
            "time.strftime()"
        ],
        "APIClasses": [
            "time"
        ],
        "OriginalQuery": "How to save a file to a specific directory and choose the file's name in python?",
        "Source": "Stack Overflow"
    },
    "1065": {
        "OriginalQuery": "Parsing string as boolean?",
        "Source": "Stack Overflow"
    },
    "1066": {
        "OriginalQuery": "Django: how to query relations effectively",
        "Source": "Stack Overflow"
    },
    "1067": {
        "OriginalQuery": "(Python) How can I turn a csv file with thousands of 10 digit numbers into decimal? (10dig -> 3dig+7decimal)",
        "Source": "Stack Overflow"
    },
    "1068": {
        "APIs": [
            "csv.csvwriter.writerows()"
        ],
        "APIClasses": [
            "csv.csvwriter"
        ],
        "OriginalQuery": "How to write list to csv, with each item on a new row",
        "Source": "Stack Overflow"
    },
    "1069": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Pymel: How do I extract these vector floats from a complex .TXT file?",
        "Source": "Stack Overflow"
    },
    "1070": {
        "APIs": [
            "os.path.ismount()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "Check if a directory is a mount point with python 2.7",
        "Source": "Stack Overflow"
    },
    "1071": {
        "APIs": [
            "math.exp()"
        ],
        "APIClasses": [
            "math"
        ],
        "OriginalQuery": "How can I use \"e\" (Euler's number) and power operation in python 2.7",
        "Source": "Stack Overflow"
    },
    "1072": {
        "APIs": [
            "abs()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Getting number of points in a 2D triangle",
        "Source": "Stack Overflow"
    },
    "1073": {
        "OriginalQuery": "How to load multiple images in a numpy array ?",
        "Source": "Stack Overflow"
    },
    "1074": {
        "OriginalQuery": "How to update a plot on Tkinter canvas?",
        "Source": "Stack Overflow"
    },
    "1075": {
        "APIs": [
            "pandas.DataFrame.dropna()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "How to handle non-numeric entries in an integer valued column",
        "Source": "Stack Overflow"
    },
    "1076": {
        "APIs": [
            "os.path.join()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "How to make python config file, in which relative paths are defined, but when scripts in other directories import config, paths are correct?",
        "Source": "Stack Overflow"
    },
    "1077": {
        "OriginalQuery": "Cut a polygon with two lines in Shapely",
        "Source": "Stack Overflow"
    },
    "1078": {
        "OriginalQuery": "how to search new line character from a string in python",
        "Source": "Stack Overflow"
    },
    "1079": {
        "OriginalQuery": "How to check if a list already contains an element in Python?",
        "Source": "Stack Overflow"
    },
    "1080": {
        "APIs": [
            "copy.copy()"
        ],
        "APIClasses": [
            "copy"
        ],
        "OriginalQuery": "Change value of all rows in a column of pandas data frame",
        "Source": "Stack Overflow"
    },
    "1081": {
        "APIs": [
            "json.dumps()"
        ],
        "APIClasses": [
            "json"
        ],
        "OriginalQuery": "Convert single quotes to double quotes for Dictionary key/value pair",
        "Source": "Stack Overflow"
    },
    "1082": {
        "OriginalQuery": "how to get field value in django admin form save_model",
        "Source": "Stack Overflow"
    },
    "1083": {
        "OriginalQuery": "How can I get uploaded text file in view through Django?",
        "Source": "Stack Overflow"
    },
    "1084": {
        "APIs": [
            "sqlite3.Cursor.fetchall()"
        ],
        "APIClasses": [
            "sqlite3.Cursor"
        ],
        "OriginalQuery": "How to store mySQL query as python dictionary and call later in script?",
        "Source": "Stack Overflow"
    },
    "1085": {
        "APIs": [
            "str.encode()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How to print the \\n character in Jinja2",
        "Source": "Stack Overflow"
    },
    "1086": {
        "APIs": [
            "pandas.DataFrame.reset_index()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Add values to bottom of DataFrame automatically with Pandas",
        "Source": "Stack Overflow"
    },
    "1087": {
        "APIs": [
            "winfo_width()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to find out the current widget size in tkinter?",
        "Source": "Stack Overflow"
    },
    "1088": {
        "APIs": [
            "datetime.datetime.strftime()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "Django Auth user date_joined field datetime to string",
        "Source": "Stack Overflow"
    },
    "1089": {
        "OriginalQuery": "Extract nested tags with other text data as string in scrapy",
        "Source": "Stack Overflow"
    },
    "1090": {
        "APIs": [
            "sqlite3.Cursor.fetchone()"
        ],
        "APIClasses": [
            "sqlite3.Cursor"
        ],
        "OriginalQuery": "Select single item in MYSQLdb - Python",
        "Source": "Stack Overflow"
    },
    "1091": {
        "APIs": [
            "frm.pack_forget()"
        ],
        "APIClasses": [
            "frm"
        ],
        "OriginalQuery": "Python: removing a TKinter frame",
        "Source": "Stack Overflow"
    },
    "1092": {
        "OriginalQuery": "How to do power curve fitting in Python?",
        "Source": "Stack Overflow"
    },
    "1093": {
        "OriginalQuery": "How to get class name of the WebElement in Python Selenium?",
        "Source": "Stack Overflow"
    },
    "1094": {
        "APIs": [
            "str.ljust()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Add leading zeroes to a string Python",
        "Source": "Stack Overflow"
    },
    "1095": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Filter list's elements by type of each element",
        "Source": "Stack Overflow"
    },
    "1096": {
        "APIs": [
            "atrow.keys()"
        ],
        "APIClasses": [
            "atrow"
        ],
        "OriginalQuery": "Python 3 - How to return all rows as a dict using csv?",
        "Source": "Stack Overflow"
    },
    "1097": {
        "APIs": [
            "subprocess.check_call()"
        ],
        "APIClasses": [
            "subprocess"
        ],
        "OriginalQuery": "Executing Interactive shell script in python",
        "Source": "Stack Overflow"
    },
    "1098": {
        "OriginalQuery": "how to send application/x-www-form-urlencoded JSON string in python botlle server",
        "Source": "Stack Overflow"
    },
    "1099": {
        "APIs": [
            "tensorflow.random_shuffle()"
        ],
        "APIClasses": [
            "tensorflow"
        ],
        "OriginalQuery": "Is there a built-in function in Tensorflow for shuffling or permutating tensors?",
        "Source": "Stack Overflow"
    },
    "1100": {
        "APIs": [
            "input()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Sum from 1 to n in one line Python",
        "Source": "Stack Overflow"
    },
    "1101": {
        "APIs": [
            "str.isdigit()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Checking whole string with a regex",
        "Source": "Stack Overflow"
    },
    "1102": {
        "OriginalQuery": "Webscraper in Python - How do I extract exact text I need?",
        "Source": "Stack Overflow"
    },
    "1103": {
        "APIs": [
            "itertools.product()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "How to generate all possible combinations of 0-1 matrix in Python?",
        "Source": "Stack Overflow"
    },
    "1104": {
        "OriginalQuery": "Encrypt in python and decrypt in Java with AES-CFB",
        "Source": "Stack Overflow"
    },
    "1105": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Sum one row of a NumPy array",
        "Source": "Stack Overflow"
    },
    "1106": {
        "APIs": [
            "re.sub()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python: find a series of Chinese characters within a string and apply a function",
        "Source": "Stack Overflow"
    },
    "1107": {
        "APIs": [
            "django.contrib.gis.geos.GEOSGeometry.normalize()"
        ],
        "APIClasses": [
            "django.contrib.gis.geos.GEOSGeometry"
        ],
        "OriginalQuery": "Django \u2013 remove trailing zeroes for a Decimal in a template",
        "Source": "Stack Overflow"
    },
    "1108": {
        "OriginalQuery": "Python with tcpdump in a subprocess: how to close subprocess properly?",
        "Source": "Stack Overflow"
    },
    "1109": {
        "APIs": [
            "subprocess.Popen.kill()"
        ],
        "APIClasses": [
            "subprocess.Popen"
        ],
        "OriginalQuery": "How to start a server from the command line in a Python unittest",
        "Source": "Stack Overflow"
    },
    "1110": {
        "APIs": [
            "pandas.DataFrame.reset_index()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Reindexing data frame Pandas",
        "Source": "Stack Overflow"
    },
    "1111": {
        "APIs": [
            "statistics.NormalDist.cdf()"
        ],
        "APIClasses": [
            "statistics.NormalDist"
        ],
        "OriginalQuery": "Can I apply a vectorized function to a pandas dataframe?",
        "Source": "Stack Overflow"
    },
    "1112": {
        "OriginalQuery": "splitting a dictionary in python into keys and values",
        "Source": "Stack Overflow"
    },
    "1113": {
        "APIs": [
            "int.from_bytes()"
        ],
        "APIClasses": [
            "int"
        ],
        "OriginalQuery": "Convert 16 bytes of random data to integer in Python",
        "Source": "Stack Overflow"
    },
    "1114": {
        "OriginalQuery": "Dowloading data from quandl.com and want to know how I include my API key with my request?",
        "Source": "Stack Overflow"
    },
    "1115": {
        "APIs": [
            "operator.index()"
        ],
        "APIClasses": [
            "operator"
        ],
        "OriginalQuery": "Finding the index of a string in a tuple",
        "Source": "Stack Overflow"
    },
    "1116": {
        "OriginalQuery": "Python how to save datetime.strptime in datetime.time format",
        "Source": "Stack Overflow"
    },
    "1117": {
        "APIs": [
            "profile.run()"
        ],
        "APIClasses": [
            "profile"
        ],
        "OriginalQuery": "Get Predicted result from tensorflow",
        "Source": "Stack Overflow"
    },
    "1118": {
        "APIs": [
            "socket.socket.send()"
        ],
        "APIClasses": [
            "socket.socket"
        ],
        "OriginalQuery": "sending a message by socket in python",
        "Source": "Stack Overflow"
    },
    "1119": {
        "APIs": [
            "socket.socket.sendfile()"
        ],
        "APIClasses": [
            "socket.socket"
        ],
        "OriginalQuery": "Sending numpy arrays via Socket",
        "Source": "Stack Overflow"
    },
    "1120": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How to print unique words from an inputted string",
        "Source": "Stack Overflow"
    },
    "1121": {
        "OriginalQuery": "Calling MSSQL stored procedure from SqlAlchemy",
        "Source": "Stack Overflow"
    },
    "1122": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to merge a list with a list of lists",
        "Source": "Stack Overflow"
    },
    "1123": {
        "APIs": [
            "datetime.datetime.fromtimestamp()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "Python convert timestampMS to date",
        "Source": "Stack Overflow"
    },
    "1124": {
        "APIs": [
            "math.isnan()"
        ],
        "APIClasses": [
            "math"
        ],
        "OriginalQuery": "Python - Finding index of first empty item in a list",
        "Source": "Stack Overflow"
    },
    "1125": {
        "APIs": [
            "pandas.DataFrame.to_html()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Pandas Dataframe to HTML remove index",
        "Source": "Stack Overflow"
    },
    "1126": {
        "APIs": [
            "datetime.date.strftime()"
        ],
        "APIClasses": [
            "datetime.date"
        ],
        "OriginalQuery": "python getting weekday from an input date",
        "Source": "Stack Overflow"
    },
    "1127": {
        "APIs": [
            "itertools.count()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "enumerate in python",
        "Source": "Stack Overflow"
    },
    "1128": {
        "APIs": [
            "os.path.join()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "Python: how to rename file in python?",
        "Source": "Stack Overflow"
    },
    "1129": {
        "APIs": [
            "globals()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to access Globals() of parent module into a sub-module?",
        "Source": "Stack Overflow"
    },
    "1130": {
        "APIs": [
            "pandas.DataFrame.copy()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "make a copy of dataframe inside function without changing original",
        "Source": "Stack Overflow"
    },
    "1131": {
        "APIs": [
            "datetime.datetime.strptime()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "How do I convert a date string containing 7 digits in milliseconds into a date in Python",
        "Source": "Stack Overflow"
    },
    "1132": {
        "APIs": [
            "os.read()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "What's Python's equivalent to C's read function?",
        "Source": "Stack Overflow"
    },
    "1133": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Compare two Pandas Series/DataFrames that are virtually equal",
        "Source": "Stack Overflow"
    },
    "1134": {
        "APIs": [
            "DataFrame.groupby()"
        ],
        "APIClasses": [
            "DataFrame"
        ],
        "OriginalQuery": "Python pandas equivalent to R groupby mutate",
        "Source": "Stack Overflow"
    },
    "1135": {
        "APIs": [
            "pandas.DataFrame.filter()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Replace PrimaryKeyRelatedField with another field",
        "Source": "Stack Overflow"
    },
    "1136": {
        "APIs": [
            "secrets.SystemRandom()"
        ],
        "APIClasses": [
            "secrets"
        ],
        "OriginalQuery": "How to use Python `secret` module to generate random integer?",
        "Source": "Stack Overflow"
    },
    "1137": {
        "APIs": [
            "sys.settrace()"
        ],
        "APIClasses": [
            "sys"
        ],
        "OriginalQuery": "How to programmatically execute/step through Python code line by line",
        "Source": "Stack Overflow"
    },
    "1138": {
        "OriginalQuery": "How to sort the index of a xarray Dataset/DataArray?",
        "Source": "Stack Overflow"
    },
    "1139": {
        "APIs": [
            "numpy.sum()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Numpy: Dot product with max instead of sum",
        "Source": "Stack Overflow"
    },
    "1140": {
        "APIs": [
            "set_index()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Pandas Dataframe - How to get y given x?",
        "Source": "Stack Overflow"
    },
    "1141": {
        "APIs": [
            "tf.unstack()"
        ],
        "APIClasses": [
            "tf"
        ],
        "OriginalQuery": "How to insert a value at given index or indices ( mutiple index ) into a Tensor?",
        "Source": "Stack Overflow"
    },
    "1142": {
        "APIs": [
            "numpy.all()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Finding the index of a numpy array in a list",
        "Source": "Stack Overflow"
    },
    "1143": {
        "APIs": [
            "pandas.Index.tolist()"
        ],
        "APIClasses": [
            "pandas.Index"
        ],
        "OriginalQuery": "Find column names when row element meets a criteria Pandas",
        "Source": "Stack Overflow"
    },
    "1144": {
        "APIs": [
            "eval()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Use a string to call function in Python",
        "Source": "Stack Overflow"
    },
    "1145": {
        "OriginalQuery": "GCP Machine Learning job: how to print lines to .csv output file?",
        "Source": "Stack Overflow"
    },
    "1146": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to remove empty rows from an Pyspark RDD",
        "Source": "Stack Overflow"
    },
    "1147": {
        "APIs": [
            "str.find()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Cutting a part of string variable in python (web scraping)",
        "Source": "Stack Overflow"
    },
    "1148": {
        "APIs": [
            "DataFrame.apply()"
        ],
        "APIClasses": [
            "DataFrame"
        ],
        "OriginalQuery": "Python Pandas Calculating Percentile per row",
        "Source": "Stack Overflow"
    },
    "1149": {
        "OriginalQuery": "Clearing a group in Python",
        "Source": "Stack Overflow"
    },
    "1150": {
        "APIs": [
            "pathlib.Path.readlink()"
        ],
        "APIClasses": [
            "pathlib.Path"
        ],
        "OriginalQuery": "Getting the target of a symbolic link with pathlib",
        "Source": "Stack Overflow"
    },
    "1151": {
        "APIs": [
            "frozenset.issubset()"
        ],
        "APIClasses": [
            "frozenset"
        ],
        "OriginalQuery": "Python: frozensets comparison",
        "Source": "Stack Overflow"
    },
    "1152": {
        "APIs": [
            "os.path.basename()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "extract the date from the file name",
        "Source": "Stack Overflow"
    },
    "1153": {
        "APIs": [
            "json.dumps()"
        ],
        "APIClasses": [
            "json"
        ],
        "OriginalQuery": "Unmarshalling JSON from the http POST request",
        "Source": "Stack Overflow"
    },
    "1154": {
        "OriginalQuery": "How to plot and display a graph in Python",
        "Source": "Stack Overflow"
    },
    "1155": {
        "OriginalQuery": "How to extract R,G,B values with numpy into seperate arrays",
        "Source": "Stack Overflow"
    },
    "1156": {
        "OriginalQuery": "Fast way to check if a string is in a huge text file",
        "Source": "Stack Overflow"
    },
    "1157": {
        "OriginalQuery": "Get name of current script in Python",
        "Source": "Stack Overflow"
    },
    "1158": {
        "APIs": [
            "numpy.zeros()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "How to create a large matrix of matrices in python?",
        "Source": "Stack Overflow"
    },
    "1159": {
        "OriginalQuery": "How can I get the row count of a CSV file?",
        "Source": "Stack Overflow"
    },
    "1160": {
        "APIs": [
            "str.replace()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Remove letters from a given string",
        "Source": "Stack Overflow"
    },
    "1161": {
        "APIs": [
            "pandas.DataFrame.subtract()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "How to specify resulting data type for arithmetic operations in NumPy?",
        "Source": "Stack Overflow"
    },
    "1162": {
        "APIs": [
            "turtle.update()"
        ],
        "APIClasses": [
            "turtle"
        ],
        "OriginalQuery": "Efficient way to update multiple fields of Django model object",
        "Source": "Stack Overflow"
    },
    "1163": {
        "OriginalQuery": "How do I convert timestamp to datetime.date in pandas dataframe?",
        "Source": "Stack Overflow"
    },
    "1164": {
        "APIs": [
            "dict.items()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "How to to filter dict to select only keys greater than a value?",
        "Source": "Stack Overflow"
    },
    "1165": {
        "APIs": [
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Splitting a line in a .csv with Python",
        "Source": "Stack Overflow"
    },
    "1166": {
        "APIs": [
            "round()"
        ],
        "APIClasses": [],
        "OriginalQuery": "how to find nearest equal or higher multiple of ten in python",
        "Source": "Stack Overflow"
    },
    "1167": {
        "OriginalQuery": "BeautifulSoup xml get class name value",
        "Source": "Stack Overflow"
    },
    "1168": {
        "APIs": [
            "socket.setdefaulttimeout()"
        ],
        "APIClasses": [
            "socket"
        ],
        "OriginalQuery": "How can I force urllib2 to time out?",
        "Source": "Stack Overflow"
    },
    "1169": {
        "APIs": [
            "format()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Converting scientific notation in Series to commas and thousands separator",
        "Source": "Stack Overflow"
    },
    "1170": {
        "APIs": [
            "multiprocessing.Queue.qsize()"
        ],
        "APIClasses": [
            "multiprocessing.Queue"
        ],
        "OriginalQuery": "Get length of Queue in Python's multiprocessing library",
        "Source": "Stack Overflow"
    },
    "1171": {
        "APIs": [
            "django.contrib.gis.geos.GEOSGeometry.distance()"
        ],
        "APIClasses": [
            "django.contrib.gis.geos.GEOSGeometry"
        ],
        "OriginalQuery": "Django 1.8, Postgis Querying distance between two points",
        "Source": "Stack Overflow"
    },
    "1172": {
        "APIs": [
            "subprocess.Popen.terminate()"
        ],
        "APIClasses": [
            "subprocess.Popen"
        ],
        "OriginalQuery": "How to cleanly kill subprocesses in python",
        "Source": "Stack Overflow"
    },
    "1173": {
        "APIs": [
            "pandas.DataFrame.div()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "pandas convert columns to percentages of the totals",
        "Source": "Stack Overflow"
    },
    "1174": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Expand tuple into arguments while casting them?",
        "Source": "Stack Overflow"
    },
    "1175": {
        "APIs": [
            "curses.textpad.rectangle()"
        ],
        "APIClasses": [
            "curses.textpad"
        ],
        "OriginalQuery": "Tkinter Canvas creating rectangle",
        "Source": "Stack Overflow"
    },
    "1176": {
        "APIs": [
            "str.strip()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Converting colon separated list into a dict?",
        "Source": "Stack Overflow"
    },
    "1177": {
        "APIs": [
            "str.replace()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Remove a pattern in all strings in a list",
        "Source": "Stack Overflow"
    },
    "1178": {
        "APIs": [
            "pandas.DataFrame.count()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Pandas dataframe: Listing amount of people per gender in each major",
        "Source": "Stack Overflow"
    },
    "1179": {
        "OriginalQuery": "Django JSON file to Pandas Dataframe",
        "Source": "Stack Overflow"
    },
    "1180": {
        "APIs": [
            "sqlite3.Connection.commit()"
        ],
        "APIClasses": [
            "sqlite3.Connection"
        ],
        "OriginalQuery": "pandas dataframe read_csv, specify columns and keep whole line as a string",
        "Source": "Stack Overflow"
    },
    "1181": {
        "APIs": [
            "str.rstrip()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How can I remove a newline character in a string in python",
        "Source": "Stack Overflow"
    },
    "1182": {
        "APIs": [
            "contextvars.Context.keys()"
        ],
        "APIClasses": [
            "contextvars.Context"
        ],
        "OriginalQuery": "Edit text fields in Selenium",
        "Source": "Stack Overflow"
    },
    "1183": {
        "APIs": [
            "zipfile.ZipFile.write()"
        ],
        "APIClasses": [
            "zipfile.ZipFile"
        ],
        "OriginalQuery": "Zip single file",
        "Source": "Stack Overflow"
    },
    "1184": {
        "APIs": [
            "dict.items()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Python how to convert a list of dict to a list of tuples",
        "Source": "Stack Overflow"
    },
    "1185": {
        "APIs": [
            "re.findall()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python: Find a string between two strings, repeatedly",
        "Source": "Stack Overflow"
    },
    "1186": {
        "APIs": [
            "datetime.datetime.strftime()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "Python export datetime to csv",
        "Source": "Stack Overflow"
    },
    "1187": {
        "APIs": [
            "str.replace()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Remove Backslashes from Data with Python 2.7",
        "Source": "Stack Overflow"
    },
    "1188": {
        "APIs": [
            "django.db.models.query.QuerySet.values_list()"
        ],
        "APIClasses": [
            "django.db.models.query.QuerySet"
        ],
        "OriginalQuery": "Pass queryset data to another query django",
        "Source": "Stack Overflow"
    },
    "1189": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "python reset enumerate index of a list on condition",
        "Source": "Stack Overflow"
    },
    "1190": {
        "APIs": [
            "chr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to convert hexadecimal string to character with that code point?",
        "Source": "Stack Overflow"
    },
    "1191": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Is it possible to sort a list in a \"for in\"-loop (Python)",
        "Source": "Stack Overflow"
    },
    "1192": {
        "APIs": [
            "dict.items()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Python pymysql - iterate through mysql table key and value",
        "Source": "Stack Overflow"
    },
    "1193": {
        "OriginalQuery": "Python Pandas: Doing cumsum for each day for months",
        "Source": "Stack Overflow"
    },
    "1194": {
        "APIs": [
            "socketserver.BaseRequestHandler.finish()"
        ],
        "APIClasses": [
            "socketserver.BaseRequestHandler"
        ],
        "OriginalQuery": "How to log HTTP response in Tornado?",
        "Source": "Stack Overflow"
    },
    "1195": {
        "OriginalQuery": "\"Convert\" tk.ACTIVE to the index (line number) in a listbox",
        "Source": "Stack Overflow"
    },
    "1196": {
        "APIs": [
            "importlib.reload()"
        ],
        "APIClasses": [
            "importlib"
        ],
        "OriginalQuery": "How to reload python module in flask?",
        "Source": "Stack Overflow"
    },
    "1197": {
        "APIs": [
            "codecs.decode()"
        ],
        "APIClasses": [
            "codecs"
        ],
        "OriginalQuery": "How to convert ajax json post request from Jquery to Python/Django dictionary",
        "Source": "Stack Overflow"
    },
    "1198": {
        "APIs": [
            "open()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Direct python output to linux file",
        "Source": "Stack Overflow"
    },
    "1199": {
        "APIs": [
            "random.choice()"
        ],
        "APIClasses": [
            "random"
        ],
        "OriginalQuery": "Generate random numbers with a given (numerical) distribution",
        "Source": "Stack Overflow"
    },
    "1200": {
        "APIs": [
            "socket.gethostname()"
        ],
        "APIClasses": [
            "socket"
        ],
        "OriginalQuery": "Connecting Python SocketServer with C# Client",
        "Source": "Stack Overflow"
    },
    "1201": {
        "APIs": [
            "bytes.decode()"
        ],
        "APIClasses": [
            "bytes"
        ],
        "OriginalQuery": "How to convert unicode characters into their respective symbols in python?",
        "Source": "Stack Overflow"
    },
    "1202": {
        "OriginalQuery": "Preferred ordering and converting a 1D bytearray to a Numpy nd-array?",
        "Source": "Stack Overflow"
    },
    "1203": {
        "APIs": [
            "re.findall()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Writing a Python RegEx to select a sub-set of list items in HTML",
        "Source": "Stack Overflow"
    },
    "1204": {
        "APIs": [
            "socket.gethostname()"
        ],
        "APIClasses": [
            "socket"
        ],
        "OriginalQuery": "How can I use Python to get the system hostname?",
        "Source": "Stack Overflow"
    },
    "1205": {
        "OriginalQuery": "Use Python to get Baidu search result urls",
        "Source": "Stack Overflow"
    },
    "1206": {
        "APIs": [
            "str.replace()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Convert list of strings to proper directory names with backslash",
        "Source": "Stack Overflow"
    },
    "1207": {
        "OriginalQuery": "Django - How to Get current object in queryset?",
        "Source": "Stack Overflow"
    },
    "1208": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Regex, how to match everything up to nth occurrence",
        "Source": "Stack Overflow"
    },
    "1209": {
        "APIs": [
            "subprocess.run()"
        ],
        "APIClasses": [
            "subprocess"
        ],
        "OriginalQuery": "Run a list of bash commands from a string in python",
        "Source": "Stack Overflow"
    },
    "1210": {
        "OriginalQuery": "Python: Conversion from dictionary to array",
        "Source": "Stack Overflow"
    },
    "1211": {
        "OriginalQuery": "Python print bytes without terminator",
        "Source": "Stack Overflow"
    },
    "1212": {
        "APIs": [
            "zipfile.is_zipfile()"
        ],
        "APIClasses": [
            "zipfile"
        ],
        "OriginalQuery": "django check if the uploaded file is a zip file",
        "Source": "Stack Overflow"
    },
    "1213": {
        "APIs": [
            "str.isdigit()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "how to check if a string contains only lower case letters and numbers?",
        "Source": "Stack Overflow"
    },
    "1214": {
        "APIs": [
            "dict.values()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Best way to check if value in dictionary of lists?",
        "Source": "Stack Overflow"
    },
    "1215": {
        "APIs": [
            "pandas.concat()"
        ],
        "APIClasses": [
            "pandas"
        ],
        "OriginalQuery": "Initializing an empty DataFrame and appending rows",
        "Source": "Stack Overflow"
    },
    "1216": {
        "APIs": [
            "io.TextIOBase.read()"
        ],
        "APIClasses": [
            "io.TextIOBase"
        ],
        "OriginalQuery": "how to turn tar file object to string",
        "Source": "Stack Overflow"
    },
    "1217": {
        "APIs": [
            "str.isspace()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python check if list only contains either empty elements or whitespace",
        "Source": "Stack Overflow"
    },
    "1218": {
        "OriginalQuery": "How to compute volatility (standard deviation) in rolling window in Pandas",
        "Source": "Stack Overflow"
    },
    "1219": {
        "OriginalQuery": "How to generate urls in django",
        "Source": "Stack Overflow"
    },
    "1220": {
        "APIs": [
            "urllib.parse.parse_qs()"
        ],
        "APIClasses": [
            "urllib.parse"
        ],
        "OriginalQuery": "get data from querystring with python",
        "Source": "Stack Overflow"
    },
    "1221": {
        "APIs": [
            "help()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Declaring types for complex data structures in python",
        "Source": "Stack Overflow"
    },
    "1222": {
        "APIs": [
            "pandas.DataFrame.nunique()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Pandas: Count Distinct Combinations of two columns and add to Same Dataframe",
        "Source": "Stack Overflow"
    },
    "1223": {
        "APIs": [
            "str.encode()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "random salt string in Python 3",
        "Source": "Stack Overflow"
    },
    "1224": {
        "APIs": [
            "str.join()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "flask-sqlalchemy: how to make a selectable button to select the users according to his role id?",
        "Source": "Stack Overflow"
    },
    "1225": {
        "APIs": [
            "locals()"
        ],
        "APIClasses": [],
        "OriginalQuery": "In Python, how do I check if a variable exists?",
        "Source": "Stack Overflow"
    },
    "1226": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to convert nested list of numbers to list of strings?",
        "Source": "Stack Overflow"
    },
    "1227": {
        "APIs": [
            "int.from_bytes()"
        ],
        "APIClasses": [
            "int"
        ],
        "OriginalQuery": "Is there a faster way to convert an arbitrary large integer to a big endian sequence of bytes?",
        "Source": "Stack Overflow"
    },
    "1228": {
        "OriginalQuery": "Xpath: obtain href if contains specific word",
        "Source": "Stack Overflow"
    },
    "1229": {
        "OriginalQuery": "creating word2vec model syn1neg.npy extension",
        "Source": "Stack Overflow"
    },
    "1230": {
        "APIs": [
            "iter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to get single value from dict with single entry?",
        "Source": "Stack Overflow"
    },
    "1231": {
        "APIs": [
            "numpy.fromfile()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "numpy: efficiently reading a large array",
        "Source": "Stack Overflow"
    },
    "1232": {
        "APIs": [
            "open()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to read hex values at specific addresses in Python?",
        "Source": "Stack Overflow"
    },
    "1233": {
        "APIs": [
            "root.decode_contents()"
        ],
        "APIClasses": [
            "root"
        ],
        "OriginalQuery": "How to remove xml encoding from beautiful soup?",
        "Source": "Stack Overflow"
    },
    "1234": {
        "APIs": [
            "DataFrame.set_index()"
        ],
        "APIClasses": [
            "DataFrame"
        ],
        "OriginalQuery": "Plotting a time series?",
        "Source": "Stack Overflow"
    },
    "1235": {
        "APIs": [
            "os._exit()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "How do you exit PDB /and/ kill the program?",
        "Source": "Stack Overflow"
    },
    "1236": {
        "OriginalQuery": "How to set sys.stdout encoding in Python 3?",
        "Source": "Stack Overflow"
    },
    "1237": {
        "OriginalQuery": "How to run python-socketio in Thread?",
        "Source": "Stack Overflow"
    },
    "1238": {
        "APIs": [
            "threading.Event.set()"
        ],
        "APIClasses": [
            "threading.Event"
        ],
        "OriginalQuery": "Ways to speed up python list operations",
        "Source": "Stack Overflow"
    },
    "1239": {
        "OriginalQuery": "Printing lists of dictionary values on the same line python",
        "Source": "Stack Overflow"
    },
    "1240": {
        "APIs": [
            "__init__()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to subclass ABCMeta",
        "Source": "Stack Overflow"
    },
    "1241": {
        "APIs": [
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "print dataframe row values and column headers as a string",
        "Source": "Stack Overflow"
    },
    "1242": {
        "APIs": [
            "eval()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How can I convert string to source code in python?",
        "Source": "Stack Overflow"
    },
    "1243": {
        "APIs": [
            "socket.socket.sendall()"
        ],
        "APIClasses": [
            "socket.socket"
        ],
        "OriginalQuery": "How do you send a dictionary over a socket in Python?",
        "Source": "Stack Overflow"
    },
    "1244": {
        "OriginalQuery": "How to wait for RxPy parallel threads to complete",
        "Source": "Stack Overflow"
    },
    "1245": {
        "OriginalQuery": "Check values in dataframe against another dataframe and append values if present",
        "Source": "Stack Overflow"
    },
    "1246": {
        "OriginalQuery": "How to deal with exponent overflow of 64float precision in python?",
        "Source": "Stack Overflow"
    },
    "1247": {
        "APIs": [
            "codecs.decode()"
        ],
        "APIClasses": [
            "codecs"
        ],
        "OriginalQuery": "search /replace text in html files with python",
        "Source": "Stack Overflow"
    },
    "1248": {
        "APIs": [
            "array.array.tolist()"
        ],
        "APIClasses": [
            "array.array"
        ],
        "OriginalQuery": "Pandas - How to get index values from a dataframe",
        "Source": "Stack Overflow"
    },
    "1249": {
        "APIs": [
            "ctypes.sizeof()"
        ],
        "APIClasses": [
            "ctypes"
        ],
        "OriginalQuery": "Detecting C types limits (\"limits.h\") in python?",
        "Source": "Stack Overflow"
    },
    "1250": {
        "OriginalQuery": "Concatenate dataframes alternating rows with Pandas",
        "Source": "Stack Overflow"
    },
    "1251": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Pythonic way to split a string and unpack into variables?",
        "Source": "Stack Overflow"
    },
    "1252": {
        "OriginalQuery": "Flask: delete file from server and database",
        "Source": "Stack Overflow"
    },
    "1253": {
        "OriginalQuery": "How to get a function's name as string?",
        "Source": "Stack Overflow"
    },
    "1254": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Merging corresponding elements of two lists to a new list",
        "Source": "Stack Overflow"
    },
    "1255": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Reverse slice from end of list to a specific index",
        "Source": "Stack Overflow"
    },
    "1256": {
        "APIs": [
            "logging.handlers.BufferingHandler.flush()"
        ],
        "APIClasses": [
            "logging.handlers.BufferingHandler"
        ],
        "OriginalQuery": "Prevent a file from being opened",
        "Source": "Stack Overflow"
    },
    "1257": {
        "OriginalQuery": "Django case insensitive \"distinct\" query",
        "Source": "Stack Overflow"
    },
    "1258": {
        "APIs": [
            "time.strftime()"
        ],
        "APIClasses": [
            "time"
        ],
        "OriginalQuery": "How to get date in following format \"2017-06-06T07:00:00.000Z\" in Python?",
        "Source": "Stack Overflow"
    },
    "1259": {
        "APIs": [
            "pandas.json_normalize()"
        ],
        "APIClasses": [
            "pandas"
        ],
        "OriginalQuery": "How to read a column of 'dictionary' into pandas",
        "Source": "Stack Overflow"
    },
    "1260": {
        "APIs": [
            "globals()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Checking if an environment variable exists and is set to True",
        "Source": "Stack Overflow"
    },
    "1261": {
        "APIs": [
            "locals()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Is there a Python equivalent to Ruby's string interpolation?",
        "Source": "Stack Overflow"
    },
    "1262": {
        "APIs": [
            "os.listdir()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "How to read a CSV file that starts with a specific substring in Python pandas?",
        "Source": "Stack Overflow"
    },
    "1263": {
        "APIs": [
            "os.wait()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "How to (gevent) spawn tasks without waiting for it to join",
        "Source": "Stack Overflow"
    },
    "1264": {
        "OriginalQuery": "How to change the layout of a window on changing its size (tkinter, python)?",
        "Source": "Stack Overflow"
    },
    "1265": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python multiprocessing a function with several inputs",
        "Source": "Stack Overflow"
    },
    "1266": {
        "APIs": [
            "DataFrame.memory_usage()"
        ],
        "APIClasses": [
            "DataFrame"
        ],
        "OriginalQuery": "Strategy for partitioning dask dataframes efficiently",
        "Source": "Stack Overflow"
    },
    "1267": {
        "APIs": [
            "sqlite3.Connection.execute()"
        ],
        "APIClasses": [
            "sqlite3.Connection"
        ],
        "OriginalQuery": "How to insert variable to database table sqlite3 - Python",
        "Source": "Stack Overflow"
    },
    "1268": {
        "OriginalQuery": "py/pandas dataframe - how to change daily closing prices into monthly closing prices?",
        "Source": "Stack Overflow"
    },
    "1269": {
        "APIs": [
            "dir()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python import a module into one class only",
        "Source": "Stack Overflow"
    },
    "1270": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "List comprehensions of dictionary values",
        "Source": "Stack Overflow"
    },
    "1271": {
        "OriginalQuery": "Python - Flask - open two webpages in default browser",
        "Source": "Stack Overflow"
    },
    "1272": {
        "APIs": [
            "numpy.nonzero()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "How to find index of minimum non zero element with numpy?",
        "Source": "Stack Overflow"
    },
    "1273": {
        "APIs": [
            "dict.keys()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Get the type of the key of a dictionary",
        "Source": "Stack Overflow"
    },
    "1274": {
        "APIs": [
            "repr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to open an audio data",
        "Source": "Stack Overflow"
    },
    "1275": {
        "APIs": [
            "str.endswith()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Check if mp3 file is in given directory",
        "Source": "Stack Overflow"
    },
    "1276": {
        "APIs": [
            "base64.encode()"
        ],
        "APIClasses": [
            "base64"
        ],
        "OriginalQuery": "How do I use a MD5 hash (or other binary data) as a key name?",
        "Source": "Stack Overflow"
    },
    "1277": {
        "APIs": [
            "os.uname()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Possible values for platform.machine()",
        "Source": "Stack Overflow"
    },
    "1278": {
        "APIs": [
            "shutil.copy()"
        ],
        "APIClasses": [
            "shutil"
        ],
        "OriginalQuery": "How to copy a file to a specific folder in a Python script?",
        "Source": "Stack Overflow"
    },
    "1279": {
        "OriginalQuery": "In PyParsing, how to setParseAction on a delimitedList to convert it to a Python list",
        "Source": "Stack Overflow"
    },
    "1280": {
        "APIs": [
            "subprocess.Popen.poll()"
        ],
        "APIClasses": [
            "subprocess.Popen"
        ],
        "OriginalQuery": "Process control - How to wait for child process to complete?",
        "Source": "Stack Overflow"
    },
    "1281": {
        "APIs": [
            "pickle.dumps()"
        ],
        "APIClasses": [
            "pickle"
        ],
        "OriginalQuery": "Serializing python object to python source code",
        "Source": "Stack Overflow"
    },
    "1282": {
        "APIs": [
            "numpy.stack()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Numpy: creating batch of numpy arrays within another numpy array (reshaping)",
        "Source": "Stack Overflow"
    },
    "1283": {
        "APIs": [
            "DataFrame.nunique()"
        ],
        "APIClasses": [
            "DataFrame"
        ],
        "OriginalQuery": "Check all possible labels (y) of an array or Dataframe",
        "Source": "Stack Overflow"
    },
    "1284": {
        "APIs": [
            "format()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python, how can I print the current datetime on the same line as a text message?",
        "Source": "Stack Overflow"
    },
    "1285": {
        "APIs": [
            "str.strip()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "adb - How to remove the invisible new line character from a Python variable?",
        "Source": "Stack Overflow"
    },
    "1286": {
        "APIs": [
            "asyncio.loop.run_forever()"
        ],
        "APIClasses": [
            "asyncio.loop"
        ],
        "OriginalQuery": "Running aiohttp application as a coroutine",
        "Source": "Stack Overflow"
    },
    "1287": {
        "APIs": [
            "ndarray.tolist()"
        ],
        "APIClasses": [
            "ndarray"
        ],
        "OriginalQuery": "Converting list of Arrays to list of Lists?",
        "Source": "Stack Overflow"
    },
    "1288": {
        "APIs": [
            "bytes.decode()"
        ],
        "APIClasses": [
            "bytes"
        ],
        "OriginalQuery": "How to decode (very large in value) hex string into decimal?",
        "Source": "Stack Overflow"
    },
    "1289": {
        "APIs": [
            "random.randint()"
        ],
        "APIClasses": [
            "random"
        ],
        "OriginalQuery": "How do I generate a random 4 digit number and store it as a variable in python?",
        "Source": "Stack Overflow"
    },
    "1290": {
        "APIs": [
            "format()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python3.x: Format Float to 2 Digits, Limit to 3 Decimal places",
        "Source": "Stack Overflow"
    },
    "1291": {
        "APIs": [
            "collections.Counter.most_common()"
        ],
        "APIClasses": [
            "collections.Counter"
        ],
        "OriginalQuery": "Count most common titular words in a paragraph of text",
        "Source": "Stack Overflow"
    },
    "1292": {
        "APIs": [
            "socket.socket.recv()"
        ],
        "APIClasses": [
            "socket.socket"
        ],
        "OriginalQuery": "Sending images over socket in Python 3",
        "Source": "Stack Overflow"
    },
    "1293": {
        "APIs": [
            "ctypes.create_string_buffer()"
        ],
        "APIClasses": [
            "ctypes"
        ],
        "OriginalQuery": "Decode C const char* in Python with ctypes",
        "Source": "Stack Overflow"
    },
    "1294": {
        "APIs": [
            "str.splitlines()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python Split String On Newline And Keep Newline",
        "Source": "Stack Overflow"
    },
    "1295": {
        "APIs": [
            "cmath.cos()"
        ],
        "APIClasses": [
            "cmath"
        ],
        "OriginalQuery": "Generating random numbers a, b, c such that a^2 + b^2 + c^2 = 1",
        "Source": "Stack Overflow"
    },
    "1296": {
        "APIs": [
            "repr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Customizing debug print format with PyDev",
        "Source": "Stack Overflow"
    },
    "1297": {
        "APIs": [
            "random.random()"
        ],
        "APIClasses": [
            "random"
        ],
        "OriginalQuery": "Python3: How to generate a pseudo-random sequence per object?",
        "Source": "Stack Overflow"
    },
    "1298": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Test if all objects have same member value",
        "Source": "Stack Overflow"
    },
    "1299": {
        "OriginalQuery": "Parse text response from http request in Python",
        "Source": "Stack Overflow"
    },
    "1300": {
        "APIs": [
            "json.dumps()"
        ],
        "APIClasses": [
            "json"
        ],
        "OriginalQuery": "Sending JSON from python script to JQuery",
        "Source": "Stack Overflow"
    },
    "1301": {
        "APIs": [
            "print()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Print a sorted list",
        "Source": "Stack Overflow"
    },
    "1302": {
        "APIs": [
            "itertools.islice()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "selecting first n elements of a set",
        "Source": "Stack Overflow"
    },
    "1303": {
        "OriginalQuery": "Python: how to index in a dataframe (panda) consisting of arrays and NaN",
        "Source": "Stack Overflow"
    },
    "1304": {
        "APIs": [
            "socket.gethostbyname()"
        ],
        "APIClasses": [
            "socket"
        ],
        "OriginalQuery": "Python: How do I get the IP address from a FQDN",
        "Source": "Stack Overflow"
    },
    "1305": {
        "APIs": [
            "str.join()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "loop multiple key value pairs in python dict in single loop",
        "Source": "Stack Overflow"
    },
    "1306": {
        "APIs": [
            "os.getcwd()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "pdb: set a breakpoint on file which isn't in sys.path",
        "Source": "Stack Overflow"
    },
    "1307": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Numpy filter pixel indices",
        "Source": "Stack Overflow"
    },
    "1308": {
        "APIs": [
            "pandas.DataFrame.set_index()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Set index in pandas",
        "Source": "Stack Overflow"
    },
    "1309": {
        "APIs": [
            "repr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python - Check multiple white spaces in string",
        "Source": "Stack Overflow"
    },
    "1310": {
        "APIs": [
            "float.fromhex()"
        ],
        "APIClasses": [
            "float"
        ],
        "OriginalQuery": "Floating point hex string back to float",
        "Source": "Stack Overflow"
    },
    "1311": {
        "APIs": [
            "numpy.random.randint()"
        ],
        "APIClasses": [
            "numpy.random"
        ],
        "OriginalQuery": "Fastest way to generate random number from uniform distribtution python",
        "Source": "Stack Overflow"
    },
    "1312": {
        "APIs": [
            "array.array.reverse()"
        ],
        "APIClasses": [
            "array.array"
        ],
        "OriginalQuery": "How do I reverse a part (slice) of a list in Python?",
        "Source": "Stack Overflow"
    },
    "1313": {
        "OriginalQuery": "Comparing two pandas series for floating point near-equality?",
        "Source": "Stack Overflow"
    },
    "1314": {
        "APIs": [
            "pandas.DataFrame.isnull()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "how to remove None cell from a dataframe in python",
        "Source": "Stack Overflow"
    },
    "1315": {
        "APIs": [
            "pandas.DataFrame.apply()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Pandas: groupby column A and make lists of tuples from other columns?",
        "Source": "Stack Overflow"
    },
    "1316": {
        "APIs": [
            "datetime.datetime.isoformat()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "Formatting the to 3 digits after the decimal in time",
        "Source": "Stack Overflow"
    },
    "1317": {
        "APIs": [
            "open()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Exporting pandas table as pdf",
        "Source": "Stack Overflow"
    },
    "1318": {
        "APIs": [
            "numpy.ndarray.tolist()"
        ],
        "APIClasses": [
            "numpy.ndarray"
        ],
        "OriginalQuery": "Pandas - Count and get unique occurrences of string values from a column",
        "Source": "Stack Overflow"
    },
    "1319": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to query in django one to many",
        "Source": "Stack Overflow"
    },
    "1320": {
        "APIs": [
            "os.system()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "How to perform multiple tasks in CMD through Python in the same terminal and without the window closing",
        "Source": "Stack Overflow"
    },
    "1321": {
        "OriginalQuery": "np.polyfit how to get lists into a 2D array for y input",
        "Source": "Stack Overflow"
    },
    "1322": {
        "APIs": [
            "os.path.realpath()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "Fixing '../../' paths in python",
        "Source": "Stack Overflow"
    },
    "1323": {
        "OriginalQuery": "How can I set a users password in linux from a python script?",
        "Source": "Stack Overflow"
    },
    "1324": {
        "APIs": [
            "subprocess.Popen.communicate()"
        ],
        "APIClasses": [
            "subprocess.Popen"
        ],
        "OriginalQuery": "How to capture the terminal log of script to a file?",
        "Source": "Stack Overflow"
    },
    "1325": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "python : How to get all the values from a list of a list excluding a certain value and then get the mean of each column?",
        "Source": "Stack Overflow"
    },
    "1326": {
        "APIs": [
            "numpy.dot()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Numpy - multiple 3d array with a 2d array",
        "Source": "Stack Overflow"
    },
    "1327": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Finding a list in a list of lists with the max value by given index and returning its first value",
        "Source": "Stack Overflow"
    },
    "1328": {
        "APIs": [
            "open()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How can I convert a .dds file to a .png in python?",
        "Source": "Stack Overflow"
    },
    "1329": {
        "APIs": [
            "re.findall()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Extract all URLS from a page matching a particular pattern in BeautifulSoup",
        "Source": "Stack Overflow"
    },
    "1330": {
        "APIs": [
            "pickle.load()"
        ],
        "APIClasses": [
            "pickle"
        ],
        "OriginalQuery": "How to load Python 3 Pickled SKlearn Model in Python 2",
        "Source": "Stack Overflow"
    },
    "1331": {
        "OriginalQuery": "How do I delete displayed objects in python with pygame?",
        "Source": "Stack Overflow"
    },
    "1332": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Get index from a list of objects with one of the object's attributes",
        "Source": "Stack Overflow"
    },
    "1333": {
        "APIs": [
            "pandas.DataFrame.max()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Find the highest value in a dataframe",
        "Source": "Stack Overflow"
    },
    "1334": {
        "OriginalQuery": "Python: how to open default browser using webbrowser module?",
        "Source": "Stack Overflow"
    },
    "1335": {
        "APIs": [
            "numpy.conjugate()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Numpy Finding complex conjugate",
        "Source": "Stack Overflow"
    },
    "1336": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to add a Numpy Array to a dictionary",
        "Source": "Stack Overflow"
    },
    "1337": {
        "OriginalQuery": "How to return an empty list in python",
        "Source": "Stack Overflow"
    },
    "1338": {
        "APIs": [
            "str.join()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Select non empty elements of list in Python",
        "Source": "Stack Overflow"
    },
    "1339": {
        "APIs": [
            "multiprocessing.pool.Pool.map()"
        ],
        "APIClasses": [
            "multiprocessing.pool.Pool"
        ],
        "OriginalQuery": "Correctly use ThreadPool with Generators",
        "Source": "Stack Overflow"
    },
    "1340": {
        "APIs": [
            "socket.getnameinfo()"
        ],
        "APIClasses": [
            "socket"
        ],
        "OriginalQuery": "Python - How to get port of sender socket (UDP)",
        "Source": "Stack Overflow"
    },
    "1341": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How can I get the number of columns and rows from 2D list",
        "Source": "Stack Overflow"
    },
    "1342": {
        "APIs": [
            "json.dumps()"
        ],
        "APIClasses": [
            "json"
        ],
        "OriginalQuery": "How do I pass null as a value in a POST request on python?",
        "Source": "Stack Overflow"
    },
    "1343": {
        "APIs": [
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to pick just one item from a generator?",
        "Source": "Stack Overflow"
    },
    "1344": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Pandas counting occurrence of list contained in column of lists",
        "Source": "Stack Overflow"
    },
    "1345": {
        "APIs": [
            "dict.update()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Add element to JSON in Python",
        "Source": "Stack Overflow"
    },
    "1346": {
        "APIs": [
            "datetime.datetime.utcoffset()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "python get timezone value from datetime object",
        "Source": "Stack Overflow"
    },
    "1347": {
        "OriginalQuery": "keep a subprocess alive and keep giving it commands python 3",
        "Source": "Stack Overflow"
    },
    "1348": {
        "APIs": [
            "heapq.nlargest()"
        ],
        "APIClasses": [
            "heapq"
        ],
        "OriginalQuery": "Find n largest values from dictionary",
        "Source": "Stack Overflow"
    },
    "1349": {
        "APIs": [
            "pandas.DataFrame.sort_index()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "python pandas sort columns after merge",
        "Source": "Stack Overflow"
    },
    "1350": {
        "APIs": [
            "pandas.DataFrame.sort_values()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "How can I sort DataFrame by date in Python?",
        "Source": "Stack Overflow"
    },
    "1351": {
        "APIs": [
            "argparse.ArgumentParser.add_argument()"
        ],
        "APIClasses": [
            "argparse.ArgumentParser"
        ],
        "OriginalQuery": "How disable debuger on chrome webdriver in Python 3.x?",
        "Source": "Stack Overflow"
    },
    "1352": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "find the min and max values of nested list by index of element in nested list",
        "Source": "Stack Overflow"
    },
    "1353": {
        "APIs": [
            "pandas.DataFrame.reset_index()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Pandas merge two datasets with same number of rows",
        "Source": "Stack Overflow"
    },
    "1354": {
        "APIs": [
            "str.count()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python 3.6 - How to match strings in a for loop?",
        "Source": "Stack Overflow"
    },
    "1355": {
        "APIs": [
            "numpy.ndarray.tolist()"
        ],
        "APIClasses": [
            "numpy.ndarray"
        ],
        "OriginalQuery": "Python: convert np array os sec to datetime",
        "Source": "Stack Overflow"
    },
    "1356": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Combining DataArrays in an xarray Dataset",
        "Source": "Stack Overflow"
    },
    "1357": {
        "OriginalQuery": "How to save a file on the cluster",
        "Source": "Stack Overflow"
    },
    "1358": {
        "APIs": [
            "dict.get()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Python safe dictionary key access",
        "Source": "Stack Overflow"
    },
    "1359": {
        "APIs": [
            "datetime.datetime.timestamp()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "Change creation time in file in Python3",
        "Source": "Stack Overflow"
    },
    "1360": {
        "APIs": [
            "re.split()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "How to split a string with regexp without keeping capture groups?",
        "Source": "Stack Overflow"
    },
    "1361": {
        "APIs": [
            "format()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python: How to format the output from colored(var, 'color')",
        "Source": "Stack Overflow"
    },
    "1362": {
        "APIs": [
            "pandas.DataFrame.iteritems()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "How to get multiple max key values in a dictionary?",
        "Source": "Stack Overflow"
    },
    "1363": {
        "APIs": [
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python 3.2 skip a line in csv.DictReader",
        "Source": "Stack Overflow"
    },
    "1364": {
        "APIs": [
            "encodings.idna.ToASCII()"
        ],
        "APIClasses": [
            "encodings.idna"
        ],
        "OriginalQuery": "How can I log the outgoing request of urlfetch in google app engine python?",
        "Source": "Stack Overflow"
    },
    "1365": {
        "APIs": [
            "bytes.decode()"
        ],
        "APIClasses": [
            "bytes"
        ],
        "OriginalQuery": "How can i get telnet output printed line by line?",
        "Source": "Stack Overflow"
    },
    "1366": {
        "APIs": [
            "copy.deepcopy()"
        ],
        "APIClasses": [
            "copy"
        ],
        "OriginalQuery": "How can I create a copy of an object in Python?",
        "Source": "Stack Overflow"
    },
    "1367": {
        "APIs": [
            "str.join()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Converting Unicode to Binary",
        "Source": "Stack Overflow"
    },
    "1368": {
        "APIs": [
            "gc.collect()"
        ],
        "APIClasses": [
            "gc"
        ],
        "OriginalQuery": "Free memory in Python",
        "Source": "Stack Overflow"
    },
    "1369": {
        "APIs": [
            "destroy()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Clear used RAM for Tkinter TEXT widget",
        "Source": "Stack Overflow"
    },
    "1370": {
        "APIs": [
            "gc.get_objects()"
        ],
        "APIClasses": [
            "gc"
        ],
        "OriginalQuery": "How can I profile memory of multithread program in Python?",
        "Source": "Stack Overflow"
    },
    "1371": {
        "APIs": [
            "globals()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Iterating through globals() dictionary",
        "Source": "Stack Overflow"
    },
    "1372": {
        "APIs": [
            "subprocess.Popen.communicate()"
        ],
        "APIClasses": [
            "subprocess.Popen"
        ],
        "OriginalQuery": "How to use subprocess to execute programs with Python",
        "Source": "Stack Overflow"
    },
    "1373": {
        "APIs": [
            "str.join()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Split a string and save them to a list with Python",
        "Source": "Stack Overflow"
    },
    "1374": {
        "APIs": [
            "re.escape()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python: Best practice for dynamically constructing regex",
        "Source": "Stack Overflow"
    },
    "1375": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Regular Expression for Finding Numbers in a Line (Python)",
        "Source": "Stack Overflow"
    },
    "1376": {
        "APIs": [
            "test.support.get_attribute()"
        ],
        "APIClasses": [
            "test.support"
        ],
        "OriginalQuery": "How to get the value of an element in Python + Selenium?",
        "Source": "Stack Overflow"
    },
    "1377": {
        "OriginalQuery": "How use Gridfs of mongodb with PIL (Python Image Library)",
        "Source": "Stack Overflow"
    },
    "1378": {
        "OriginalQuery": "Sharing and editing numpy array in python multiprocessing",
        "Source": "Stack Overflow"
    },
    "1379": {
        "APIs": [
            "io.TextIOBase.readline()"
        ],
        "APIClasses": [
            "io.TextIOBase"
        ],
        "OriginalQuery": "Reading first line of an uploaded text file in python/django",
        "Source": "Stack Overflow"
    },
    "1380": {
        "OriginalQuery": "How to print the value of shape of the tensor?",
        "Source": "Stack Overflow"
    },
    "1381": {
        "APIs": [
            "dir()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python how to print all object properties in one line",
        "Source": "Stack Overflow"
    },
    "1382": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to detect the type of widget?",
        "Source": "Stack Overflow"
    },
    "1383": {
        "APIs": [
            "subprocess.call()"
        ],
        "APIClasses": [
            "subprocess"
        ],
        "OriginalQuery": "How do I run a bash script inside Python, but act as if it's running from another directory?",
        "Source": "Stack Overflow"
    },
    "1384": {
        "APIs": [
            "locals()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How do I use Python to easily expand variables to strings?",
        "Source": "Stack Overflow"
    },
    "1385": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Multiple assignation with list comprehension",
        "Source": "Stack Overflow"
    },
    "1386": {
        "APIs": [
            "itertools.groupby()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "list around groupby results in empty groups",
        "Source": "Stack Overflow"
    },
    "1387": {
        "APIs": [
            "time.strftime()"
        ],
        "APIClasses": [
            "time"
        ],
        "OriginalQuery": "Django Python: How to convert datetime.time(2, 3) to String format H:M:S",
        "Source": "Stack Overflow"
    },
    "1388": {
        "APIs": [
            "str.join()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Split a filename python on underscore",
        "Source": "Stack Overflow"
    },
    "1389": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Remove string characters from a given found substring until the end in Python",
        "Source": "Stack Overflow"
    },
    "1390": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Counting values in a row that match a condition - Python",
        "Source": "Stack Overflow"
    },
    "1391": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Get all except first and last n elements of a numpy array",
        "Source": "Stack Overflow"
    },
    "1392": {
        "OriginalQuery": "How to convert multiple excel sheets to csv python",
        "Source": "Stack Overflow"
    },
    "1393": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Turn iterable of tuple into iterables of each element (Python)",
        "Source": "Stack Overflow"
    },
    "1394": {
        "APIs": [
            "inspect.getargspec()"
        ],
        "APIClasses": [
            "inspect"
        ],
        "OriginalQuery": "How to find out the default values of a particular function's argument in another function in Python?",
        "Source": "Stack Overflow"
    },
    "1395": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to check if tuple having a list or dictionary is empty",
        "Source": "Stack Overflow"
    },
    "1396": {
        "APIs": [
            "signal.connect()"
        ],
        "APIClasses": [
            "signal"
        ],
        "OriginalQuery": "How can I detect when objects of a Django model are added/deleted?",
        "Source": "Stack Overflow"
    },
    "1397": {
        "OriginalQuery": "Generate an unique word list from a word list of a list",
        "Source": "Stack Overflow"
    },
    "1398": {
        "APIs": [
            "datetime.datetime.fromtimestamp()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "Compute Date out of Timestamp from Binance-API (Python)",
        "Source": "Stack Overflow"
    },
    "1399": {
        "OriginalQuery": "How can we get the default behavior of __repr__()?",
        "Source": "Stack Overflow"
    },
    "1400": {
        "APIs": [
            "input()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python 2.7.10 : How can i stop the user exploiting input by entering equation instead of integer?",
        "Source": "Stack Overflow"
    },
    "1401": {
        "APIs": [
            "dict.items()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Find keys through values in a dict for Python",
        "Source": "Stack Overflow"
    },
    "1402": {
        "OriginalQuery": "python: how to represent x-axis data using matplotlib",
        "Source": "Stack Overflow"
    },
    "1403": {
        "OriginalQuery": "Plot incoming stream of numbers with matplotlib",
        "Source": "Stack Overflow"
    },
    "1404": {
        "APIs": [
            "re.findall()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python - regex - how to find ONLY four letter words?",
        "Source": "Stack Overflow"
    },
    "1405": {
        "APIs": [
            "os.rmdir()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "How to remove a directory? Is os.removedirs and os.rmdir only used to delete empty directories?",
        "Source": "Stack Overflow"
    },
    "1406": {
        "APIs": [
            "zipfile.ZipFile.read()"
        ],
        "APIClasses": [
            "zipfile.ZipFile"
        ],
        "OriginalQuery": "Make in-memory copy of a zip by iterating over each file of the input",
        "Source": "Stack Overflow"
    },
    "1407": {
        "APIs": [
            "pandas.DataFrame.head()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Pandas Dataframe: How to select a row by index, and then get the next few rows",
        "Source": "Stack Overflow"
    },
    "1408": {
        "APIs": [
            "np.argsort()"
        ],
        "APIClasses": [
            "np"
        ],
        "OriginalQuery": "Sorting matrix columns based on list values with Python",
        "Source": "Stack Overflow"
    },
    "1409": {
        "OriginalQuery": "Converting Python instance to ctypes.c_void_p",
        "Source": "Stack Overflow"
    },
    "1410": {
        "APIs": [
            "round()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to multiply a floating point number and a decimal in Django?",
        "Source": "Stack Overflow"
    },
    "1411": {
        "OriginalQuery": "Python 3.6: How can I open a text file into two sets and check intersections",
        "Source": "Stack Overflow"
    },
    "1412": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to print for loop with 2 lists?",
        "Source": "Stack Overflow"
    },
    "1413": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Django Foreign Key in View - get first image to show for each user in list",
        "Source": "Stack Overflow"
    },
    "1414": {
        "APIs": [
            "str.index()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python script to convert hexadecimal to decimal",
        "Source": "Stack Overflow"
    },
    "1415": {
        "APIs": [
            "copy.copy()"
        ],
        "APIClasses": [
            "copy"
        ],
        "OriginalQuery": "Convert structured array to numpy array for use with Scikit-Learn",
        "Source": "Stack Overflow"
    },
    "1416": {
        "APIs": [
            "heapq.heappop()"
        ],
        "APIClasses": [
            "heapq"
        ],
        "OriginalQuery": "delete arbitrary item from heap in python",
        "Source": "Stack Overflow"
    },
    "1417": {
        "APIs": [
            "issubclass()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How do I check (at runtime) if one class is a subclass of another?",
        "Source": "Stack Overflow"
    },
    "1418": {
        "APIs": [
            "subprocess.call()"
        ],
        "APIClasses": [
            "subprocess"
        ],
        "OriginalQuery": "Run multiple subprocesses in parallel - python 2.7",
        "Source": "Stack Overflow"
    },
    "1419": {
        "APIs": [
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Check to see if a string contains either of the strings in a list in Python",
        "Source": "Stack Overflow"
    },
    "1420": {
        "OriginalQuery": "How to show all of columns name on pandas dataframe?",
        "Source": "Stack Overflow"
    },
    "1421": {
        "APIs": [
            "subprocess.Popen.wait()"
        ],
        "APIClasses": [
            "subprocess.Popen"
        ],
        "OriginalQuery": "Calling bash in thread",
        "Source": "Stack Overflow"
    },
    "1422": {
        "OriginalQuery": "How to apply regex to the content of a file?",
        "Source": "Stack Overflow"
    },
    "1423": {
        "APIs": [
            "urllib.parse.quote_plus()"
        ],
        "APIClasses": [
            "urllib.parse"
        ],
        "OriginalQuery": "Escape from html %20",
        "Source": "Stack Overflow"
    },
    "1424": {
        "APIs": [
            "datetime.datetime.now()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "django. Get only current day. Only day without time",
        "Source": "Stack Overflow"
    },
    "1425": {
        "APIs": [
            "numpy.stack()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "How do I convert a pandas series which is multidimensional to pandas dataframe",
        "Source": "Stack Overflow"
    },
    "1426": {
        "APIs": [
            "str.startswith()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "select rows where values match specific characters python",
        "Source": "Stack Overflow"
    },
    "1427": {
        "APIs": [
            "list.sort()"
        ],
        "APIClasses": [
            "list"
        ],
        "OriginalQuery": "How do I sort a column of Django elements inside a table?",
        "Source": "Stack Overflow"
    },
    "1428": {
        "APIs": [
            "subprocess.run()"
        ],
        "APIClasses": [
            "subprocess"
        ],
        "OriginalQuery": "run python script with arguments in another python script",
        "Source": "Stack Overflow"
    },
    "1429": {
        "APIs": [
            "new_client(), client"
        ],
        "APIClasses": [],
        "OriginalQuery": "How can I cancel my asyncio Task before the unit test ends?",
        "Source": "Stack Overflow"
    },
    "1430": {
        "APIs": [
            "itertools.tee()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "How to clone a Python generator object?",
        "Source": "Stack Overflow"
    },
    "1431": {
        "APIs": [
            "json.dumps()"
        ],
        "APIClasses": [
            "json"
        ],
        "OriginalQuery": "Python - Creating JSON array? and passing to ajax",
        "Source": "Stack Overflow"
    },
    "1432": {
        "APIs": [
            "asyncio.loop.call_soon_threadsafe()"
        ],
        "APIClasses": [
            "asyncio.loop"
        ],
        "OriginalQuery": "run infinite loop in asyncio event loop running off the main thread",
        "Source": "Stack Overflow"
    },
    "1433": {
        "APIs": [
            "numpy.insert()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Insert 2D array into 3D array in python",
        "Source": "Stack Overflow"
    },
    "1434": {
        "APIs": [
            "df.dropna()"
        ],
        "APIClasses": [
            "df"
        ],
        "OriginalQuery": "Is it possible to Skip Blank Lines in a Dataframe? If Yes then how I can do this",
        "Source": "Stack Overflow"
    },
    "1435": {
        "APIs": [
            "format()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Pandas - Dataset contains a long list of strings. How can I add a commas to seperate each string?",
        "Source": "Stack Overflow"
    },
    "1436": {
        "OriginalQuery": "How to set ciphers in ssl python socket",
        "Source": "Stack Overflow"
    },
    "1437": {
        "APIs": [
            "io.IOBase.readlines()"
        ],
        "APIClasses": [
            "io.IOBase"
        ],
        "OriginalQuery": "How to convert txt file into 2d array of each char",
        "Source": "Stack Overflow"
    },
    "1438": {
        "OriginalQuery": "BeautifulSoup find text in specific tag",
        "Source": "Stack Overflow"
    },
    "1439": {
        "APIs": [
            "threading.Thread.join()"
        ],
        "APIClasses": [
            "threading.Thread"
        ],
        "OriginalQuery": "Simple way to wait for all deamon threads to finish before exiting a Python program?",
        "Source": "Stack Overflow"
    },
    "1440": {
        "APIs": [
            "ctypes.POINTER()"
        ],
        "APIClasses": [
            "ctypes"
        ],
        "OriginalQuery": "call c++ function from python",
        "Source": "Stack Overflow"
    },
    "1441": {
        "APIs": [
            "numpy.array()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Open / load image as numpy ndarray directly",
        "Source": "Stack Overflow"
    },
    "1442": {
        "OriginalQuery": "How to print out all cells of a table row in Beautiful Soup",
        "Source": "Stack Overflow"
    },
    "1443": {
        "APIs": [
            "str.count()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "count the number of posts by a user - django",
        "Source": "Stack Overflow"
    },
    "1444": {
        "APIs": [
            "hex()"
        ],
        "APIClasses": [],
        "OriginalQuery": "how to get hex string from a HexBytes object?",
        "Source": "Stack Overflow"
    },
    "1445": {
        "APIs": [
            "contains() "
        ],
        "APIClasses": [],
        "OriginalQuery": "How do I prevent SQL injection in a LIKE '%input%' clause?",
        "Source": "Stack Overflow"
    },
    "1446": {
        "APIs": [
            "numpy.argpartition()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Get indices of N maximum values in a numpy array without sorting them?",
        "Source": "Stack Overflow"
    },
    "1447": {
        "APIs": [
            "pandas.Index.tolist()"
        ],
        "APIClasses": [
            "pandas.Index"
        ],
        "OriginalQuery": "How to obtain the row number of a Pandas DataFrame after groupby",
        "Source": "Stack Overflow"
    },
    "1448": {
        "APIs": [
            "django.core.files.storage.Storage.exists()"
        ],
        "APIClasses": [
            "django.core.files.storage.Storage"
        ],
        "OriginalQuery": "How to ensure file exists in Django project?",
        "Source": "Stack Overflow"
    },
    "1449": {
        "APIs": [
            "re.findall()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "regexes: How to access multiple matches of a group?",
        "Source": "Stack Overflow"
    },
    "1450": {
        "APIs": [
            "ord()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How can i modify a byte array?",
        "Source": "Stack Overflow"
    },
    "1451": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "how to iterate through keys and values in a dictionary in python",
        "Source": "Stack Overflow"
    },
    "1452": {
        "APIs": [
            "numpy.array()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Reshape numpy array having only one dimension",
        "Source": "Stack Overflow"
    },
    "1453": {
        "APIs": [
            "unittest.mock.patch()"
        ],
        "APIClasses": [
            "unittest.mock"
        ],
        "OriginalQuery": "pytest-mock - Mock a function from a module",
        "Source": "Stack Overflow"
    },
    "1454": {
        "APIs": [
            "pandas.DataFrame.drop()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Pyspark: Select all columns except particular columns",
        "Source": "Stack Overflow"
    },
    "1455": {
        "APIs": [
            "pandas.Series.str.contains()"
        ],
        "APIClasses": [
            "pandas.Series.str"
        ],
        "OriginalQuery": "How to filter pandas DataFrame with a list of strings",
        "Source": "Stack Overflow"
    },
    "1456": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python sort dictionary by descending values and then by keys alphabetically",
        "Source": "Stack Overflow"
    },
    "1457": {
        "APIs": [
            "round()"
        ],
        "APIClasses": [],
        "OriginalQuery": "convert images from [-1; 1] to [0; 255]",
        "Source": "Stack Overflow"
    },
    "1458": {
        "APIs": [
            "str.upper()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Date formatting to month uppercase",
        "Source": "Stack Overflow"
    },
    "1459": {
        "OriginalQuery": "creating blank field and receving the INTEGER PRIMARY KEY with sqlite, python",
        "Source": "Stack Overflow"
    },
    "1460": {
        "APIs": [
            "datetime.datetime.strftime()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "Python: How to display date time in following format (2018-06-25T07:17:17.000Z)?",
        "Source": "Stack Overflow"
    },
    "1461": {
        "APIs": [
            "format()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Alternative to passing a format string as keyword argument in Python 3.5+",
        "Source": "Stack Overflow"
    },
    "1462": {
        "APIs": [
            "fromNDArrayToMat()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to convert OpenCV image data from Python to C++?",
        "Source": "Stack Overflow"
    },
    "1463": {
        "APIs": [
            "DataFrame.set_index()"
        ],
        "APIClasses": [
            "DataFrame"
        ],
        "OriginalQuery": "Fill column of a dataframe from another dataframe",
        "Source": "Stack Overflow"
    },
    "1464": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "python: loop over dict with multiple values per key",
        "Source": "Stack Overflow"
    },
    "1465": {
        "APIs": [
            "sys.getfilesystemencoding()"
        ],
        "APIClasses": [
            "sys"
        ],
        "OriginalQuery": "How do I tell Python that sys.argv is in Unicode?",
        "Source": "Stack Overflow"
    },
    "1466": {
        "APIs": [
            "json.loads()"
        ],
        "APIClasses": [
            "json"
        ],
        "OriginalQuery": "Python 3.x How to convert and process bytes to list (that also has a dict)?",
        "Source": "Stack Overflow"
    },
    "1467": {
        "APIs": [
            "pandas.DataFrame.reset_index()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Passing pandas groupby result to html in a pretty way",
        "Source": "Stack Overflow"
    },
    "1468": {
        "APIs": [
            "str.isdigit()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Extract Digits from String",
        "Source": "Stack Overflow"
    },
    "1469": {
        "APIs": [
            "str.isalnum()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Create new dataFrame based on reformatted columns from old dataFrame",
        "Source": "Stack Overflow"
    },
    "1470": {
        "APIs": [
            "urllib.request.urlopen()"
        ],
        "APIClasses": [
            "urllib.request"
        ],
        "OriginalQuery": "Change or create a timeout with urllib request",
        "Source": "Stack Overflow"
    },
    "1471": {
        "APIs": [
            "datetime.datetime.strptime()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "Parsing string to datetime while accounting for AM/PM in pandas",
        "Source": "Stack Overflow"
    },
    "1472": {
        "APIs": [
            "first()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Fastest way to get the first object from a queryset in django?",
        "Source": "Stack Overflow"
    },
    "1473": {
        "APIs": [
            "str.replace()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How to delete space in the input in Python",
        "Source": "Stack Overflow"
    },
    "1474": {
        "APIs": [
            "array.array.extend()"
        ],
        "APIClasses": [
            "array.array"
        ],
        "OriginalQuery": "How could I append a coordinate value to an array of coordinates?",
        "Source": "Stack Overflow"
    },
    "1475": {
        "APIs": [
            "sqlite3.Cursor.fetchall()"
        ],
        "APIClasses": [
            "sqlite3.Cursor"
        ],
        "OriginalQuery": "SQLite3 fetch multiple columns in one SELECT statement (python)",
        "Source": "Stack Overflow"
    },
    "1476": {
        "APIs": [
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python - How can I find if an item exists in multidimensional array?",
        "Source": "Stack Overflow"
    },
    "1477": {
        "APIs": [
            "os.path.dirname()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "Find current directory and file's directory",
        "Source": "Stack Overflow"
    },
    "1478": {
        "APIs": [
            "unittest.TestLoader.loadTestsFromName()"
        ],
        "APIClasses": [
            "unittest.TestLoader"
        ],
        "OriginalQuery": "Python - How to mask a class from being executed in unittest on runtime",
        "Source": "Stack Overflow"
    },
    "1479": {
        "APIs": [
            "asyncio.sleep()"
        ],
        "APIClasses": [
            "asyncio"
        ],
        "OriginalQuery": "How to use asyncio to continously read from a process and kill it after a timeout",
        "Source": "Stack Overflow"
    },
    "1480": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python and Pandas: How do I shorten string values from an individual column?",
        "Source": "Stack Overflow"
    },
    "1481": {
        "APIs": [
            "repr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python - How to print variable that has been assigned to an indentation?",
        "Source": "Stack Overflow"
    },
    "1482": {
        "APIs": [
            "str.format()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How to use logger to print a list in just one line in Python",
        "Source": "Stack Overflow"
    },
    "1483": {
        "OriginalQuery": "Plot a function during debugging in Python",
        "Source": "Stack Overflow"
    },
    "1484": {
        "APIs": [
            "sqlite3.Cursor.fetchone()"
        ],
        "APIClasses": [
            "sqlite3.Cursor"
        ],
        "OriginalQuery": "SQLite and Python, getting just text value from table",
        "Source": "Stack Overflow"
    },
    "1485": {
        "APIs": [
            "getattr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Django, How to access dynamically, related models of object",
        "Source": "Stack Overflow"
    },
    "1486": {
        "OriginalQuery": "How to zoom in cartopy",
        "Source": "Stack Overflow"
    },
    "1487": {
        "APIs": [
            "numpy.ndarray.flatten()"
        ],
        "APIClasses": [
            "numpy.ndarray"
        ],
        "OriginalQuery": "Adding an array to a numpy array",
        "Source": "Stack Overflow"
    },
    "1488": {
        "APIs": [
            "dict.get()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "How to get user selected value from SelectField in python Flask WTF?",
        "Source": "Stack Overflow"
    },
    "1489": {
        "OriginalQuery": "How do I turn a Pytorch Dataloader into a numpy array to display image data with matplotlib?",
        "Source": "Stack Overflow"
    },
    "1490": {
        "APIs": [
            "pandas.Index.tolist()"
        ],
        "APIClasses": [
            "pandas.Index"
        ],
        "OriginalQuery": "how to concatenate all rows of a column of a data frame in pandas without group by",
        "Source": "Stack Overflow"
    },
    "1491": {
        "APIs": [
            "pty.spawn()"
        ],
        "APIClasses": [
            "pty"
        ],
        "OriginalQuery": "Node Stream Ending: Write after end",
        "Source": "Stack Overflow"
    },
    "1492": {
        "APIs": [
            "str.replace()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python Remove Comma In Dollar Amount",
        "Source": "Stack Overflow"
    },
    "1493": {
        "APIs": [
            "input()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to run python script in Command Prompt Windows 10",
        "Source": "Stack Overflow"
    },
    "1494": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python: How do I calculate the sum of numbers from a file?",
        "Source": "Stack Overflow"
    },
    "1495": {
        "APIs": [
            "getattr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python - Iterate over a list of attributes",
        "Source": "Stack Overflow"
    },
    "1496": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "(Python) How can I convert a list of integers into a list of sets where each set is a pair of these integers?",
        "Source": "Stack Overflow"
    },
    "1497": {
        "APIs": [
            "django.urls.reverse()"
        ],
        "APIClasses": [
            "django.urls"
        ],
        "OriginalQuery": "Post to django view from another view",
        "Source": "Stack Overflow"
    },
    "1498": {
        "APIs": [
            "numpy.any()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "How to compare OpenCV image with color",
        "Source": "Stack Overflow"
    },
    "1499": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Iterate consecutive elements in a list in Python such that the last element combines with first",
        "Source": "Stack Overflow"
    },
    "1500": {
        "APIs": [
            "int.from_bytes()"
        ],
        "APIClasses": [
            "int"
        ],
        "OriginalQuery": "python convert a negative integer into byte(singed=True), but convert back, it becomes positive",
        "Source": "Stack Overflow"
    },
    "1501": {
        "OriginalQuery": "Python: Zip dict with keys",
        "Source": "Stack Overflow"
    },
    "1502": {
        "OriginalQuery": "How to save and reuse all settings for a keras model?",
        "Source": "Stack Overflow"
    },
    "1503": {
        "APIs": [
            "os.makedirs()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Elegant way to make all dirs in a path",
        "Source": "Stack Overflow"
    },
    "1504": {
        "OriginalQuery": "How to feed python lists into Tensorflow",
        "Source": "Stack Overflow"
    },
    "1505": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to edit filters list of a queryset",
        "Source": "Stack Overflow"
    },
    "1506": {
        "APIs": [
            "inspect.getsource()"
        ],
        "APIClasses": [
            "inspect"
        ],
        "OriginalQuery": "How to display definition of a class in Python",
        "Source": "Stack Overflow"
    },
    "1507": {
        "OriginalQuery": "How to avoid overlapping between plot titles and axis titles in histogram subplots in pandas?",
        "Source": "Stack Overflow"
    },
    "1508": {
        "APIs": [
            "str.index()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Finding first and last index of some value in a list in Python",
        "Source": "Stack Overflow"
    },
    "1509": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Accessing the index in 'for' loops?",
        "Source": "Stack Overflow"
    },
    "1510": {
        "APIs": [
            "pandas.DataFrame.apply()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Create new column in DataFrame from a conditional of a list",
        "Source": "Stack Overflow"
    },
    "1511": {
        "OriginalQuery": "Convert DatetimeIndex to datetime.date in pandas?",
        "Source": "Stack Overflow"
    },
    "1512": {
        "APIs": [
            "math.hypot()"
        ],
        "APIClasses": [
            "math"
        ],
        "OriginalQuery": "How do I find the distance between two points?",
        "Source": "Stack Overflow"
    },
    "1513": {
        "OriginalQuery": "Matplotlib - How to strip extra whitespaces from a plot without needing to save it?",
        "Source": "Stack Overflow"
    },
    "1514": {
        "APIs": [
            "urllib.parse.parse_qsl()"
        ],
        "APIClasses": [
            "urllib.parse"
        ],
        "OriginalQuery": "Fetching HTTP GET variables in Python",
        "Source": "Stack Overflow"
    },
    "1515": {
        "APIs": [
            "django.contrib.admin.register()"
        ],
        "APIClasses": [
            "django.contrib.admin"
        ],
        "OriginalQuery": "How to auto-generate a sample Django application from a database schema?",
        "Source": "Stack Overflow"
    },
    "1516": {
        "APIs": [
            "bytes.decode()"
        ],
        "APIClasses": [
            "bytes"
        ],
        "OriginalQuery": "How to convert a .png image to string and send it through Django API?",
        "Source": "Stack Overflow"
    },
    "1517": {
        "OriginalQuery": "How to sort pandas DataFrame with a key?",
        "Source": "Stack Overflow"
    },
    "1518": {
        "APIs": [
            "datetime.datetime.strptime()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "String to Datetime",
        "Source": "Stack Overflow"
    },
    "1519": {
        "OriginalQuery": "Django model method for saving values",
        "Source": "Stack Overflow"
    },
    "1520": {
        "APIs": [
            "curses.window.getmaxyx()"
        ],
        "APIClasses": [
            "curses.window"
        ],
        "OriginalQuery": "Updating window relating to terminal size",
        "Source": "Stack Overflow"
    },
    "1521": {
        "OriginalQuery": "convert splunk api curl command to python",
        "Source": "Stack Overflow"
    },
    "1522": {
        "APIs": [
            "id()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to get datastore name/id column value",
        "Source": "Stack Overflow"
    },
    "1523": {
        "APIs": [
            "list.sort()"
        ],
        "APIClasses": [
            "list"
        ],
        "OriginalQuery": "Sorting a list of strings numerically",
        "Source": "Stack Overflow"
    },
    "1524": {
        "APIs": [
            "format()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python: How do I use variables in a string pulled from a json file?",
        "Source": "Stack Overflow"
    },
    "1525": {
        "APIs": [
            "re.findall()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "In a list, how to separate each string (with mixed special characters) into a single character?",
        "Source": "Stack Overflow"
    },
    "1526": {
        "APIs": [
            "resource.getrusage()"
        ],
        "APIClasses": [
            "resource"
        ],
        "OriginalQuery": "In python, how do I get timing information like os.times() for a specific child process?",
        "Source": "Stack Overflow"
    },
    "1527": {
        "APIs": [
            "select.select()"
        ],
        "APIClasses": [
            "select"
        ],
        "OriginalQuery": "Find partial class names in spans with Beautiful Soup",
        "Source": "Stack Overflow"
    },
    "1528": {
        "APIs": [
            "pandas.DataFrame.stack()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Frequency distribution all values in dataframe",
        "Source": "Stack Overflow"
    },
    "1529": {
        "APIs": [
            "datetime.date.strftime()"
        ],
        "APIClasses": [
            "datetime.date"
        ],
        "OriginalQuery": "Pandas, convert datetime format mm/dd/yyyy to dd/mm/yyyy",
        "Source": "Stack Overflow"
    },
    "1530": {
        "OriginalQuery": "update or insert item based on existence in table dynamodb python",
        "Source": "Stack Overflow"
    },
    "1531": {
        "APIs": [
            "time.sleep()"
        ],
        "APIClasses": [
            "time"
        ],
        "OriginalQuery": "How to read line by line with delay?",
        "Source": "Stack Overflow"
    },
    "1532": {
        "APIs": [
            "pandas.DataFrame.join()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Unable to join pandas dataframe on string type",
        "Source": "Stack Overflow"
    },
    "1533": {
        "APIs": [
            "curses.window.getmaxyx()"
        ],
        "APIClasses": [
            "curses.window"
        ],
        "OriginalQuery": "get updated screen size in python curses",
        "Source": "Stack Overflow"
    },
    "1534": {
        "OriginalQuery": "Python3, how to check whether some dictionary value in list?",
        "Source": "Stack Overflow"
    },
    "1535": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "django list model entry with multiple references",
        "Source": "Stack Overflow"
    },
    "1536": {
        "APIs": [
            "datetime.datetime.strptime()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "Sorting nested python dictionary",
        "Source": "Stack Overflow"
    },
    "1537": {
        "OriginalQuery": "How to do K-means clustering for multiple images in certain directory and save it to another directory? (on local)",
        "Source": "Stack Overflow"
    },
    "1538": {
        "APIs": [
            "dict.items()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Sorting a dict based on one of the multiple values of key",
        "Source": "Stack Overflow"
    },
    "1539": {
        "APIs": [
            "pandas.merge()"
        ],
        "APIClasses": [
            "pandas"
        ],
        "OriginalQuery": "Pandas compare two columns and copy value of another column if there is a match only for first unique value",
        "Source": "Stack Overflow"
    },
    "1540": {
        "APIs": [
            "numpy.sum()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Numpy conditional arithmetic operations on two arrays",
        "Source": "Stack Overflow"
    },
    "1541": {
        "APIs": [
            "io.IOBase.readlines()"
        ],
        "APIClasses": [
            "io.IOBase"
        ],
        "OriginalQuery": "How do I read a text file as a string?",
        "Source": "Stack Overflow"
    },
    "1542": {
        "APIs": [
            "ord()"
        ],
        "APIClasses": [],
        "OriginalQuery": "convert b'\\x10\u2019 to int 16 in python",
        "Source": "Stack Overflow"
    },
    "1543": {
        "APIs": [
            "tobytes()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to convert memoryview to bytes?",
        "Source": "Stack Overflow"
    },
    "1544": {
        "APIs": [
            "ftplib.FTP.connect()"
        ],
        "APIClasses": [
            "ftplib.FTP"
        ],
        "OriginalQuery": "Python Socket Programming: Upload files from Client to Server",
        "Source": "Stack Overflow"
    },
    "1545": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Multiple queries in django ORM",
        "Source": "Stack Overflow"
    },
    "1546": {
        "APIs": [
            "str.lower()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python - How do you exit a program if a condition is met?",
        "Source": "Stack Overflow"
    },
    "1547": {
        "APIs": [
            "unittest.mock.patch()"
        ],
        "APIClasses": [
            "unittest.mock"
        ],
        "OriginalQuery": "How to patch a module's internal functions with mock?",
        "Source": "Stack Overflow"
    },
    "1548": {
        "APIs": [
            "numpy.empty()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Append value to each array in a numpy array",
        "Source": "Stack Overflow"
    },
    "1549": {
        "OriginalQuery": "How to turn the result (in python) of itertools.permutations(\"0123456789\") into list of strings",
        "Source": "Stack Overflow"
    },
    "1550": {
        "APIs": [
            "random.expovariate()"
        ],
        "APIClasses": [
            "random"
        ],
        "OriginalQuery": "Does Python's random module have a substitute for numpy.random.exponential?",
        "Source": "Stack Overflow"
    },
    "1551": {
        "APIs": [
            "os.listdir()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Python: Iterate through Files in Multiple Dictionaries",
        "Source": "Stack Overflow"
    },
    "1552": {
        "APIs": [
            "setattr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How can I add attributes to a module at run time?",
        "Source": "Stack Overflow"
    },
    "1553": {
        "OriginalQuery": "Which way is better to reset index in a pandas dataframe?",
        "Source": "Stack Overflow"
    },
    "1554": {
        "APIs": [
            "multiprocessing.Process.start()"
        ],
        "APIClasses": [
            "multiprocessing.Process"
        ],
        "OriginalQuery": "Multiprocessing in Python blocks when asked to run",
        "Source": "Stack Overflow"
    },
    "1555": {
        "APIs": [
            "numpy.ndarray.astype()"
        ],
        "APIClasses": [
            "numpy.ndarray"
        ],
        "OriginalQuery": "Numpy converting array from float to strings",
        "Source": "Stack Overflow"
    },
    "1556": {
        "APIs": [
            "pandas.Index.tolist()"
        ],
        "APIClasses": [
            "pandas.Index"
        ],
        "OriginalQuery": "Return Pandas multiindex as list of tuples?",
        "Source": "Stack Overflow"
    },
    "1557": {
        "OriginalQuery": "Flask SocketIO How To Setup Production Server?",
        "Source": "Stack Overflow"
    },
    "1558": {
        "APIs": [
            "pandas.Series.where"
        ],
        "APIClasses": [
            "pandas.Series"
        ],
        "OriginalQuery": "How to change values in specific rows depending on given condition in pandas?",
        "Source": "Stack Overflow"
    },
    "1559": {
        "OriginalQuery": "PySpark: How to Convert UTC Timestamp Field to CST (US/Central) Keeping Timestamp Datatype",
        "Source": "Stack Overflow"
    },
    "1560": {
        "APIs": [
            "dict.values()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Django - How to display parent model property in template",
        "Source": "Stack Overflow"
    },
    "1561": {
        "OriginalQuery": "How to have an integer in a filename (python)",
        "Source": "Stack Overflow"
    },
    "1562": {
        "APIs": [
            "str.upper()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Replacing values of categorical Variable in pandas dataframe",
        "Source": "Stack Overflow"
    },
    "1563": {
        "APIs": [
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Array: Insert with negative index",
        "Source": "Stack Overflow"
    },
    "1564": {
        "APIs": [
            "base64.b64encode()"
        ],
        "APIClasses": [
            "base64"
        ],
        "OriginalQuery": "Encoding and decoding binary data for inclusion into JSON with Python 3",
        "Source": "Stack Overflow"
    },
    "1565": {
        "APIs": [
            "random.randrange()"
        ],
        "APIClasses": [
            "random"
        ],
        "OriginalQuery": "python random.randint generate 0-100 on increments of 5",
        "Source": "Stack Overflow"
    },
    "1566": {
        "APIs": [
            "numpy.extract()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Extract values that satisfy a condition from numpy array",
        "Source": "Stack Overflow"
    },
    "1567": {
        "OriginalQuery": "Formatting strings to csv",
        "Source": "Stack Overflow"
    },
    "1568": {
        "OriginalQuery": "Python convert the day of year to month on an axis",
        "Source": "Stack Overflow"
    },
    "1569": {
        "APIs": [
            "numpy.intersect1d()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Intersection of two or more DataFrame columns",
        "Source": "Stack Overflow"
    },
    "1570": {
        "APIs": [
            "django.db.models.query.QuerySet.values_list()"
        ],
        "APIClasses": [
            "django.db.models.query.QuerySet"
        ],
        "OriginalQuery": "Generate iterable choices tuple from model class in Django",
        "Source": "Stack Overflow"
    },
    "1571": {
        "APIs": [
            "re.split()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python: how to split a string by a delimiter that is invalid <0x0c>",
        "Source": "Stack Overflow"
    },
    "1572": {
        "APIs": [
            "json.dumps()"
        ],
        "APIClasses": [
            "json"
        ],
        "OriginalQuery": "Python convert HTML table to json",
        "Source": "Stack Overflow"
    },
    "1573": {
        "OriginalQuery": "How to convert a pytorch tensor into a numpy array?",
        "Source": "Stack Overflow"
    },
    "1574": {
        "APIs": [
            "hash()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python: Test if dictionary (dict) entry has been modified",
        "Source": "Stack Overflow"
    },
    "1575": {
        "APIs": [
            "ord()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python ASCII values of a string",
        "Source": "Stack Overflow"
    },
    "1576": {
        "OriginalQuery": "Python code to animate a rotating fan to appear in place",
        "Source": "Stack Overflow"
    },
    "1577": {
        "OriginalQuery": "Python Curses Refreshing Text With a Loop",
        "Source": "Stack Overflow"
    },
    "1578": {
        "OriginalQuery": "prevent flask reload on change",
        "Source": "Stack Overflow"
    },
    "1579": {
        "OriginalQuery": "Add integer to an array in Python",
        "Source": "Stack Overflow"
    },
    "1580": {
        "APIs": [
            "numpy.argsort()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Numpy get index of row with second-largest value",
        "Source": "Stack Overflow"
    },
    "1581": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How do I write a code that uses the accumulation pattern to take the sum of all of the numbers and assigns it to an int?",
        "Source": "Stack Overflow"
    },
    "1582": {
        "APIs": [
            "statistics.mean()"
        ],
        "APIClasses": [
            "statistics"
        ],
        "OriginalQuery": "Numpy - Normalize RGB image dataset",
        "Source": "Stack Overflow"
    },
    "1583": {
        "APIs": [
            "xml.etree.ElementTree.Element.find()"
        ],
        "APIClasses": [
            "xml.etree.ElementTree.Element"
        ],
        "OriginalQuery": "BeautifulSoup: How to extract text encapsulated in multiple div/span/id tags",
        "Source": "Stack Overflow"
    },
    "1584": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "checking type of range in python's typing module",
        "Source": "Stack Overflow"
    },
    "1585": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to remove unique rows in pandas dataframe",
        "Source": "Stack Overflow"
    },
    "1586": {
        "APIs": [
            "pickle.load()"
        ],
        "APIClasses": [
            "pickle"
        ],
        "OriginalQuery": "How to save and reload pickled data to/from a tkinter Entry box?",
        "Source": "Stack Overflow"
    },
    "1587": {
        "OriginalQuery": "How can I convert bytes to string In Tensorflow",
        "Source": "Stack Overflow"
    },
    "1588": {
        "OriginalQuery": "Every time an user adds post his info gets repeated. How do I prevent that?",
        "Source": "Stack Overflow"
    },
    "1589": {
        "APIs": [
            "sqlite3.Cursor.fetchall()"
        ],
        "APIClasses": [
            "sqlite3.Cursor"
        ],
        "OriginalQuery": "How do I find duplicates within a database and how do I execute a response?",
        "Source": "Stack Overflow"
    },
    "1590": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Numpy: two dimensional arrays, delete the odd indexes and keep the same array format",
        "Source": "Stack Overflow"
    },
    "1591": {
        "OriginalQuery": "Python- How sort matrix",
        "Source": "Stack Overflow"
    },
    "1592": {
        "APIs": [
            "DataFrame.apply()"
        ],
        "APIClasses": [
            "DataFrame"
        ],
        "OriginalQuery": "Finding the column names of a pandas DataFrame where row values are minimum",
        "Source": "Stack Overflow"
    },
    "1593": {
        "OriginalQuery": "pandas: How to groupby and show count of unique values",
        "Source": "Stack Overflow"
    },
    "1594": {
        "APIs": [
            "globals()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Create dynamic dataframe name by splitting a larger dataframe",
        "Source": "Stack Overflow"
    },
    "1595": {
        "OriginalQuery": "How to calculate Average of n numpy arrays",
        "Source": "Stack Overflow"
    },
    "1596": {
        "APIs": [
            "json.loads()"
        ],
        "APIClasses": [
            "json"
        ],
        "OriginalQuery": "How do I check if a string is valid JSON in Python?",
        "Source": "Stack Overflow"
    },
    "1597": {
        "APIs": [
            "re.findall()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Extract names from string with python Regex",
        "Source": "Stack Overflow"
    },
    "1598": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to get the length of the longest string in a nested list of strings?",
        "Source": "Stack Overflow"
    },
    "1599": {
        "APIs": [
            "numpy.matrix.max()"
        ],
        "APIClasses": [
            "numpy.matrix"
        ],
        "OriginalQuery": "How to normalize Perlin Noise Values to range [0, 1]?",
        "Source": "Stack Overflow"
    },
    "1600": {
        "APIs": [
            "ndarray.tolist()"
        ],
        "APIClasses": [
            "ndarray"
        ],
        "OriginalQuery": "How to transform pandas.core.series.Series to list?",
        "Source": "Stack Overflow"
    },
    "1601": {
        "OriginalQuery": "How to find a word - First letter will be capital & other will be lower",
        "Source": "Stack Overflow"
    },
    "1602": {
        "OriginalQuery": "How to filter a pandas column by list of strings?",
        "Source": "Stack Overflow"
    },
    "1603": {
        "APIs": [
            "format()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python output: how to remove indent of a new line?",
        "Source": "Stack Overflow"
    },
    "1604": {
        "OriginalQuery": "How to specify an input with a list of arrays to Embedding layer in Keras?",
        "Source": "Stack Overflow"
    },
    "1605": {
        "APIs": [
            "numpy.random.randint()"
        ],
        "APIClasses": [
            "numpy.random"
        ],
        "OriginalQuery": "Generate a matrix without 0 values in a random way",
        "Source": "Stack Overflow"
    },
    "1606": {
        "APIs": [
            "pandas.Series.groupby()"
        ],
        "APIClasses": [
            "pandas.Series"
        ],
        "OriginalQuery": "Pandas cumsum + cumcount on multiple columns",
        "Source": "Stack Overflow"
    },
    "1607": {
        "APIs": [
            "tkinter.ttk.Treeview.xview()"
        ],
        "APIClasses": [
            "tkinter.ttk.Treeview"
        ],
        "OriginalQuery": "Tkinter how to detect if text widget content is too long?",
        "Source": "Stack Overflow"
    },
    "1608": {
        "APIs": [
            "binascii.a2b_hex()"
        ],
        "APIClasses": [
            "binascii"
        ],
        "OriginalQuery": "CRC32 checksum in Python with hex input",
        "Source": "Stack Overflow"
    },
    "1609": {
        "APIs": [
            "attachment.SaveAsFile()"
        ],
        "APIClasses": [
            "attachment"
        ],
        "OriginalQuery": "Use python to connect to outlook and read emails and attachments then write them to an output file",
        "Source": "Stack Overflow"
    },
    "1610": {
        "APIs": [
            "datetime.datetime.timestamp()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "How to get execution_date as epoch time?",
        "Source": "Stack Overflow"
    },
    "1611": {
        "APIs": [
            "str.isdigit()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How to tell if string starts with a number with Python?",
        "Source": "Stack Overflow"
    },
    "1612": {
        "APIs": [
            "xml.etree.ElementTree.Element.keys()"
        ],
        "APIClasses": [
            "xml.etree.ElementTree.Element"
        ],
        "OriginalQuery": "How to scrape youtube videos to get more videos than on one page?",
        "Source": "Stack Overflow"
    },
    "1613": {
        "APIs": [
            "math.isnan()"
        ],
        "APIClasses": [
            "math"
        ],
        "OriginalQuery": "Pandas - How to identify nans while inside the apply function?",
        "Source": "Stack Overflow"
    },
    "1614": {
        "APIs": [
            "float.hex()"
        ],
        "APIClasses": [
            "float"
        ],
        "OriginalQuery": "Convert numpy array of float32 data type to hex format",
        "Source": "Stack Overflow"
    },
    "1615": {
        "APIs": [
            "idk"
        ],
        "APIClasses": [],
        "OriginalQuery": "converting IPv6 string to bytes + python",
        "Source": "Stack Overflow"
    },
    "1616": {
        "APIs": [
            "pandas.Series.str.contains()"
        ],
        "APIClasses": [
            "pandas.Series.str"
        ],
        "OriginalQuery": "How to exclude and filter few columns in pandas?",
        "Source": "Stack Overflow"
    },
    "1617": {
        "APIs": [
            "datetime.date.replace()"
        ],
        "APIClasses": [
            "datetime.date"
        ],
        "OriginalQuery": "Reset pandas Timestamp to first day of month",
        "Source": "Stack Overflow"
    },
    "1618": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How do you construct an array suitable for numpy sorting?",
        "Source": "Stack Overflow"
    },
    "1619": {
        "APIs": [
            "str.isdigit()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python: Test if value can be converted to an int in a list comprehension",
        "Source": "Stack Overflow"
    },
    "1620": {
        "APIs": [
            "base64.b64encode()"
        ],
        "APIClasses": [
            "base64"
        ],
        "OriginalQuery": "How to show a blob image on HTML page in Django?",
        "Source": "Stack Overflow"
    },
    "1621": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Convert a Pandas dataframe cell to list",
        "Source": "Stack Overflow"
    },
    "1622": {
        "APIs": [
            "os.open()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Write file with specific permissions in Python",
        "Source": "Stack Overflow"
    },
    "1623": {
        "OriginalQuery": "How to give column names after one-hot encoding with sklearn?",
        "Source": "Stack Overflow"
    },
    "1624": {
        "APIs": [
            "flask.Request.get_data()"
        ],
        "APIClasses": [
            "flask.Request"
        ],
        "OriginalQuery": "Extracting Data from Ajax Request in Python",
        "Source": "Stack Overflow"
    },
    "1625": {
        "APIs": [
            "hex()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to convert DWORD to string in Python",
        "Source": "Stack Overflow"
    },
    "1626": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "pandas DataFrame: how to sentence into words and select rows that have more than 10 words?",
        "Source": "Stack Overflow"
    },
    "1627": {
        "OriginalQuery": "How to write a new row in an existing csv file without appending it in the last line?",
        "Source": "Stack Overflow"
    },
    "1628": {
        "OriginalQuery": "I have a string that contains the path to a file, how to change the path",
        "Source": "Stack Overflow"
    },
    "1629": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Is there a python builtin to create tuples from multiple lists?",
        "Source": "Stack Overflow"
    },
    "1630": {
        "APIs": [
            "os.popen()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "How to capture command-line output with python logging?",
        "Source": "Stack Overflow"
    },
    "1631": {
        "APIs": [
            "datetime.date.timetuple()"
        ],
        "APIClasses": [
            "datetime.date"
        ],
        "OriginalQuery": "How do I convert a datetime.date object into a time.struct_time object?",
        "Source": "Stack Overflow"
    },
    "1632": {
        "APIs": [
            "base64.decode()"
        ],
        "APIClasses": [
            "base64"
        ],
        "OriginalQuery": "How to convert a string variable with special characters in Python to print properly",
        "Source": "Stack Overflow"
    },
    "1633": {
        "APIs": [
            "xml.etree.ElementTree.Element.find()"
        ],
        "APIClasses": [
            "xml.etree.ElementTree.Element"
        ],
        "OriginalQuery": "Getting the first element of a bs4.element.ResultSet object",
        "Source": "Stack Overflow"
    },
    "1634": {
        "APIs": [
            "numpy.frombuffer()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Binary List to PNG in Python",
        "Source": "Stack Overflow"
    },
    "1635": {
        "APIs": [
            "pandas.DataFrame.set_index()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "How to drop the first row number column pandas?",
        "Source": "Stack Overflow"
    },
    "1636": {
        "OriginalQuery": "How to get src attribute from <image/> with Python",
        "Source": "Stack Overflow"
    },
    "1637": {
        "OriginalQuery": "Sum two columns of a numpy array and add it as a third column of the array",
        "Source": "Stack Overflow"
    },
    "1638": {
        "APIs": [
            "os.path.basename()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "How to read each file from a folder and create seperate data frames for each file?",
        "Source": "Stack Overflow"
    },
    "1639": {
        "APIs": [
            "Image.tobytes()"
        ],
        "APIClasses": [
            "Image"
        ],
        "OriginalQuery": "How to display Images loaded with Pillow with Pygame in Python 3.7?",
        "Source": "Stack Overflow"
    },
    "1640": {
        "APIs": [
            "socket.socketpair()"
        ],
        "APIClasses": [
            "socket"
        ],
        "OriginalQuery": "How to Detect in Sub Process When Parent Process Has Died?",
        "Source": "Stack Overflow"
    },
    "1641": {
        "OriginalQuery": "How do you pass default values to payload in flask-restplus?",
        "Source": "Stack Overflow"
    },
    "1642": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Please how do i sum up all the integer elements from a sqlite3 table row",
        "Source": "Stack Overflow"
    },
    "1643": {
        "APIs": [
            "functools.partial()"
        ],
        "APIClasses": [
            "functools"
        ],
        "OriginalQuery": "passing arguments to a callback function in Python",
        "Source": "Stack Overflow"
    },
    "1644": {
        "APIs": [
            "dict.pop()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Best method to delete an item from a dict",
        "Source": "Stack Overflow"
    },
    "1645": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to delete first N items from queryset in django",
        "Source": "Stack Overflow"
    },
    "1646": {
        "APIs": [
            "datetime.datetime.strftime()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "Pandas - How to convert string with spaces to timestamp?",
        "Source": "Stack Overflow"
    },
    "1647": {
        "APIs": [
            "sqlite3.Connection.cursor()"
        ],
        "APIClasses": [
            "sqlite3.Connection"
        ],
        "OriginalQuery": "Overriding a python instance method in a external library",
        "Source": "Stack Overflow"
    },
    "1648": {
        "OriginalQuery": "numpy create a boolean array of False",
        "Source": "Stack Overflow"
    },
    "1649": {
        "APIs": [
            "int.from_bytes()"
        ],
        "APIClasses": [
            "int"
        ],
        "OriginalQuery": "How do I convert a byte to an integer in python when it has the byte markers attached?",
        "Source": "Stack Overflow"
    },
    "1650": {
        "APIs": [
            "unicodedata.normalize()"
        ],
        "APIClasses": [
            "unicodedata"
        ],
        "OriginalQuery": "Converting text containing COMBINING DIAERESIS to utf-8",
        "Source": "Stack Overflow"
    },
    "1651": {
        "OriginalQuery": "In Python, how do I add all the elements of a list to a set?",
        "Source": "Stack Overflow"
    },
    "1652": {
        "APIs": [
            "tf.sparse.reorder()"
        ],
        "APIClasses": [
            "tf.sparse"
        ],
        "OriginalQuery": "How to convert SparseTensorValue to numpy array?",
        "Source": "Stack Overflow"
    },
    "1653": {
        "APIs": [
            "format()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How do I custom format a pandas integer column to display with commas as thousands separators?",
        "Source": "Stack Overflow"
    },
    "1654": {
        "APIs": [
            "logging.getLogger()"
        ],
        "APIClasses": [
            "logging"
        ],
        "OriginalQuery": "Python logger ignores FileHandler and StreamHandler levels in class",
        "Source": "Stack Overflow"
    },
    "1655": {
        "APIs": [
            "DataFrame.shift()"
        ],
        "APIClasses": [
            "DataFrame"
        ],
        "OriginalQuery": "Replace string value with previous row value based on conditionals - Pandas",
        "Source": "Stack Overflow"
    },
    "1656": {
        "OriginalQuery": "Python, How to divide a data-frame in two new data-frames",
        "Source": "Stack Overflow"
    },
    "1657": {
        "APIs": [
            "dict.items()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Iterate over keys and all values in MultiDict",
        "Source": "Stack Overflow"
    },
    "1658": {
        "OriginalQuery": "Plotly: How to set line color?",
        "Source": "Stack Overflow"
    },
    "1659": {
        "APIs": [
            "eval()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Create pandas dfs in for loop",
        "Source": "Stack Overflow"
    },
    "1660": {
        "APIs": [
            "math.sqrt()"
        ],
        "APIClasses": [
            "math"
        ],
        "OriginalQuery": "best algorithm for finding distance for all pairs where edges' weight is 1",
        "Source": "Stack Overflow"
    },
    "1661": {
        "APIs": [
            "numpy.any()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Find array item in a string",
        "Source": "Stack Overflow"
    },
    "1662": {
        "OriginalQuery": "Python 3 : How to create a list of lists based on the range function",
        "Source": "Stack Overflow"
    },
    "1663": {
        "APIs": [
            "str.join()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python -- how to use sum function on column of list values without unintentional concatenation",
        "Source": "Stack Overflow"
    },
    "1664": {
        "APIs": [
            "tarfile.TarFile.list()"
        ],
        "APIClasses": [
            "tarfile.TarFile"
        ],
        "OriginalQuery": "How does collections.defaultdict work?",
        "Source": "Stack Overflow"
    },
    "1665": {
        "APIs": [
            "os.sendfile()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "How can I return a json of files with python flask-restfull?",
        "Source": "Stack Overflow"
    },
    "1666": {
        "OriginalQuery": "How to print a dictionary's key?",
        "Source": "Stack Overflow"
    },
    "1667": {
        "APIs": [
            "locale.setlocale()"
        ],
        "APIClasses": [
            "locale"
        ],
        "OriginalQuery": "How to have float format with comma as a decimal separator in Python Pandas?",
        "Source": "Stack Overflow"
    },
    "1668": {
        "OriginalQuery": "Getting a set of values from a dictionary of sets",
        "Source": "Stack Overflow"
    },
    "1669": {
        "OriginalQuery": "Empty column name in first column, how do I set the name?",
        "Source": "Stack Overflow"
    },
    "1670": {
        "APIs": [
            "os.getenv()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Get Changed Environment Variable in Python",
        "Source": "Stack Overflow"
    },
    "1671": {
        "APIs": [
            "select.select()"
        ],
        "APIClasses": [
            "select"
        ],
        "OriginalQuery": "Python Equivalent to Javascript querySelector",
        "Source": "Stack Overflow"
    },
    "1672": {
        "APIs": [
            "Generator.bytes()"
        ],
        "APIClasses": [
            "Generator"
        ],
        "OriginalQuery": "How to do a safe binary comparison in Python?",
        "Source": "Stack Overflow"
    },
    "1673": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How do I pass a color image through a Pytorch convolutional layer with custom filter?",
        "Source": "Stack Overflow"
    },
    "1674": {
        "APIs": [
            "str.replace()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python - Sensor Data includes unwanted symbols - how to achieve a clean dataset?",
        "Source": "Stack Overflow"
    },
    "1675": {
        "APIs": [
            "inspect.ismethod()"
        ],
        "APIClasses": [
            "inspect"
        ],
        "OriginalQuery": "Check if a function is a method of some object",
        "Source": "Stack Overflow"
    },
    "1676": {
        "OriginalQuery": "Python - How to quickly pull several attributes from an object?",
        "Source": "Stack Overflow"
    },
    "1677": {
        "APIs": [
            "wave.Wave_read.close()"
        ],
        "APIClasses": [
            "wave.Wave_read"
        ],
        "OriginalQuery": "How to save all user input from for loop into text file",
        "Source": "Stack Overflow"
    },
    "1678": {
        "APIs": [
            "str.replace()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python how to strip end colons of a string in dataframe",
        "Source": "Stack Overflow"
    },
    "1679": {
        "OriginalQuery": "Reading fortran double precision format into python",
        "Source": "Stack Overflow"
    },
    "1680": {
        "OriginalQuery": "Fastest way to search a list in python",
        "Source": "Stack Overflow"
    },
    "1681": {
        "APIs": [
            "subprocess.call()"
        ],
        "APIClasses": [
            "subprocess"
        ],
        "OriginalQuery": "How to read argv value without escape the string?",
        "Source": "Stack Overflow"
    },
    "1682": {
        "OriginalQuery": "Scrapy: How to get address using CSS and XPath?",
        "Source": "Stack Overflow"
    },
    "1683": {
        "APIs": [
            "itertools.count()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "how do you find and count how many of a specific slice of a string exists in a variable string?",
        "Source": "Stack Overflow"
    },
    "1684": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Pandas - How to remove duplicates based on another series?",
        "Source": "Stack Overflow"
    },
    "1685": {
        "APIs": [
            "django.urls.path()"
        ],
        "APIClasses": [
            "django.urls"
        ],
        "OriginalQuery": "How to write re_path url in django for reading special character?",
        "Source": "Stack Overflow"
    },
    "1686": {
        "APIs": [
            "str.format()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "how to create a string variable from multiple object attributes in python? how to calculate geographic distances?",
        "Source": "Stack Overflow"
    },
    "1687": {
        "OriginalQuery": "Python, how to sort dataframe by string column in ascending",
        "Source": "Stack Overflow"
    },
    "1688": {
        "APIs": [
            "inspect.getargvalues()"
        ],
        "APIClasses": [
            "inspect"
        ],
        "OriginalQuery": "How to get value of arguments passed to functions on the stack?",
        "Source": "Stack Overflow"
    },
    "1689": {
        "APIs": [
            "math.nextafter()"
        ],
        "APIClasses": [
            "math"
        ],
        "OriginalQuery": "Increment a Python floating point value by the smallest possible amount",
        "Source": "Stack Overflow"
    },
    "1690": {
        "APIs": [
            "re.sub()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python/ElementTree: Write to file without namespaces",
        "Source": "Stack Overflow"
    },
    "1691": {
        "OriginalQuery": "Django - How to display a attribut (name) from forgeinKey object?",
        "Source": "Stack Overflow"
    },
    "1692": {
        "APIs": [
            "asyncio.get_event_loop()"
        ],
        "APIClasses": [
            "asyncio"
        ],
        "OriginalQuery": "Python asyncio - How to create task list and use it in the event loop?",
        "Source": "Stack Overflow"
    },
    "1693": {
        "APIs": [
            "imaplib.IMAP4.check()"
        ],
        "APIClasses": [
            "imaplib.IMAP4"
        ],
        "OriginalQuery": "Checking A PyObjects C Type",
        "Source": "Stack Overflow"
    },
    "1694": {
        "APIs": [
            "hasattr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to know if an object has an attribute in Python",
        "Source": "Stack Overflow"
    },
    "1695": {
        "APIs": [
            "base64.decode()"
        ],
        "APIClasses": [
            "base64"
        ],
        "OriginalQuery": "Python Convert an IP address encoded in Base64 to a Decimal IP address",
        "Source": "Stack Overflow"
    },
    "1696": {
        "OriginalQuery": "Python How to convert the numpy array(dtype=uint16) to a string?",
        "Source": "Stack Overflow"
    },
    "1697": {
        "OriginalQuery": "python: Detecting a negative number within a string",
        "Source": "Stack Overflow"
    },
    "1698": {
        "APIs": [
            "dict.get()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Python: How to check key existence in a nested structure?",
        "Source": "Stack Overflow"
    },
    "1699": {
        "OriginalQuery": "matplotlib and pandas - how do I turn Q1 2015, Q2 2015, etc. into values on the X axis?",
        "Source": "Stack Overflow"
    },
    "1700": {
        "OriginalQuery": "How to log directly to s3 in python",
        "Source": "Stack Overflow"
    },
    "1701": {
        "APIs": [
            "open()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Correct way to write line to file?",
        "Source": "Stack Overflow"
    },
    "1702": {
        "APIs": [
            "list.sort()"
        ],
        "APIClasses": [
            "list"
        ],
        "OriginalQuery": "Split list into N sublists with approximately equal sums",
        "Source": "Stack Overflow"
    },
    "1703": {
        "APIs": [
            "chr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "In Python 3.8.2, how do I convert a string that contains a '\\uxxxx' sequence into utf-8?",
        "Source": "Stack Overflow"
    },
    "1704": {
        "APIs": [
            "base64.decode()"
        ],
        "APIClasses": [
            "base64"
        ],
        "OriginalQuery": "Writing UTF-8 String to MySQL with Python",
        "Source": "Stack Overflow"
    },
    "1705": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "From a list of many dataframes. How can i get the df with the max and min lenght?",
        "Source": "Stack Overflow"
    },
    "1706": {
        "OriginalQuery": "Matplotlib : How to plot two bar plots with the same x/y axes but one start over the other along y axis",
        "Source": "Stack Overflow"
    },
    "1707": {
        "OriginalQuery": "SQL TIMESTAMP DEFAULT CURRENT TIMESTAMP: How to remove miliseconds?",
        "Source": "Stack Overflow"
    },
    "1708": {
        "APIs": [
            "os.path.expanduser()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "Finding the user's \"My Documents\" path",
        "Source": "Stack Overflow"
    },
    "1709": {
        "APIs": [
            "str.strip()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Reading lines from text file in python (windows)",
        "Source": "Stack Overflow"
    },
    "1710": {
        "APIs": [
            "datetime.datetime.strftime()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "Pandas - how to convert \"hh:mm:ss PM\" string to 24-hour timestamp",
        "Source": "Stack Overflow"
    },
    "1711": {
        "APIs": [
            "decimal.Decimal.shift()"
        ],
        "APIClasses": [
            "decimal.Decimal"
        ],
        "OriginalQuery": "Using Python pandas, how do I create a function to calculate the proportion of rows that represent a lower value than the previous row?",
        "Source": "Stack Overflow"
    },
    "1712": {
        "APIs": [
            "subprocess.Popen.communicate()"
        ],
        "APIClasses": [
            "subprocess.Popen"
        ],
        "OriginalQuery": "Getting the output of a python subprocess",
        "Source": "Stack Overflow"
    },
    "1713": {
        "OriginalQuery": "Pandas column of lists: How to get the average, max length, and standard deviation of the list lengths of that column",
        "Source": "Stack Overflow"
    },
    "1714": {
        "APIs": [
            "logging.getLogger()"
        ],
        "APIClasses": [
            "logging"
        ],
        "OriginalQuery": "Python - How to disable logging from a module imported from the parent directory?",
        "Source": "Stack Overflow"
    },
    "1715": {
        "APIs": [
            "itertools.groupby()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "split a list by a lambda function in python",
        "Source": "Stack Overflow"
    },
    "1716": {
        "APIs": [
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to append to the end of an empty list?",
        "Source": "Stack Overflow"
    },
    "1717": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python: How to convert a set of strings that contains commas represented as an element of a list to a sub-list?",
        "Source": "Stack Overflow"
    },
    "1718": {
        "APIs": [
            "dict.keys()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Sorting a dict with tuples as values",
        "Source": "Stack Overflow"
    },
    "1719": {
        "APIs": [
            "uu.encode()"
        ],
        "APIClasses": [
            "uu"
        ],
        "OriginalQuery": "How to get rid of non-ascii characters in Perl & Python [both]?",
        "Source": "Stack Overflow"
    },
    "1720": {
        "APIs": [
            "print()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How can I set max line length in vscode for python?",
        "Source": "Stack Overflow"
    },
    "1721": {
        "OriginalQuery": "Pandas - How to get the number of occurrences for each value in a column",
        "Source": "Stack Overflow"
    },
    "1722": {
        "OriginalQuery": "Python how to convert capnproto to json?",
        "Source": "Stack Overflow"
    },
    "1723": {
        "APIs": [
            "json.loads()"
        ],
        "APIClasses": [
            "json"
        ],
        "OriginalQuery": "How to extract data from JSON Object in Python?",
        "Source": "Stack Overflow"
    },
    "1724": {
        "APIs": [
            "str.join()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Is there a python version of JavaScript's String.fromCharCode?",
        "Source": "Stack Overflow"
    },
    "1725": {
        "APIs": [
            "str.splitlines()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python how to get last N lines of a multiline string",
        "Source": "Stack Overflow"
    },
    "1726": {
        "APIs": [
            "pickle.dumps()"
        ],
        "APIClasses": [
            "pickle"
        ],
        "OriginalQuery": "String to Object in Python",
        "Source": "Stack Overflow"
    },
    "1727": {
        "APIs": [
            "xml.etree.ElementTree.tostring()"
        ],
        "APIClasses": [
            "xml.etree.ElementTree"
        ],
        "OriginalQuery": "How do i parse a string in python and write it as an xml to a new xml file?",
        "Source": "Stack Overflow"
    },
    "1728": {
        "APIs": [
            "Series.isna()"
        ],
        "APIClasses": [
            "Series"
        ],
        "OriginalQuery": "Python : How can I check if the content of one entire column of a Dataframe is empty?",
        "Source": "Stack Overflow"
    },
    "1729": {
        "OriginalQuery": "Python/Django - *args as list",
        "Source": "Stack Overflow"
    },
    "1730": {
        "OriginalQuery": "Beautifulsoup how to select all the 'a' tags",
        "Source": "Stack Overflow"
    },
    "1731": {
        "OriginalQuery": "Python - how to split a file object up into a list of individual characters?",
        "Source": "Stack Overflow"
    },
    "1732": {
        "OriginalQuery": "Pandas - How to parallelize for loop execution on sub-sets of data",
        "Source": "Stack Overflow"
    },
    "1733": {
        "APIs": [
            "re.Match.group()"
        ],
        "APIClasses": [
            "re.Match"
        ],
        "OriginalQuery": "How do I get matched characters from Python regex?",
        "Source": "Stack Overflow"
    },
    "1734": {
        "OriginalQuery": "Pandas: how to remove duplicate indexes resulting from concatenated data frames?",
        "Source": "Stack Overflow"
    },
    "1735": {
        "APIs": [
            "datetime.date.replace()"
        ],
        "APIClasses": [
            "datetime.date"
        ],
        "OriginalQuery": "How to optimally update cells based on previous cell value / How to elegantly spread values of cell to other cells?",
        "Source": "Stack Overflow"
    },
    "1736": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Automatically process numbers in e (scientific) notation in python",
        "Source": "Stack Overflow"
    },
    "1737": {
        "APIs": [
            "json.load()"
        ],
        "APIClasses": [
            "json"
        ],
        "OriginalQuery": "FastAPI - How to read an json file while using UploadFile",
        "Source": "Stack Overflow"
    },
    "1738": {
        "APIs": [
            "itertools.product()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "The pythonic way to generate pairs",
        "Source": "Stack Overflow"
    },
    "1739": {
        "APIs": [
            "re.compile()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python re: how to set a limit to how many times a pattern is repeated",
        "Source": "Stack Overflow"
    },
    "1740": {
        "APIs": [
            "time.sleep()"
        ],
        "APIClasses": [
            "time"
        ],
        "OriginalQuery": "Python / Selenium - how do i stay signed in after calling a second driver.get()?",
        "Source": "Stack Overflow"
    },
    "1741": {
        "APIs": [
            "copy.copy()"
        ],
        "APIClasses": [
            "copy"
        ],
        "OriginalQuery": "How to make a copy of a 2D array in Python?",
        "Source": "Stack Overflow"
    },
    "1742": {
        "APIs": [
            "asyncio.asyncio.subprocess.Process.terminate()"
        ],
        "APIClasses": [
            "asyncio.asyncio.subprocess.Process"
        ],
        "OriginalQuery": "Python Multiprocessing: How to close parent if child closes?",
        "Source": "Stack Overflow"
    },
    "1743": {
        "APIs": [
            "os.killpg()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "how to kill process and child processes from python?",
        "Source": "Stack Overflow"
    },
    "1744": {
        "APIs": [
            "format()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python how to round float down to 3 decimal places?",
        "Source": "Stack Overflow"
    },
    "1745": {
        "APIs": [
            "readline.get_current_history_length()"
        ],
        "APIClasses": [
            "readline"
        ],
        "OriginalQuery": "How do you see the entire command history in interactive Python?",
        "Source": "Stack Overflow"
    },
    "1746": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to get the dictionary with the highest value in a list of dicts",
        "Source": "Stack Overflow"
    },
    "1747": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to find how many words are in a file",
        "Source": "Stack Overflow"
    },
    "1748": {
        "APIs": [
            "pickle.dump()"
        ],
        "APIClasses": [
            "pickle"
        ],
        "OriginalQuery": "How do I write a write() method in a pkl file that I can use in my python scrpits?",
        "Source": "Stack Overflow"
    },
    "1749": {
        "APIs": [
            "os.path.splitext()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "Checking file attributes in python",
        "Source": "Stack Overflow"
    },
    "1750": {
        "APIs": [
            "types.MappingProxyType.keys()"
        ],
        "APIClasses": [
            "types.MappingProxyType"
        ],
        "OriginalQuery": "Is there a more elegant way for unpacking keys and values of a dictionary into two lists, without losing consistence?",
        "Source": "Stack Overflow"
    },
    "1751": {
        "APIs": [
            "str.replace()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How can I convert a string with dot and comma into a float in Python",
        "Source": "Stack Overflow"
    },
    "1752": {
        "APIs": [
            "chr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python regexp for data of byte numbers",
        "Source": "Stack Overflow"
    },
    "1753": {
        "APIs": [
            "logging.Handler.setFormatter()"
        ],
        "APIClasses": [
            "logging.Handler"
        ],
        "OriginalQuery": "python logging string formatting",
        "Source": "Stack Overflow"
    },
    "1754": {
        "APIs": [
            "os.listdir()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Case sensitive path comparison in python",
        "Source": "Stack Overflow"
    },
    "1755": {
        "APIs": [
            "os.execv()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Replace current process with invocation of subprocess?",
        "Source": "Stack Overflow"
    },
    "1756": {
        "APIs": [
            "re.sub()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Replace \\\\ with / Python",
        "Source": "Stack Overflow"
    },
    "1757": {
        "OriginalQuery": "Python: Convert Unicode-Hex-String to Unicode",
        "Source": "Stack Overflow"
    },
    "1758": {
        "APIs": [
            "pandas.DataFrame.items()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Modifying a Python dict while iterating over it",
        "Source": "Stack Overflow"
    },
    "1759": {
        "APIs": [
            "fileinput.input()"
        ],
        "APIClasses": [
            "fileinput"
        ],
        "OriginalQuery": "Python: replace a string by a float in txt file",
        "Source": "Stack Overflow"
    },
    "1760": {
        "OriginalQuery": "Appending a list to itself in Python",
        "Source": "Stack Overflow"
    },
    "1761": {
        "APIs": [
            "str.lower()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "How do I lowercase a string in Python?",
        "Source": "Stack Overflow"
    },
    "1762": {
        "APIs": [
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "integers when reading a csv file in python",
        "Source": "Stack Overflow"
    },
    "1763": {
        "APIs": [
            "dir()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Get all object attributes in Python?",
        "Source": "Stack Overflow"
    },
    "1764": {
        "APIs": [
            "unicodedata.category()"
        ],
        "APIClasses": [
            "unicodedata"
        ],
        "OriginalQuery": "How to filter chinese (ONLY chinese)",
        "Source": "Stack Overflow"
    },
    "1765": {
        "APIs": [
            "exec()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Use user provided python code during runtime",
        "Source": "Stack Overflow"
    },
    "1766": {
        "OriginalQuery": "Removing default file names in Django-Storages S3",
        "Source": "Stack Overflow"
    },
    "1767": {
        "APIs": [
            "fcntl.lockf()"
        ],
        "APIClasses": [
            "fcntl"
        ],
        "OriginalQuery": "System-wide mutex in Python on Linux",
        "Source": "Stack Overflow"
    },
    "1768": {
        "APIs": [
            "subprocess.Popen.terminate()"
        ],
        "APIClasses": [
            "subprocess.Popen"
        ],
        "OriginalQuery": "Getting pid of the program just started in Python",
        "Source": "Stack Overflow"
    },
    "1769": {
        "APIs": [
            "reversed()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How do I get the last non-empty item in a list in Python?",
        "Source": "Stack Overflow"
    },
    "1770": {
        "APIs": [
            "pickle.dumps()"
        ],
        "APIClasses": [
            "pickle"
        ],
        "OriginalQuery": "more efficient way to pickle a string",
        "Source": "Stack Overflow"
    },
    "1771": {
        "APIs": [
            "repr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python enforce unicode escape",
        "Source": "Stack Overflow"
    },
    "1772": {
        "APIs": [
            "os.remove()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "How to delete a file or folder?",
        "Source": "Stack Overflow"
    },
    "1773": {
        "APIs": [
            "dict.keys()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "How can I extract all values from a dictionary in Python?",
        "Source": "Stack Overflow"
    },
    "1774": {
        "APIs": [
            "typing.cast()"
        ],
        "APIClasses": [
            "typing"
        ],
        "OriginalQuery": "[python]: how to get the string from the pointer by using ctypes?",
        "Source": "Stack Overflow"
    },
    "1775": {
        "APIs": [
            "os.system()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Executing Java programs through Python",
        "Source": "Stack Overflow"
    },
    "1776": {
        "APIs": [
            "io.IOBase.flush()"
        ],
        "APIClasses": [
            "io.IOBase"
        ],
        "OriginalQuery": "How do I properly write to FIFOs in Python?",
        "Source": "Stack Overflow"
    },
    "1777": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to compare type of an object in Python?",
        "Source": "Stack Overflow"
    },
    "1778": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Regex for parsing list of floating numbers in python",
        "Source": "Stack Overflow"
    },
    "1779": {
        "APIs": [
            "os.path.join()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "Build the full path filename in Python",
        "Source": "Stack Overflow"
    },
    "1780": {
        "APIs": [
            "ctypes.string_at()"
        ],
        "APIClasses": [
            "ctypes"
        ],
        "OriginalQuery": "Turning ctypes data into python string as quickly as possible",
        "Source": "Stack Overflow"
    },
    "1781": {
        "APIs": [
            "tkinter.ttk.Treeview.delete()"
        ],
        "APIClasses": [
            "tkinter.ttk.Treeview"
        ],
        "OriginalQuery": "How can I measure the width of a string rendering via tkFont without creating a window first?",
        "Source": "Stack Overflow"
    },
    "1782": {
        "APIs": [
            "re.sub()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Regex to replace hyphen in middle of a word",
        "Source": "Stack Overflow"
    },
    "1783": {
        "APIs": [
            "open()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python3: writing csv files",
        "Source": "Stack Overflow"
    },
    "1784": {
        "OriginalQuery": "Convert binary string representation of a byte to actual binary value in Python",
        "Source": "Stack Overflow"
    },
    "1785": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "A way to get the count of non zero values in a coo_matrix of pythons scipy module?",
        "Source": "Stack Overflow"
    },
    "1786": {
        "APIs": [
            "datetime.datetime.now()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "Python datetime to microtime",
        "Source": "Stack Overflow"
    },
    "1787": {
        "OriginalQuery": "How to reload a module's function in Python?",
        "Source": "Stack Overflow"
    },
    "1788": {
        "APIs": [
            "array.array.tobytes()"
        ],
        "APIClasses": [
            "array.array"
        ],
        "OriginalQuery": "Building a list with binary numbers in binary representation in Python",
        "Source": "Stack Overflow"
    },
    "1789": {
        "APIs": [
            "xml.etree.ElementTree.register_namespace()"
        ],
        "APIClasses": [
            "xml.etree.ElementTree"
        ],
        "OriginalQuery": "Creating xml doc with python/ElementTree and namespaces",
        "Source": "Stack Overflow"
    },
    "1790": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "python: create list of tuples from lists",
        "Source": "Stack Overflow"
    },
    "1791": {
        "APIs": [
            "str.zfill()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Best way to format integer as string with leading zeros?",
        "Source": "Stack Overflow"
    },
    "1792": {
        "APIs": [
            "os.path.basename()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "Python Glob without the whole path - only the filename",
        "Source": "Stack Overflow"
    },
    "1793": {
        "APIs": [
            "os.system()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Open PDF with default program in Windows 7",
        "Source": "Stack Overflow"
    },
    "1794": {
        "APIs": [
            "sys.exit()"
        ],
        "APIClasses": [
            "sys"
        ],
        "OriginalQuery": "How to terminate a Python script",
        "Source": "Stack Overflow"
    },
    "1795": {
        "APIs": [
            "str.replace()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Insert tabs with .join in python",
        "Source": "Stack Overflow"
    },
    "1796": {
        "APIs": [
            "char.islower()"
        ],
        "APIClasses": [
            "char"
        ],
        "OriginalQuery": "Matching case sensitive unicode strings with regular expressions in Python",
        "Source": "Stack Overflow"
    },
    "1797": {
        "OriginalQuery": "Read a text file between user given starting and ending position in python",
        "Source": "Stack Overflow"
    },
    "1798": {
        "APIs": [
            "copy.copy()"
        ],
        "APIClasses": [
            "copy"
        ],
        "OriginalQuery": "Python - Move and overwrite files and folders",
        "Source": "Stack Overflow"
    },
    "1799": {
        "APIs": [
            "os.path.join()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "Python recursive find files and move to one destination directory",
        "Source": "Stack Overflow"
    },
    "1800": {
        "APIs": [
            "Generator.bytes()"
        ],
        "APIClasses": [
            "Generator"
        ],
        "OriginalQuery": "passing a single character/multiple character user input from a python function to a C++ function",
        "Source": "Stack Overflow"
    },
    "1801": {
        "APIs": [
            "dict.values()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Django models - how to filter out duplicate values by PK after the fact?",
        "Source": "Stack Overflow"
    },
    "1802": {
        "APIs": [
            "array.array.remove()"
        ],
        "APIClasses": [
            "array.array"
        ],
        "OriginalQuery": "python - remove dictionary from list if exists",
        "Source": "Stack Overflow"
    },
    "1803": {
        "APIs": [
            "hasattr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Easy way to check that a variable is defined in python?",
        "Source": "Stack Overflow"
    },
    "1804": {
        "APIs": [
            "str.strip()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Regular Expression - Python - Remove Leading Whitespace",
        "Source": "Stack Overflow"
    },
    "1805": {
        "OriginalQuery": "Showing a dialog in a thread",
        "Source": "Stack Overflow"
    },
    "1806": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Multiple Tuple to Two-Pair Tuple in Python?",
        "Source": "Stack Overflow"
    },
    "1807": {
        "APIs": [
            "str.encode()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Best way to convert string to bytes in Python 3?",
        "Source": "Stack Overflow"
    },
    "1808": {
        "APIs": [
            "pandas.DataFrame.iteritems()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Python Sort Collections.DefaultDict in Descending order",
        "Source": "Stack Overflow"
    },
    "1809": {
        "APIs": [
            "str.lower()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Convert letters to lower case",
        "Source": "Stack Overflow"
    },
    "1810": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Iterate over a python sequence in multiples of n?",
        "Source": "Stack Overflow"
    },
    "1811": {
        "APIs": [
            "functools.reduce()"
        ],
        "APIClasses": [
            "functools"
        ],
        "OriginalQuery": "How to get the fatest way of getting the maximum values element-wised of \"n\" matrices in Python/Numpy?",
        "Source": "Stack Overflow"
    },
    "1812": {
        "APIs": [
            "numpy.append()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "place a 0 in front of numbers in a list if they are less than ten (in python)",
        "Source": "Stack Overflow"
    },
    "1813": {
        "APIs": [
            "str.encode()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python: calling Fortran with subprocess and giving commands via communicate",
        "Source": "Stack Overflow"
    },
    "1814": {
        "APIs": [
            "os.system()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "How do I prevent execution of arbitrary commands from a Django app making system calls?",
        "Source": "Stack Overflow"
    },
    "1815": {
        "APIs": [
            "connect()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Custom signal from widget to widget",
        "Source": "Stack Overflow"
    },
    "1816": {
        "OriginalQuery": "python read binary from specific position",
        "Source": "Stack Overflow"
    },
    "1817": {
        "APIs": [
            "sqlite3.Cursor.execute()"
        ],
        "APIClasses": [
            "sqlite3.Cursor"
        ],
        "OriginalQuery": "python 2.x and mysqldb 5: how to ignore all characters in a string",
        "Source": "Stack Overflow"
    },
    "1818": {
        "APIs": [
            "urllib.parse.urlencode()"
        ],
        "APIClasses": [
            "urllib.parse"
        ],
        "OriginalQuery": "How to convert a dictionary to query string in Python?",
        "Source": "Stack Overflow"
    },
    "1819": {
        "OriginalQuery": "Reading stdout from one program in another program",
        "Source": "Stack Overflow"
    },
    "1820": {
        "APIs": [
            "numpy.random.RandomState.randint()"
        ],
        "APIClasses": [
            "numpy.random.RandomState"
        ],
        "OriginalQuery": "Very fast sampling from a set with fixed number of elements in python",
        "Source": "Stack Overflow"
    },
    "1821": {
        "APIs": [
            "sqlite3.Connection.execute()"
        ],
        "APIClasses": [
            "sqlite3.Connection"
        ],
        "OriginalQuery": "How to display an SQL string that has been constructed by MySQLDB cursor?",
        "Source": "Stack Overflow"
    },
    "1822": {
        "APIs": [
            "datetime.timedelta.total_seconds()"
        ],
        "APIClasses": [
            "datetime.timedelta"
        ],
        "OriginalQuery": "In Python, how do you convert a `datetime` object to seconds?",
        "Source": "Stack Overflow"
    },
    "1823": {
        "APIs": [
            "time.sleep()"
        ],
        "APIClasses": [
            "time"
        ],
        "OriginalQuery": "How does a threading.Thread yield the rest of its quantum in Python?",
        "Source": "Stack Overflow"
    },
    "1824": {
        "APIs": [
            "dir()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How do I list all the attributes of an object in python pdb?",
        "Source": "Stack Overflow"
    },
    "1825": {
        "APIs": [
            "globals()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to offer platform-specific implementations of a module?",
        "Source": "Stack Overflow"
    },
    "1826": {
        "OriginalQuery": "Getting the array as GET query parameters in Python",
        "Source": "Stack Overflow"
    },
    "1827": {
        "APIs": [
            "os.kill()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Reliably terminating subprocess on Python 2.5",
        "Source": "Stack Overflow"
    },
    "1828": {
        "APIs": [
            "os.read()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Fastest stdin/out IO in python 3?",
        "Source": "Stack Overflow"
    },
    "1829": {
        "APIs": [
            "os.getcwd()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Opening a text file in Python",
        "Source": "Stack Overflow"
    },
    "1830": {
        "APIs": [
            "datetime.datetime.strftime()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "Python datetime to string without microsecond component",
        "Source": "Stack Overflow"
    },
    "1831": {
        "APIs": [
            "urllib.request.Request.add_header()"
        ],
        "APIClasses": [
            "urllib.request.Request"
        ],
        "OriginalQuery": "Changing user agent on urllib2.urlopen",
        "Source": "Stack Overflow"
    },
    "1832": {
        "APIs": [
            "tarfile.TarFile.extract()"
        ],
        "APIClasses": [
            "tarfile.TarFile"
        ],
        "OriginalQuery": "Python: Renaming member in a tar file during extraction",
        "Source": "Stack Overflow"
    },
    "1833": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to convert list of tuples to multiple lists?",
        "Source": "Stack Overflow"
    },
    "1834": {
        "OriginalQuery": "How to sort mongodb with pymongo",
        "Source": "Stack Overflow"
    },
    "1835": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Split string on whitespace in Python",
        "Source": "Stack Overflow"
    },
    "1836": {
        "APIs": [
            "tkinter.ttk.Treeview.see()"
        ],
        "APIClasses": [
            "tkinter.ttk.Treeview"
        ],
        "OriginalQuery": "How to scroll automatically within a Tkinter message window",
        "Source": "Stack Overflow"
    },
    "1837": {
        "APIs": [
            "threading.Thread.join()"
        ],
        "APIClasses": [
            "threading.Thread"
        ],
        "OriginalQuery": "How to synchronize threads in python?",
        "Source": "Stack Overflow"
    },
    "1838": {
        "APIs": [
            "locals()"
        ],
        "APIClasses": [],
        "OriginalQuery": "In Python, how to create a large number of variables in a loop?",
        "Source": "Stack Overflow"
    },
    "1839": {
        "APIs": [
            "urllib.parse.unquote()"
        ],
        "APIClasses": [
            "urllib.parse"
        ],
        "OriginalQuery": "Decode escaped characters in URL",
        "Source": "Stack Overflow"
    },
    "1840": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Counting patterns in sequences",
        "Source": "Stack Overflow"
    },
    "1841": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python counting significant digits",
        "Source": "Stack Overflow"
    },
    "1842": {
        "OriginalQuery": "Saving Python Pickled objects in MySQL db",
        "Source": "Stack Overflow"
    },
    "1843": {
        "APIs": [
            "curses.noecho()"
        ],
        "APIClasses": [
            "curses"
        ],
        "OriginalQuery": "In python, how can I prevent the \"^C\" from showing up when I press Ctrl+C in the terminal?",
        "Source": "Stack Overflow"
    },
    "1844": {
        "OriginalQuery": "Get cookie from CookieJar by name",
        "Source": "Stack Overflow"
    },
    "1845": {
        "APIs": [
            "math.isnan()"
        ],
        "APIClasses": [
            "math"
        ],
        "OriginalQuery": "Checking for nan in Cython",
        "Source": "Stack Overflow"
    },
    "1846": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Does Python have an argc argument?",
        "Source": "Stack Overflow"
    },
    "1847": {
        "APIs": [
            "array.array.append()"
        ],
        "APIClasses": [
            "array.array"
        ],
        "OriginalQuery": "Appending two arrays together in Python",
        "Source": "Stack Overflow"
    },
    "1848": {
        "APIs": [
            "datetime.timedelta.total_seconds()"
        ],
        "APIClasses": [
            "datetime.timedelta"
        ],
        "OriginalQuery": "Python - How to calculate the elapsed time since X date?",
        "Source": "Stack Overflow"
    },
    "1849": {
        "APIs": [
            "itertools.product()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "how to get all possible combination of items from 2-dimensional list in python?",
        "Source": "Stack Overflow"
    },
    "1850": {
        "APIs": [
            "socket.gethostname()"
        ],
        "APIClasses": [
            "socket"
        ],
        "OriginalQuery": "Python on Linux: get host name in /etc/hostname",
        "Source": "Stack Overflow"
    },
    "1851": {
        "APIs": [
            "Session.expunge()"
        ],
        "APIClasses": [
            "Session"
        ],
        "OriginalQuery": "Deleting an object from an SQLAlchemy session before it's been persisted",
        "Source": "Stack Overflow"
    },
    "1852": {
        "OriginalQuery": "How do I replace characters in a string in Python?",
        "Source": "Stack Overflow"
    },
    "1853": {
        "APIs": [
            "http.client.HTTPResponse.info()"
        ],
        "APIClasses": [
            "http.client.HTTPResponse"
        ],
        "OriginalQuery": "Python: Get HTTP headers from urllib2.urlopen call?",
        "Source": "Stack Overflow"
    },
    "1854": {
        "APIs": [
            "list.sort()"
        ],
        "APIClasses": [
            "list"
        ],
        "OriginalQuery": "Sort tuples based on second parameter",
        "Source": "Stack Overflow"
    },
    "1855": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to determine struct used to declare the instance layout of PyObject?",
        "Source": "Stack Overflow"
    },
    "1856": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Use izip to read lines from two files simultaneously in python",
        "Source": "Stack Overflow"
    },
    "1857": {
        "APIs": [
            "str.split()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Convert a list of string sentences to words",
        "Source": "Stack Overflow"
    },
    "1858": {
        "APIs": [
            "gzip.open()"
        ],
        "APIClasses": [
            "gzip"
        ],
        "OriginalQuery": "Best (most \"pythonic\") way to temporarily unzip a file",
        "Source": "Stack Overflow"
    },
    "1859": {
        "APIs": [
            "repr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "python unittest2 - exposing test method name to setup method",
        "Source": "Stack Overflow"
    },
    "1860": {
        "APIs": [
            "datetime.datetime.now()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "Is there a better way to delete files that are a month old in python?",
        "Source": "Stack Overflow"
    },
    "1861": {
        "APIs": [
            "dict.items()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "python: dictionary to string, custom format?",
        "Source": "Stack Overflow"
    },
    "1862": {
        "APIs": [
            "inotify()"
        ],
        "APIClasses": [],
        "OriginalQuery": "auto detect file in a folder",
        "Source": "Stack Overflow"
    },
    "1863": {
        "OriginalQuery": "python multiprocessing pass dict from child process back to parent",
        "Source": "Stack Overflow"
    },
    "1864": {
        "OriginalQuery": "Run shell script in python",
        "Source": "Stack Overflow"
    },
    "1865": {
        "APIs": [
            "os.read()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "CSV DictReader only gets the first character of the CSV file",
        "Source": "Stack Overflow"
    },
    "1866": {
        "APIs": [
            "inspect.ismethod()"
        ],
        "APIClasses": [
            "inspect"
        ],
        "OriginalQuery": "Get containing context of a function",
        "Source": "Stack Overflow"
    },
    "1867": {
        "APIs": [
            "chr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Convert unicode codepoint to UTF8 hex in python",
        "Source": "Stack Overflow"
    },
    "1868": {
        "APIs": [
            "str.zfill()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Generating IDs how to make IDs same length using zeroes?",
        "Source": "Stack Overflow"
    },
    "1869": {
        "APIs": [
            "struct.unpack()"
        ],
        "APIClasses": [
            "struct"
        ],
        "OriginalQuery": "Reading a binary file with python",
        "Source": "Stack Overflow"
    },
    "1870": {
        "APIs": [
            "subprocess.Popen.communicate()"
        ],
        "APIClasses": [
            "subprocess.Popen"
        ],
        "OriginalQuery": "Python: Catching the output from subprocess.call with stdout",
        "Source": "Stack Overflow"
    },
    "1871": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Display user group of logged in user in django admin change_form.html?",
        "Source": "Stack Overflow"
    },
    "1872": {
        "APIs": [
            "itertools.product()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Is there a way to delist a list in python?",
        "Source": "Stack Overflow"
    },
    "1873": {
        "APIs": [
            "os.read()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Fast way of merging huge files(>=7 GB) into one",
        "Source": "Stack Overflow"
    },
    "1874": {
        "OriginalQuery": "get file list of files contained in a zip file",
        "Source": "Stack Overflow"
    },
    "1875": {
        "APIs": [
            "dataclasses.fields()"
        ],
        "APIClasses": [
            "dataclasses"
        ],
        "OriginalQuery": "How to access the keys or values of Python GDB Value",
        "Source": "Stack Overflow"
    },
    "1876": {
        "APIs": [
            "tkinter.ttk.Treeview.index()"
        ],
        "APIClasses": [
            "tkinter.ttk.Treeview"
        ],
        "OriginalQuery": "Swapping lines in a Tkinter text widget",
        "Source": "Stack Overflow"
    },
    "1877": {
        "APIs": [
            "re.split()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python PySerial readline function wrong use",
        "Source": "Stack Overflow"
    },
    "1878": {
        "APIs": [
            "str.join()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Replace for loop with list comprehension",
        "Source": "Stack Overflow"
    },
    "1879": {
        "APIs": [
            "os.remove()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Python remove set from set",
        "Source": "Stack Overflow"
    },
    "1880": {
        "APIs": [
            "itertools.product()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Creating 2D coordinates map in Python",
        "Source": "Stack Overflow"
    },
    "1881": {
        "APIs": [
            "str.format()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python, want to print float in exact format +-00.00",
        "Source": "Stack Overflow"
    },
    "1882": {
        "APIs": [
            "str.lower()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "converting NavigableString to unicode string",
        "Source": "Stack Overflow"
    },
    "1883": {
        "APIs": [
            "itertools.product()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python Cartesian Product",
        "Source": "Stack Overflow"
    },
    "1884": {
        "APIs": [
            "urllib.parse.unquote()"
        ],
        "APIClasses": [
            "urllib.parse"
        ],
        "OriginalQuery": "decode urlencoded string, or apache rejects url due to '/' in params",
        "Source": "Stack Overflow"
    },
    "1885": {
        "APIs": [
            "str.join()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "python print a string in array format",
        "Source": "Stack Overflow"
    },
    "1886": {
        "OriginalQuery": "How can I create a yaml file from pure python?",
        "Source": "Stack Overflow"
    },
    "1887": {
        "APIs": [
            "datetime.datetime.strftime()"
        ],
        "APIClasses": [
            "datetime.datetime"
        ],
        "OriginalQuery": "How do you add datetime to a logfile name?",
        "Source": "Stack Overflow"
    },
    "1888": {
        "APIs": [
            "os.path.islink()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "In python, how can I test if a path is a symbolic link?",
        "Source": "Stack Overflow"
    },
    "1889": {
        "APIs": [
            "functools.reduce()"
        ],
        "APIClasses": [
            "functools"
        ],
        "OriginalQuery": "How to add numbers in nested Python lists",
        "Source": "Stack Overflow"
    },
    "1890": {
        "APIs": [
            "threading.get_ident()"
        ],
        "APIClasses": [
            "threading"
        ],
        "OriginalQuery": "How to obtain a Thread id in Python?",
        "Source": "Stack Overflow"
    },
    "1891": {
        "APIs": [
            "warnings.showwarning()"
        ],
        "APIClasses": [
            "warnings"
        ],
        "OriginalQuery": "python MySQLdb - how to log warnings",
        "Source": "Stack Overflow"
    },
    "1892": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python, how to make a function which takes a function as an argument along with two arrays?",
        "Source": "Stack Overflow"
    },
    "1893": {
        "APIs": [
            "json.dumps()"
        ],
        "APIClasses": [
            "json"
        ],
        "OriginalQuery": "populate json to html with django template",
        "Source": "Stack Overflow"
    },
    "1894": {
        "APIs": [
            "globals()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Best way to retrieve variable values from a text file?",
        "Source": "Stack Overflow"
    },
    "1895": {
        "APIs": [
            "os.getcwd()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Python script to copy files",
        "Source": "Stack Overflow"
    },
    "1896": {
        "APIs": [
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Check if list of objects contain an object with a certain attribute value",
        "Source": "Stack Overflow"
    },
    "1897": {
        "APIs": [
            "os.path.normpath()"
        ],
        "APIClasses": [
            "os.path"
        ],
        "OriginalQuery": "Python - Any way to turn relative paths into absolute paths?",
        "Source": "Stack Overflow"
    },
    "1898": {
        "APIs": [
            "socket.setdefaulttimeout()"
        ],
        "APIClasses": [
            "socket"
        ],
        "OriginalQuery": "How to set the timeout on HTTPConnection under python 2.4",
        "Source": "Stack Overflow"
    },
    "1899": {
        "OriginalQuery": "How do I remove leading whitespace in Python?",
        "Source": "Stack Overflow"
    },
    "1900": {
        "APIs": [
            "re.escape()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "How to use '\\Q' and '\\E' regex symbols in python?",
        "Source": "Stack Overflow"
    },
    "1901": {
        "APIs": [
            "email.message.Message.get_all()"
        ],
        "APIClasses": [
            "email.message.Message"
        ],
        "OriginalQuery": "python email get values for multiple headers of the same name",
        "Source": "Stack Overflow"
    },
    "1902": {
        "OriginalQuery": "Python add file to zip by giving filepath?",
        "Source": "Stack Overflow"
    },
    "1903": {
        "APIs": [
            "zipfile.ZipFile.writestr()"
        ],
        "APIClasses": [
            "zipfile.ZipFile"
        ],
        "OriginalQuery": "Zipping dynamic files in App Engine (Python)",
        "Source": "Stack Overflow"
    },
    "1904": {
        "APIs": [
            "str.join()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "python - Writing to file with two arrays separated by only a space",
        "Source": "Stack Overflow"
    },
    "1905": {
        "APIs": [
            "ctypes.addressof()"
        ],
        "APIClasses": [
            "ctypes"
        ],
        "OriginalQuery": "Get the memory address pointed to by a ctypes pointer",
        "Source": "Stack Overflow"
    },
    "1906": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Searching dictionary for max value then grabbing associated key",
        "Source": "Stack Overflow"
    },
    "1907": {
        "APIs": [
            "str.startswith()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python regex, searching for prefixes inside a target string",
        "Source": "Stack Overflow"
    },
    "1908": {
        "APIs": [
            "heapq.nlargest()"
        ],
        "APIClasses": [
            "heapq"
        ],
        "OriginalQuery": "Filter max 20 values from a list of integers",
        "Source": "Stack Overflow"
    },
    "1909": {
        "APIs": [
            "pandas.DataFrame.join()"
        ],
        "APIClasses": [
            "pandas.DataFrame"
        ],
        "OriginalQuery": "Add indexed column to DataFrame with pandas",
        "Source": "Stack Overflow"
    },
    "1910": {
        "APIs": [
            "str.lower()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "python adding new methods to built-in types",
        "Source": "Stack Overflow"
    },
    "1911": {
        "APIs": [
            "file.seek()"
        ],
        "APIClasses": [
            "file"
        ],
        "OriginalQuery": "python checksum verification of two large files",
        "Source": "Stack Overflow"
    },
    "1912": {
        "APIs": [
            "round()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Round to the nearest 500, Python",
        "Source": "Stack Overflow"
    },
    "1913": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python, how to unroll tuples in lambda?",
        "Source": "Stack Overflow"
    },
    "1914": {
        "APIs": [
            "str.rstrip()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python remove last character of string if its a letter",
        "Source": "Stack Overflow"
    },
    "1915": {
        "APIs": [
            "str.join()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Removing duplicate characters from a string",
        "Source": "Stack Overflow"
    },
    "1916": {
        "APIs": [
            "re.split()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Pythonic way to eval all octal values in a string as integers",
        "Source": "Stack Overflow"
    },
    "1917": {
        "OriginalQuery": "How do I get the user agent with Flask?",
        "Source": "Stack Overflow"
    },
    "1918": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "randomly selecting items from an array python",
        "Source": "Stack Overflow"
    },
    "1919": {
        "APIs": [
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Last element in OrderedDict",
        "Source": "Stack Overflow"
    },
    "1920": {
        "APIs": [
            "os.listdir()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Distinguishing Files From Directories",
        "Source": "Stack Overflow"
    },
    "1921": {
        "APIs": [
            "struct.unpack()"
        ],
        "APIClasses": [
            "struct"
        ],
        "OriginalQuery": "Converting a binary sequence read from a file into a fixed point number",
        "Source": "Stack Overflow"
    },
    "1922": {
        "APIs": [
            "inspect.stack()"
        ],
        "APIClasses": [
            "inspect"
        ],
        "OriginalQuery": "Obtaining stack frame",
        "Source": "Stack Overflow"
    },
    "1923": {
        "APIs": [
            "csv.reader()"
        ],
        "APIClasses": [
            "csv"
        ],
        "OriginalQuery": "With SQLite, how do i read from a list into a database?",
        "Source": "Stack Overflow"
    },
    "1924": {
        "OriginalQuery": "Python and SQLite: Check if an item exists in a database?",
        "Source": "Stack Overflow"
    },
    "1925": {
        "APIs": [
            "re.findall()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Match single quotes from python re",
        "Source": "Stack Overflow"
    },
    "1926": {
        "APIs": [
            "itemegetter()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Access front and rear element of Python tuple",
        "Source": "Tutorial Websites"
    },
    "1927": {
        "APIs": [
            "update()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Add a key:value pair to dictionary in Python",
        "Source": "Tutorial Websites"
    },
    "1928": {
        "APIs": [
            "DataFrame()",
            "range()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Add a new column in Pandas Data Frame Using a Dictionary",
        "Source": "Tutorial Websites"
    },
    "1929": {
        "APIs": [
            "np.add()",
            "np.subtract()"
        ],
        "APIClasses": [
            "np",
            "np"
        ],
        "OriginalQuery": "Adding and Subtracting Matrices in Python",
        "Source": "Tutorial Websites"
    },
    "1930": {
        "APIs": [
            "zip()",
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Addition in Nested Tuples \u2013 Python",
        "Source": "Tutorial Websites"
    },
    "1931": {
        "APIs": [
            "enumerate()",
            "split()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Bigram formation from a given Python list",
        "Source": "Tutorial Websites"
    },
    "1932": {
        "APIs": [
            "range()",
            "len()",
            "list()",
            "divide_chunks()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Break a list into chunks of size N in Python",
        "Source": "Tutorial Websites"
    },
    "1933": {
        "APIs": [
            "numpy.std()",
            "pstdev()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Calculate standard deviation of a dictionary in Python",
        "Source": "Tutorial Websites"
    },
    "1934": {
        "APIs": [
            "bisect_left()",
            "lower_bound()",
            "set()",
            "sort()",
            "count()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Check if element exists in list in Python",
        "Source": "Tutorial Websites"
    },
    "1935": {
        "APIs": [
            "search()",
            "it.re.search()"
        ],
        "APIClasses": [
            "it.re"
        ],
        "OriginalQuery": "Check if email address valid or not in Python",
        "Source": "Tutorial Websites"
    },
    "1936": {
        "APIs": [
            "keys()",
            "checkKey()",
            "has_key()",
            "has_keys()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Check whether given Key already exists in a Python Dictionary",
        "Source": "Tutorial Websites"
    },
    "1937": {
        "APIs": [
            "list()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Combine keys in a list of dictionaries in Python",
        "Source": "Tutorial Websites"
    },
    "1938": {
        "APIs": [
            "split()",
            "float()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Convert String float to float list in Python",
        "Source": "Tutorial Websites"
    },
    "1939": {
        "APIs": [
            "chr()",
            "int()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Convert binary to string using Python",
        "Source": "Tutorial Websites"
    },
    "1940": {
        "APIs": [
            "strptime()",
            "timetuple()",
            "mktime()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Convert date string to timestamp in Python",
        "Source": "Tutorial Websites"
    },
    "1941": {
        "APIs": [
            "isinstance()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Count dictionaries in a list in Python",
        "Source": "Tutorial Websites"
    },
    "1942": {
        "APIs": [
            "bin()",
            "len()",
            "countSetBits()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Count set bits using Python List comprehension",
        "Source": "Tutorial Websites"
    },
    "1943": {
        "APIs": [
            "get()",
            "count()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Counting number of unique values in a Python list",
        "Source": "Tutorial Websites"
    },
    "1944": {
        "APIs": [
            "list.count()",
            "dict.get()"
        ],
        "APIClasses": [
            "list",
            "dict"
        ],
        "OriginalQuery": "Counting the frequencies in a list using dictionary in Python",
        "Source": "Tutorial Websites"
    },
    "1945": {
        "APIs": [
            "tuple()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Create a tuple from string and list \u2013 Python",
        "Source": "Tutorial Websites"
    },
    "1946": {
        "APIs": [
            "sort()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Creating a sorted merged list of two unsorted lists in Python",
        "Source": "Tutorial Websites"
    },
    "1947": {
        "APIs": [
            "t=()",
            "a=set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Differences and Applications of List, Tuple, Set and Dictionary in Python",
        "Source": "Tutorial Websites"
    },
    "1948": {
        "APIs": [
            "items()",
            "sorted()",
            "keys()",
            "get()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Different ways of sorting Dictionary by Values and Reverse sorting by values",
        "Source": "Tutorial Websites"
    },
    "1949": {
        "APIs": [
            "exec()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Execute a String of Code in Python",
        "Source": "Tutorial Websites"
    },
    "1950": {
        "APIs": [
            "sort()",
            "len()",
            "statistics.median()"
        ],
        "APIClasses": [
            "statistics"
        ],
        "OriginalQuery": "Find Median of List in Python",
        "Source": "Tutorial Websites"
    },
    "1951": {
        "APIs": [
            "sum()",
            "len()",
            "round()",
            "reduce()",
            "mean()",
            "Average()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Find average of a list in python",
        "Source": "Tutorial Websites"
    },
    "1952": {
        "APIs": [
            "sum()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Find sum and average of List in Python",
        "Source": "Tutorial Websites"
    },
    "1953": {
        "APIs": [
            "getsizeof()",
            "__sizeof__()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Find the size of a Dictionary in Python",
        "Source": "Tutorial Websites"
    },
    "1954": {
        "APIs": [
            "getsizeof()",
            "sys.getsizeof()",
            "__sizeof__()"
        ],
        "APIClasses": [
            "sys"
        ],
        "OriginalQuery": "Find the size of a Tuple in Python",
        "Source": "Tutorial Websites"
    },
    "1955": {
        "APIs": [
            "getsizeof()",
            "sys.getsizeof()",
            "__sizeof__()"
        ],
        "APIClasses": [
            "sys"
        ],
        "OriginalQuery": "Find the size of a list \u2013 Python",
        "Source": "Tutorial Websites"
    },
    "1956": {
        "APIs": [
            "range()",
            "append()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Generate a list using given frequency list",
        "Source": "Tutorial Websites"
    },
    "1957": {
        "APIs": [
            "datetime.now()",
            "now()"
        ],
        "APIClasses": [
            "datetime"
        ],
        "OriginalQuery": "Get Current Date and Time using Python",
        "Source": "Tutorial Websites"
    },
    "1958": {
        "APIs": [
            "get()",
            "setdefault()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Handling missing keys in Python dictionaries",
        "Source": "Tutorial Websites"
    },
    "1959": {
        "APIs": [
            "map()",
            "itertools.chain()",
            "zip()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "How to Zip two lists of lists in Python?",
        "Source": "Tutorial Websites"
    },
    "1960": {
        "APIs": [
            "upper()",
            "capitalize()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to capitalize first character of string in Python",
        "Source": "Tutorial Websites"
    },
    "1961": {
        "APIs": [
            "search()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to check if a string starts with a substring using regex in Python?",
        "Source": "Tutorial Websites"
    },
    "1962": {
        "APIs": [
            "datetime.fromtimestamp()",
            "strftime()"
        ],
        "APIClasses": [
            "datetime"
        ],
        "OriginalQuery": "How to convert timestamp string to datetime object in Python?",
        "Source": "Tutorial Websites"
    },
    "1963": {
        "APIs": [
            "range()",
            "len()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "How to create a Dictionary in Python",
        "Source": "Tutorial Websites"
    },
    "1964": {
        "APIs": [
            "startswith()",
            "re.findall()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "How to remove lines starting with any prefix using Python?",
        "Source": "Tutorial Websites"
    },
    "1965": {
        "APIs": [
            "range()",
            "enumerate()",
            "np.ndenumerate()"
        ],
        "APIClasses": [
            "np"
        ],
        "OriginalQuery": "Iterate over a list in Python",
        "Source": "Tutorial Websites"
    },
    "1966": {
        "APIs": [
            "range()",
            "enumerate()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Iterate over characters of a string in Python",
        "Source": "Tutorial Websites"
    },
    "1967": {
        "APIs": [
            "split()",
            "re.findall()",
            "findall()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Iterate over words of a String in Python",
        "Source": "Tutorial Websites"
    },
    "1968": {
        "APIs": [
            "fromkeys()",
            "items()",
            "len()",
            "kthRepeating()"
        ],
        "APIClasses": [],
        "OriginalQuery": "K\u2019th Non-repeating Character in Python using List Comprehension and OrderedDict",
        "Source": "Tutorial Websites"
    },
    "1969": {
        "APIs": [
            "ord()",
            "range()"
        ],
        "APIClasses": [],
        "OriginalQuery": "List comprehension and ord() in Python to remove all characters other than alphabets",
        "Source": "Tutorial Websites"
    },
    "1970": {
        "APIs": [
            "maximum()",
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Maximum of two numbers in Python",
        "Source": "Tutorial Websites"
    },
    "1971": {
        "APIs": [
            "minimum()",
            "min()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Minimum of two numbers in Python",
        "Source": "Tutorial Websites"
    },
    "1972": {
        "APIs": [
            "moveZeros()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Move all zeroes to end of array using List Comprehension in Python",
        "Source": "Tutorial Websites"
    },
    "1973": {
        "APIs": [
            "range()",
            "len()",
            "append()",
            "extend()",
            "reverse()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Multi-dimensional lists in Python",
        "Source": "Tutorial Websites"
    },
    "1974": {
        "APIs": [
            "itertools.combinations()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Print all subsequences of a string in Python",
        "Source": "Tutorial Websites"
    },
    "1975": {
        "APIs": [
            "range()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Print first m multiples of n without using any loop in Python",
        "Source": "Tutorial Websites"
    },
    "1976": {
        "APIs": [
            "sorted()",
            "list()",
            "permutations()",
            "set()",
            "join()",
            "__next__()",
            "add()",
            "nPermute()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Print first n distinct permutations of string using itertools in Python",
        "Source": "Tutorial Websites"
    },
    "1977": {
        "APIs": [
            "cyclicRotate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Program to cyclically rotate an array by one in Python | List Slicing",
        "Source": "Tutorial Websites"
    },
    "1978": {
        "APIs": [
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Group by matching second tuple value in list of tuples",
        "Source": "Tutorial Websites"
    },
    "1979": {
        "APIs": [
            "allPairs()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python List Comprehension to find pair with given sum from two arrays",
        "Source": "Tutorial Websites"
    },
    "1980": {
        "APIs": [
            "identicalMatrices()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python List Equality | Program to check if two given matrices are identical",
        "Source": "Tutorial Websites"
    },
    "1981": {
        "APIs": [
            "isinstance()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program To Convert dictionary values to Strings",
        "Source": "Tutorial Websites"
    },
    "1982": {
        "APIs": [
            "issubset()",
            "set()",
            "combinations()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program To Get Minimum Elements For String Construction",
        "Source": "Tutorial Websites"
    },
    "1983": {
        "APIs": [
            "len()",
            "getNextGap()",
            "range()",
            "combSort()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program for Comb Sort",
        "Source": "Tutorial Websites"
    },
    "1984": {
        "APIs": [
            "isDiff()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program for Difference between sums of odd and even digits",
        "Source": "Tutorial Websites"
    },
    "1985": {
        "APIs": [
            "range()",
            "int()",
            "sqrt()",
            "primeFactors()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program for Efficient program to print all prime factors of a given number",
        "Source": "Tutorial Websites"
    },
    "1986": {
        "APIs": [
            "heapify()",
            "len()",
            "range()",
            "heapSort()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program for Heap Sort",
        "Source": "Tutorial Websites"
    },
    "1987": {
        "APIs": [
            "range()",
            "len()",
            "insertionSort()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program for Insertion Sort",
        "Source": "Tutorial Websites"
    },
    "1988": {
        "APIs": [
            "merge()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program for Merge Sort",
        "Source": "Tutorial Websites"
    },
    "1989": {
        "APIs": [
            "partition()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program for QuickSort",
        "Source": "Tutorial Websites"
    },
    "1990": {
        "APIs": [
            "len()",
            "range()",
            "shellSort()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program for ShellSort",
        "Source": "Tutorial Websites"
    },
    "1991": {
        "APIs": [
            "range()",
            "squaresum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program for Sum of squares of first n natural numbers",
        "Source": "Tutorial Websites"
    },
    "1992": {
        "APIs": [
            "defaultdict()",
            "append()",
            "topologicalSortUtil()",
            "insert()",
            "range()",
            "Graph()",
            "addEdge()",
            "topologicalSort()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program for Topological Sorting",
        "Source": "Tutorial Websites"
    },
    "1993": {
        "APIs": [
            "startswith()",
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program that Extract words starting with Vowel From A list",
        "Source": "Tutorial Websites"
    },
    "1994": {
        "APIs": [
            "max()",
            "min()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program that displays the key of list value with maximum range",
        "Source": "Tutorial Websites"
    },
    "1995": {
        "APIs": [
            "len()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program that filters out non-empty rows of a matrix",
        "Source": "Tutorial Websites"
    },
    "1996": {
        "APIs": [
            "min()",
            "len()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program that prints elements common at specified index of list elements",
        "Source": "Tutorial Websites"
    },
    "1997": {
        "APIs": [
            "all()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program that prints rows from the matrix that have same element at a given index",
        "Source": "Tutorial Websites"
    },
    "1998": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program that prints the count of either peaks or valleys from a list",
        "Source": "Tutorial Websites"
    },
    "1999": {
        "APIs": [
            "len()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program that prints the rows of a given length from a matrix",
        "Source": "Tutorial Websites"
    },
    "2000": {
        "APIs": [
            "startswith()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Check Overlapping Prefix \u2013 Suffix in Two Lists",
        "Source": "Tutorial Websites"
    },
    "2001": {
        "APIs": [
            "randint()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Construct dictionary using random values",
        "Source": "Tutorial Websites"
    },
    "2002": {
        "APIs": [
            "join()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Convert Matrix to String",
        "Source": "Tutorial Websites"
    },
    "2003": {
        "APIs": [
            "join()",
            "map()",
            "int()",
            "convert()",
            "reduce()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Convert a list of multiple integers into a single integer",
        "Source": "Tutorial Websites"
    },
    "2004": {
        "APIs": [
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Convert dictionary string values to List of dictionaries",
        "Source": "Tutorial Websites"
    },
    "2005": {
        "APIs": [
            "upper()",
            "isdigit()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Converts Characters To Uppercase Around Numbers",
        "Source": "Tutorial Websites"
    },
    "2006": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Count characters surrounding vowels",
        "Source": "Tutorial Websites"
    },
    "2007": {
        "APIs": [
            "time()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Create a Lap Timer",
        "Source": "Tutorial Websites"
    },
    "2008": {
        "APIs": [
            "repeat()",
            "from_iterable()",
            "count()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Extract Elements from list in set",
        "Source": "Tutorial Websites"
    },
    "2009": {
        "APIs": [
            "Counter()",
            "all()",
            "filter()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Extract Rows of a matrix with Even frequency Elements",
        "Source": "Tutorial Websites"
    },
    "2010": {
        "APIs": [
            "sum()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Extract Strings with at least given number of characters from other list",
        "Source": "Tutorial Websites"
    },
    "2011": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Filter Rows with a specific Pair Sum",
        "Source": "Tutorial Websites"
    },
    "2012": {
        "APIs": [
            "Counter()",
            "count()",
            "frozenset()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Find Duplicate sets in list of sets",
        "Source": "Tutorial Websites"
    },
    "2013": {
        "APIs": [
            "range()",
            "randint()",
            "rand_key()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Generate Random binary string",
        "Source": "Tutorial Websites"
    },
    "2014": {
        "APIs": [
            "pow()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Get K initial powers of N",
        "Source": "Tutorial Websites"
    },
    "2015": {
        "APIs": [
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Group Strings by K length Using Suffix",
        "Source": "Tutorial Websites"
    },
    "2016": {
        "APIs": [
            "type()",
            "join()",
            "map()",
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Join Equi-hierarchy Strings",
        "Source": "Tutorial Websites"
    },
    "2017": {
        "APIs": [
            "setdefault()",
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Merge a Matrix By the Elements of First Column",
        "Source": "Tutorial Websites"
    },
    "2018": {
        "APIs": [
            "keys()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Re-assign a dictionary based on path relation",
        "Source": "Tutorial Websites"
    },
    "2019": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Remove First Diagonal Elements from a Square Matrix",
        "Source": "Tutorial Websites"
    },
    "2020": {
        "APIs": [
            "str()",
            "int()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Remove Palindromic Elements from a List",
        "Source": "Tutorial Websites"
    },
    "2021": {
        "APIs": [
            "map()",
            "sorted()",
            "set()",
            "list()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Remove duplicate tuples irrespective of order",
        "Source": "Tutorial Websites"
    },
    "2022": {
        "APIs": [
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Removes Every Element From A String List Except For a Specified letter",
        "Source": "Tutorial Websites"
    },
    "2023": {
        "APIs": [
            "replace()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Replace all Occurrences of \u2018a\u2019 with $ in a String",
        "Source": "Tutorial Websites"
    },
    "2024": {
        "APIs": [
            "sort()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Return the Length of the Longest Word from the List of Words",
        "Source": "Tutorial Websites"
    },
    "2025": {
        "APIs": [
            "reversed()",
            "reverse()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Reverse Every Kth row in a Matrix",
        "Source": "Tutorial Websites"
    },
    "2026": {
        "APIs": [
            "sorted()",
            "sort()",
            "x.split()"
        ],
        "APIClasses": [
            "x"
        ],
        "OriginalQuery": "Python Program to Sort A List Of Names By Last Name",
        "Source": "Tutorial Websites"
    },
    "2027": {
        "APIs": [
            "sort()",
            "sorted()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Sort Matrix Rows According to Primary and Secondary Indices",
        "Source": "Tutorial Websites"
    },
    "2028": {
        "APIs": [
            "sort()",
            "abs()",
            "sorted()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Sort Matrix Rows by summation of consecutive difference of elements",
        "Source": "Tutorial Websites"
    },
    "2029": {
        "APIs": [
            "split()",
            "len()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Split each word according to given percent",
        "Source": "Tutorial Websites"
    },
    "2030": {
        "APIs": [
            "join()",
            "groupby()",
            "finditer()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Split joined consecutive similar characters",
        "Source": "Tutorial Websites"
    },
    "2031": {
        "APIs": [
            "str()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Subtract K from each digit",
        "Source": "Tutorial Websites"
    },
    "2032": {
        "APIs": [
            "items()",
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to Swap dictionary item\u2019s position",
        "Source": "Tutorial Websites"
    },
    "2033": {
        "APIs": [
            "set()",
            "zip()",
            "dict()",
            "sorted()",
            "index()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to assign each list element value equal to its magnitude order",
        "Source": "Tutorial Websites"
    },
    "2034": {
        "APIs": [
            "index()",
            "Counter()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to calculate Dictionaries frequencies",
        "Source": "Tutorial Websites"
    },
    "2035": {
        "APIs": [
            "abs()",
            "Counter()",
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to check for almost similar Strings",
        "Source": "Tutorial Websites"
    },
    "2036": {
        "APIs": [
            "enumerate()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to check if elements to the left and right of the pivot are smaller or greater respectively",
        "Source": "Tutorial Websites"
    },
    "2037": {
        "APIs": [
            "sorted()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to check whether Characters of all string elements are in lexical order or not",
        "Source": "Tutorial Websites"
    },
    "2038": {
        "APIs": [
            "all()",
            "isdigit()",
            "\u00a0all()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to check whether all elements in a string list are numeric",
        "Source": "Tutorial Websites"
    },
    "2039": {
        "APIs": [
            "map()",
            "list()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to convert List of Integer to List of String",
        "Source": "Tutorial Websites"
    },
    "2040": {
        "APIs": [
            "upper()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to convert String to Uppercase under the Given Condition",
        "Source": "Tutorial Websites"
    },
    "2041": {
        "APIs": [
            "set()",
            "chain.from_iterable()",
            "get()",
            "update()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python Program to create a sub-dictionary containing all keys from dictionary list",
        "Source": "Tutorial Websites"
    },
    "2042": {
        "APIs": [
            "keys()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to display keys with same values in a dictionary List",
        "Source": "Tutorial Websites"
    },
    "2043": {
        "APIs": [
            "keys()",
            "key()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to extract Dictionaries with given Key from a list of dictionaries",
        "Source": "Tutorial Websites"
    },
    "2044": {
        "APIs": [
            "len()",
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to extract dictionaries with maximum number of keys",
        "Source": "Tutorial Websites"
    },
    "2045": {
        "APIs": [
            "str()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to extracts elements from the list with digits in increasing order",
        "Source": "Tutorial Websites"
    },
    "2046": {
        "APIs": [
            "len()",
            "_sum()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to find sum of array",
        "Source": "Tutorial Websites"
    },
    "2047": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to find the Next Nearest element in a Matrix",
        "Source": "Tutorial Websites"
    },
    "2048": {
        "APIs": [
            "pow()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to find the cube of each list element",
        "Source": "Tutorial Websites"
    },
    "2049": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to find tuple indices from other tuple list",
        "Source": "Tutorial Websites"
    },
    "2050": {
        "APIs": [
            "sum()",
            "product()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to get K length groups with given summation",
        "Source": "Tutorial Websites"
    },
    "2051": {
        "APIs": [
            "set()",
            "keys()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to get all unique keys from a List of Dictionaries",
        "Source": "Tutorial Websites"
    },
    "2052": {
        "APIs": [
            "split()",
            "count()",
            "findall()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to get number of consecutive repeated substring",
        "Source": "Tutorial Websites"
    },
    "2053": {
        "APIs": [
            "open()",
            "read()",
            "write()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to merge two files into a third file",
        "Source": "Tutorial Websites"
    },
    "2054": {
        "APIs": [
            "isdigit()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to move numbers to the end of the string",
        "Source": "Tutorial Websites"
    },
    "2055": {
        "APIs": [
            "sorted()",
            "sum()",
            "sort()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to print a specific number of rows with Maximum Sum",
        "Source": "Tutorial Websites"
    },
    "2056": {
        "APIs": [
            "itertools.permutations()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python Program to print all Possible Combinations from the three Digits",
        "Source": "Tutorial Websites"
    },
    "2057": {
        "APIs": [
            "any()",
            "startswith()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to print strings based on the list of prefix",
        "Source": "Tutorial Websites"
    },
    "2058": {
        "APIs": [
            "count()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to print strings with repetitive occurrence of an element in a list",
        "Source": "Tutorial Websites"
    },
    "2059": {
        "APIs": [
            "keys()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to print sum of all key value pairs in a Dictionary",
        "Source": "Tutorial Websites"
    },
    "2060": {
        "APIs": [
            "str()",
            "join()",
            "int()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to remove a specific digit from every element of the list",
        "Source": "Tutorial Websites"
    },
    "2061": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to remove elements that are less than K difference away in a list",
        "Source": "Tutorial Websites"
    },
    "2062": {
        "APIs": [
            "extend()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to repeat elements at custom indices",
        "Source": "Tutorial Websites"
    },
    "2063": {
        "APIs": [
            "repeat()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to replace list elements within a range with a given number",
        "Source": "Tutorial Websites"
    },
    "2064": {
        "APIs": [
            "reversed()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to reverses alternate strings and then concatenates all elements",
        "Source": "Tutorial Websites"
    },
    "2065": {
        "APIs": [
            "sort()",
            "len()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to sort rows of a matrix by custom element count",
        "Source": "Tutorial Websites"
    },
    "2066": {
        "APIs": [
            "islice()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to split string into k sized overlapping strings",
        "Source": "Tutorial Websites"
    },
    "2067": {
        "APIs": [
            "isalpha()",
            "isdigit()",
            "any()",
            "all()",
            "isalnum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to test if the String only Numbers and Alphabets",
        "Source": "Tutorial Websites"
    },
    "2068": {
        "APIs": [
            "len()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Program to test whether the length of rows are in increasing order",
        "Source": "Tutorial Websites"
    },
    "2069": {
        "APIs": [
            "search()",
            "module.\u00a0re.search()"
        ],
        "APIClasses": [
            "module.\u00a0re"
        ],
        "OriginalQuery": "Python Regex | Program to accept string ending with alphanumeric character",
        "Source": "Tutorial Websites"
    },
    "2070": {
        "APIs": [
            "search()",
            "module.re.search()"
        ],
        "APIClasses": [
            "module.re"
        ],
        "OriginalQuery": "Python Regex \u2013 Program to accept string starting with vowel",
        "Source": "Tutorial Websites"
    },
    "2071": {
        "APIs": [
            "reversed()",
            "len()",
            "list()",
            "reverseGroup()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python Slicing | Reverse an array in groups of given size",
        "Source": "Tutorial Websites"
    },
    "2072": {
        "APIs": [
            "collections.Counter()"
        ],
        "APIClasses": [
            "collections"
        ],
        "OriginalQuery": "Python code to print common characters of two Strings in alphabetical order",
        "Source": "Tutorial Websites"
    },
    "2073": {
        "APIs": [
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python dictionary with keys having multiple inputs",
        "Source": "Tutorial Websites"
    },
    "2074": {
        "APIs": [
            "max()",
            "split()",
            "defaultdict()",
            "defauldict()",
            "mode()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program for most frequent word in Strings List",
        "Source": "Tutorial Websites"
    },
    "2075": {
        "APIs": [
            "remove()",
            "range()",
            "len()",
            "replace()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program for removing i-th character from a string",
        "Source": "Tutorial Websites"
    },
    "2076": {
        "APIs": [
            "zip()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program for sum of consecutive numbers with overlapping in lists",
        "Source": "Tutorial Websites"
    },
    "2077": {
        "APIs": [
            "any()",
            "intersection()",
            "enumerate()",
            "join()",
            "len()",
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to Check all strings are mutually disjoint",
        "Source": "Tutorial Websites"
    },
    "2078": {
        "APIs": [
            "join()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to Concatenate Kth index words of String",
        "Source": "Tutorial Websites"
    },
    "2079": {
        "APIs": [
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to Concatenate all Elements of a List into a String",
        "Source": "Tutorial Websites"
    },
    "2080": {
        "APIs": [
            "zip()",
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to Convert Matrix to Dictionary Value List",
        "Source": "Tutorial Websites"
    },
    "2081": {
        "APIs": [
            "convertToSparseMatrix()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to Convert a Matrix to Sparse Matrix",
        "Source": "Tutorial Websites"
    },
    "2082": {
        "APIs": [
            "isalpha()",
            "float()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to Convert a elements in a list of Tuples to Float",
        "Source": "Tutorial Websites"
    },
    "2083": {
        "APIs": [
            "all()",
            "len()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to Extract Mesh matching Strings",
        "Source": "Tutorial Websites"
    },
    "2084": {
        "APIs": [
            "search()",
            "regex()",
            "findall()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to Extract string till first Non-Alphanumeric character",
        "Source": "Tutorial Websites"
    },
    "2085": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to Flatten Nested List to Tuple List",
        "Source": "Tutorial Websites"
    },
    "2086": {
        "APIs": [
            "str()",
            "int()",
            "isdigit()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to Increment Numeric Strings by K",
        "Source": "Tutorial Websites"
    },
    "2087": {
        "APIs": [
            "findall()",
            "join()",
            "replace()",
            "sub()",
            "group()",
            "zfill()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to Increment Suffix Number in String",
        "Source": "Tutorial Websites"
    },
    "2088": {
        "APIs": [
            "count()",
            "enumerate()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to Mark duplicate elements in string",
        "Source": "Tutorial Websites"
    },
    "2089": {
        "APIs": [
            "index()",
            "count()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to Occurrences of i before first j in list",
        "Source": "Tutorial Websites"
    },
    "2090": {
        "APIs": [
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to Remove Duplicity from a Dictionary",
        "Source": "Tutorial Websites"
    },
    "2091": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to Replace all Characters of a List Except the given character",
        "Source": "Tutorial Websites"
    },
    "2092": {
        "APIs": [
            "reverse()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to Reverse a range in list",
        "Source": "Tutorial Websites"
    },
    "2093": {
        "APIs": [
            "sort()",
            "max()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to Sort Matrix by Maximum Row element",
        "Source": "Tutorial Websites"
    },
    "2094": {
        "APIs": [
            "sort()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to Sort Strings by Punctuation count",
        "Source": "Tutorial Websites"
    },
    "2095": {
        "APIs": [
            "max()",
            "sort()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to Sort Tuples by their Maximum element",
        "Source": "Tutorial Websites"
    },
    "2096": {
        "APIs": [
            "sort()",
            "sum()",
            "values()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to Sort a List of Dictionaries by the Sum of their Values",
        "Source": "Tutorial Websites"
    },
    "2097": {
        "APIs": [
            "sort()",
            "len()",
            "set()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to Sort a List of Strings by the Number of Unique Characters",
        "Source": "Tutorial Websites"
    },
    "2098": {
        "APIs": [
            "sorted()",
            "Sorted()",
            "sort()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to Sort a List of Tuples in Increasing Order by the Last Element in Each Tuple",
        "Source": "Tutorial Websites"
    },
    "2099": {
        "APIs": [
            "index()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to Test if all y occur after x in List",
        "Source": "Tutorial Websites"
    },
    "2100": {
        "APIs": [
            "upper()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to Uppercase selective indices",
        "Source": "Tutorial Websites"
    },
    "2101": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to add two Matrices",
        "Source": "Tutorial Websites"
    },
    "2102": {
        "APIs": [
            "input()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to add two numbers",
        "Source": "Tutorial Websites"
    },
    "2103": {
        "APIs": [
            "isnumeric()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to calculate the number of digits and letters in a string",
        "Source": "Tutorial Websites"
    },
    "2104": {
        "APIs": [
            "len()",
            "split()",
            "findall()",
            "sum()",
            "strip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to calculate the number of words and characters in the string",
        "Source": "Tutorial Websites"
    },
    "2105": {
        "APIs": [
            "join()",
            "map()",
            "upper()",
            "split()",
            "title()",
            "word_both_cap()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to capitalize the first and last character of each word in a string",
        "Source": "Tutorial Websites"
    },
    "2106": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to change values in a Dictionary",
        "Source": "Tutorial Websites"
    },
    "2107": {
        "APIs": [
            "isalpha()",
            "isdigit()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to check if a string has at least one letter and one number",
        "Source": "Tutorial Websites"
    },
    "2108": {
        "APIs": [
            "issuperset()",
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to check if any key has all the given list elements",
        "Source": "Tutorial Websites"
    },
    "2109": {
        "APIs": [
            "set()",
            "lower()",
            "ispangram()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to check if given string is pangram",
        "Source": "Tutorial Websites"
    },
    "2110": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to check if given value occurs atleast k times",
        "Source": "Tutorial Websites"
    },
    "2111": {
        "APIs": [
            "islower()",
            "isupper()",
            "ord()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to check if lowercase letters exist in a string",
        "Source": "Tutorial Websites"
    },
    "2112": {
        "APIs": [
            "math.log()",
            "str()",
            "int()",
            "log()",
            "rev()"
        ],
        "APIClasses": [
            "math"
        ],
        "OriginalQuery": "Python program to check if number is palindrome (one-liner)",
        "Source": "Tutorial Websites"
    },
    "2113": {
        "APIs": [
            "len()",
            "str.strip()",
            "strip()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python program to check if string is empty or not",
        "Source": "Tutorial Websites"
    },
    "2114": {
        "APIs": [
            "type()",
            "ip_address()",
            "validIPAddress()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to check if the given string is IPv4 or IPv6 or Invalid",
        "Source": "Tutorial Websites"
    },
    "2115": {
        "APIs": [
            "len()",
            "range()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to check if the list contains three consecutive common numbers in Python",
        "Source": "Tutorial Websites"
    },
    "2116": {
        "APIs": [
            "re.search()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python program to check the validity of a Password",
        "Source": "Tutorial Websites"
    },
    "2117": {
        "APIs": [
            "map()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to check whether number formed by combining all elements of the array is palindrome",
        "Source": "Tutorial Websites"
    },
    "2118": {
        "APIs": [
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to check whether the values of a dictionary are in same order as in a list",
        "Source": "Tutorial Websites"
    },
    "2119": {
        "APIs": [
            "map()",
            "sum()",
            "split()",
            "mul()",
            "eval()",
            "replace()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to compute arithmetic operation from String",
        "Source": "Tutorial Websites"
    },
    "2120": {
        "APIs": [
            "enumerate()",
            "pow()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to compute the power by Index element in List",
        "Source": "Tutorial Websites"
    },
    "2121": {
        "APIs": [
            "join()",
            "replace()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to concatenate Strings around K",
        "Source": "Tutorial Websites"
    },
    "2122": {
        "APIs": [
            "product()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to concatenate every elements across lists",
        "Source": "Tutorial Websites"
    },
    "2123": {
        "APIs": [
            "str()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to construct Equidigit tuples",
        "Source": "Tutorial Websites"
    },
    "2124": {
        "APIs": [
            "tuple()",
            "set()",
            "type()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to convert Set into Tuple and Tuple into Set",
        "Source": "Tutorial Websites"
    },
    "2125": {
        "APIs": [
            "index()",
            "ljust()",
            "ord()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to convert String to K sized Numerical Rows",
        "Source": "Tutorial Websites"
    },
    "2126": {
        "APIs": [
            "urllib.parse.parse_qs()",
            "urllib.parse()",
            "findall()",
            "setdefault()"
        ],
        "APIClasses": [
            "urllib.parse",
            "urllib"
        ],
        "OriginalQuery": "Python program to convert URL Parameters to Dictionary items",
        "Source": "Tutorial Websites"
    },
    "2127": {
        "APIs": [
            "split()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to convert a list of strings with a delimiter to a list of tuple",
        "Source": "Tutorial Websites"
    },
    "2128": {
        "APIs": [
            "union()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to convert a list to a set based on a common element",
        "Source": "Tutorial Websites"
    },
    "2129": {
        "APIs": [
            ".join()",
            "listToString()",
            "map()"
        ],
        "APIClasses": [
            ""
        ],
        "OriginalQuery": "Python program to convert a list to string",
        "Source": "Tutorial Websites"
    },
    "2130": {
        "APIs": [
            "reduce()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to convert camel case string to snake case",
        "Source": "Tutorial Websites"
    },
    "2131": {
        "APIs": [
            "int()",
            "ast.literal_eval()"
        ],
        "APIClasses": [
            "ast"
        ],
        "OriginalQuery": "Python program to convert hex string to decimal",
        "Source": "Tutorial Websites"
    },
    "2132": {
        "APIs": [
            "chain.from_iterable()",
            "list()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python program to convert tuple into list by adding the given string after every element",
        "Source": "Tutorial Websites"
    },
    "2133": {
        "APIs": [
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to count Even and Odd numbers in a Dictionary",
        "Source": "Tutorial Websites"
    },
    "2134": {
        "APIs": [
            "len()",
            "list()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to count Even and Odd numbers in a List",
        "Source": "Tutorial Websites"
    },
    "2135": {
        "APIs": [
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to count number of vowels using sets in given string",
        "Source": "Tutorial Websites"
    },
    "2136": {
        "APIs": [
            "len()",
            "list()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to count positive and negative numbers in a list",
        "Source": "Tutorial Websites"
    },
    "2137": {
        "APIs": [
            "isalpha()",
            "len()",
            "ascii_uppercase()",
            "ascii_lowercase()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to count the number of characters in a String",
        "Source": "Tutorial Websites"
    },
    "2138": {
        "APIs": [
            "count()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to count the number of spaces in string",
        "Source": "Tutorial Websites"
    },
    "2139": {
        "APIs": [
            "reversed()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to count the pairs of reverse strings",
        "Source": "Tutorial Websites"
    },
    "2140": {
        "APIs": [
            "isupper()",
            "islower()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to count upper and lower case characters without using inbuilt functions",
        "Source": "Tutorial Websites"
    },
    "2141": {
        "APIs": [
            "split()",
            "regex()",
            "sum()",
            "strip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to count words in a sentence",
        "Source": "Tutorial Websites"
    },
    "2142": {
        "APIs": [
            "eval()",
            "usingeval()",
            "dict()",
            "strip()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to create a dictionary from a string",
        "Source": "Tutorial Websites"
    },
    "2143": {
        "APIs": [
            "append()",
            "create()",
            "arange()",
            "tolist()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to create a list centered on zero",
        "Source": "Tutorial Websites"
    },
    "2144": {
        "APIs": [
            "pow()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to create a list of tuples from given list having number and its cube in each tuple",
        "Source": "Tutorial Websites"
    },
    "2145": {
        "APIs": [
            "count()",
            "max()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to equal character frequencies",
        "Source": "Tutorial Websites"
    },
    "2146": {
        "APIs": [
            "iskeyword()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to extract Keywords from a list",
        "Source": "Tutorial Websites"
    },
    "2147": {
        "APIs": [
            "sorted()",
            "nlargest()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to extract N largest dictionaries keys",
        "Source": "Tutorial Websites"
    },
    "2148": {
        "APIs": [
            "join()",
            "chain.from_iterable()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python program to extract characters in given range from a string list",
        "Source": "Tutorial Websites"
    },
    "2149": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to extract key-value pairs with substring in a dictionary",
        "Source": "Tutorial Websites"
    },
    "2150": {
        "APIs": [
            "isdigit()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to extract numeric suffix from string",
        "Source": "Tutorial Websites"
    },
    "2151": {
        "APIs": [
            "all()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to extract only the numbers from a list which have some specific digits",
        "Source": "Tutorial Websites"
    },
    "2152": {
        "APIs": [
            "type()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to extract rows from Matrix that has distinct data types",
        "Source": "Tutorial Websites"
    },
    "2153": {
        "APIs": [
            "set()",
            "union()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to extract the Unique Dictionary Value List elements",
        "Source": "Tutorial Websites"
    },
    "2154": {
        "APIs": [
            "itertools.compress()",
            "enumerate()",
            "filter()",
            "range()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python program to fetch the indices of true values in a Boolean list",
        "Source": "Tutorial Websites"
    },
    "2155": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to find Cumulative sum of a list",
        "Source": "Tutorial Websites"
    },
    "2156": {
        "APIs": [
            "re.finditer()",
            "finditer()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python program to find Indices of Overlapping Substrings",
        "Source": "Tutorial Websites"
    },
    "2157": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to find Maximum value from dictionary whose key is present in the list",
        "Source": "Tutorial Websites"
    },
    "2158": {
        "APIs": [
            "set.difference()"
        ],
        "APIClasses": [
            "set"
        ],
        "OriginalQuery": "Python program to find Sucessive row difference in Matrix",
        "Source": "Tutorial Websites"
    },
    "2159": {
        "APIs": [
            "all()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to find Tuples with positive elements in List of tuples",
        "Source": "Tutorial Websites"
    },
    "2160": {
        "APIs": [
            "pop()",
            "append()",
            "reverse()",
            "findPairs()",
            "Counter()",
            "subtract()",
            "combinations()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to find all possible pairs with given sum",
        "Source": "Tutorial Websites"
    },
    "2161": {
        "APIs": [
            "int()",
            "difference()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to find difference between current time and given time",
        "Source": "Tutorial Websites"
    },
    "2162": {
        "APIs": [
            "sort()",
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to find largest number in a list",
        "Source": "Tutorial Websites"
    },
    "2163": {
        "APIs": [
            "isupper()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to find maximum uppercase run",
        "Source": "Tutorial Websites"
    },
    "2164": {
        "APIs": [
            "set()",
            "count()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to find occurrence to each character in given string",
        "Source": "Tutorial Websites"
    },
    "2165": {
        "APIs": [
            "reduce()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to find product of given number of consecutive elements",
        "Source": "Tutorial Websites"
    },
    "2166": {
        "APIs": [
            "sorted()",
            "example_dict.values()",
            "list()"
        ],
        "APIClasses": [
            "example_dict"
        ],
        "OriginalQuery": "Python program to find second maximum value in Dictionary",
        "Source": "Tutorial Websites"
    },
    "2167": {
        "APIs": [
            "min()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to find smallest number in a list",
        "Source": "Tutorial Websites"
    },
    "2168": {
        "APIs": [
            "finditer()",
            "start()",
            "end()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to find start and end indices of all Words in a String",
        "Source": "Tutorial Websites"
    },
    "2169": {
        "APIs": [
            "enumerate()",
            "permutation()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to find sum of absolute difference between all pairs in a list",
        "Source": "Tutorial Websites"
    },
    "2170": {
        "APIs": [
            "while()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to find sum of elements in list",
        "Source": "Tutorial Websites"
    },
    "2171": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to find the Decreasing point in List",
        "Source": "Tutorial Websites"
    },
    "2172": {
        "APIs": [
            "count()",
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to find the String in a List",
        "Source": "Tutorial Websites"
    },
    "2173": {
        "APIs": [
            "enumerate()",
            "next()",
            "zip()",
            "count()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to find the character position of Kth word from a list of strings",
        "Source": "Tutorial Websites"
    },
    "2174": {
        "APIs": [
            "reduce()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to find the frequency of the elements which are common in a list of strings",
        "Source": "Tutorial Websites"
    },
    "2175": {
        "APIs": [
            "collections.Counter()",
            "heapq.nlargest()"
        ],
        "APIClasses": [
            "collections",
            "heapq"
        ],
        "OriginalQuery": "Python program to find the highest 3 values in a dictionary",
        "Source": "Tutorial Websites"
    },
    "2176": {
        "APIs": [
            "max()",
            "values()",
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to find the key of maximum value tuples in a dictionary",
        "Source": "Tutorial Websites"
    },
    "2177": {
        "APIs": [
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to find the most occurring character and its count",
        "Source": "Tutorial Websites"
    },
    "2178": {
        "APIs": [
            "split()",
            "index()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to find the occurrence of substring in the string",
        "Source": "Tutorial Websites"
    },
    "2179": {
        "APIs": [
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to find the redundancy rates for each row of a matrix",
        "Source": "Tutorial Websites"
    },
    "2180": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to find the string weight",
        "Source": "Tutorial Websites"
    },
    "2181": {
        "APIs": [
            "ord()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to find the sum of Characters ascii values in String List",
        "Source": "Tutorial Websites"
    },
    "2182": {
        "APIs": [
            "str()",
            "int()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to find the sum of all even and odd digits of an integer list",
        "Source": "Tutorial Websites"
    },
    "2183": {
        "APIs": [
            "returnSum()",
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to find the sum of all items in a dictionary",
        "Source": "Tutorial Websites"
    },
    "2184": {
        "APIs": [
            "keys()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to find the sum of dictionary keys",
        "Source": "Tutorial Websites"
    },
    "2185": {
        "APIs": [
            "reduce()",
            "Counter()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to find the sum of the value in the dictionary where the key represents the frequency",
        "Source": "Tutorial Websites"
    },
    "2186": {
        "APIs": [
            "all()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to find tuples which have all elements divisible by K from a list of tuples",
        "Source": "Tutorial Websites"
    },
    "2187": {
        "APIs": [
            "chr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to generate a list of alphabets in lexical order",
        "Source": "Tutorial Websites"
    },
    "2188": {
        "APIs": [
            "timezone()",
            "now()",
            "strftime()",
            "time()",
            "localtime()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to get Current Time",
        "Source": "Tutorial Websites"
    },
    "2189": {
        "APIs": [
            "permutations()",
            "combinations()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to get all pairwise combinations from a list",
        "Source": "Tutorial Websites"
    },
    "2190": {
        "APIs": [
            "combinations()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to get all possible slices of a string for K number of slices",
        "Source": "Tutorial Websites"
    },
    "2191": {
        "APIs": [
            "permutation()",
            "zip()",
            "product()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to get all unique combinations of two Lists",
        "Source": "Tutorial Websites"
    },
    "2192": {
        "APIs": [
            "items()",
            "max()",
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to get maximum of each key Dictionary List",
        "Source": "Tutorial Websites"
    },
    "2193": {
        "APIs": [
            "setdefault()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to get the indices of each element of one list in another list",
        "Source": "Tutorial Websites"
    },
    "2194": {
        "APIs": [
            "set()",
            "sorted()",
            "index()",
            "next()",
            "iter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to get the next unrevealed element for the given element",
        "Source": "Tutorial Websites"
    },
    "2195": {
        "APIs": [
            "any()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to group keys with similar values in a dictionary",
        "Source": "Tutorial Websites"
    },
    "2196": {
        "APIs": [
            "range()",
            "len()",
            "insert()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to insert an element into sorted list",
        "Source": "Tutorial Websites"
    },
    "2197": {
        "APIs": [
            "len()",
            "swapList()",
            "list.pop()"
        ],
        "APIClasses": [
            "list"
        ],
        "OriginalQuery": "Python program to interchange first and last elements in a list",
        "Source": "Tutorial Websites"
    },
    "2198": {
        "APIs": [
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to mask a list using values from another list",
        "Source": "Tutorial Websites"
    },
    "2199": {
        "APIs": [
            "len()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to omit K length Rows",
        "Source": "Tutorial Websites"
    },
    "2200": {
        "APIs": [
            "all()",
            "count()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to print Rows where all its Elements\u2019 frequency is greater than K",
        "Source": "Tutorial Websites"
    },
    "2201": {
        "APIs": [
            "range()",
            "int()",
            "input()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to print all even numbers in a range",
        "Source": "Tutorial Websites"
    },
    "2202": {
        "APIs": [
            "range()",
            "int()",
            "input()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to print all negative numbers in a range",
        "Source": "Tutorial Websites"
    },
    "2203": {
        "APIs": [
            "range()",
            "int()",
            "input()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to print all odd numbers in a range",
        "Source": "Tutorial Websites"
    },
    "2204": {
        "APIs": [
            "range()",
            "int()",
            "input()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to print all positive numbers in a range",
        "Source": "Tutorial Websites"
    },
    "2205": {
        "APIs": [
            "all()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to print elements which are multiples of elements given in a list",
        "Source": "Tutorial Websites"
    },
    "2206": {
        "APIs": [
            "split()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to print even length words in a string",
        "Source": "Tutorial Websites"
    },
    "2207": {
        "APIs": [
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to print k characters then skip k characters in a string",
        "Source": "Tutorial Websites"
    },
    "2208": {
        "APIs": [
            "len()",
            "list()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to print negative numbers in a list",
        "Source": "Tutorial Websites"
    },
    "2209": {
        "APIs": [
            "len()",
            "list()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to print positive numbers in a list",
        "Source": "Tutorial Websites"
    },
    "2210": {
        "APIs": [
            "shuffle()",
            "product()",
            "sample()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to randomly create N Lists of K size",
        "Source": "Tutorial Websites"
    },
    "2211": {
        "APIs": [
            "open()",
            "read()",
            "close()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to read character by character from a file",
        "Source": "Tutorial Websites"
    },
    "2212": {
        "APIs": [
            "split()",
            "join()",
            "len()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to remove K length words in String",
        "Source": "Tutorial Websites"
    },
    "2213": {
        "APIs": [
            "append()",
            "RemoveIthWord()",
            "pop()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to remove Nth occurrence of the given word",
        "Source": "Tutorial Websites"
    },
    "2214": {
        "APIs": [
            "index()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to remove each y occurrence before x in List",
        "Source": "Tutorial Websites"
    },
    "2215": {
        "APIs": [
            "any()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to remove row with custom list element",
        "Source": "Tutorial Websites"
    },
    "2216": {
        "APIs": [
            "set()",
            "len()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to remove rows with duplicate element in Matrix",
        "Source": "Tutorial Websites"
    },
    "2217": {
        "APIs": [
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to remove words that are common in two Strings",
        "Source": "Tutorial Websites"
    },
    "2218": {
        "APIs": [
            "enumerate()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to replace every Nth character in String",
        "Source": "Tutorial Websites"
    },
    "2219": {
        "APIs": [
            "enumerate()",
            "zip()",
            "extend()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to return rows that have have element at a specified index",
        "Source": "Tutorial Websites"
    },
    "2220": {
        "APIs": [
            "reversed()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to reverse alternate characters in a string",
        "Source": "Tutorial Websites"
    },
    "2221": {
        "APIs": [
            "range()",
            "len()",
            "append()",
            "rightRotate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to right rotate a list by n",
        "Source": "Tutorial Websites"
    },
    "2222": {
        "APIs": [
            "chain.from_iterable()",
            "random.choice()",
            "from_iterable()",
            "choice()"
        ],
        "APIClasses": [
            "chain",
            "random"
        ],
        "OriginalQuery": "Python program to select Random value form list of lists",
        "Source": "Tutorial Websites"
    },
    "2223": {
        "APIs": [
            "len()",
            "sort()",
            "items()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to sort Dictionary by Key Lengths",
        "Source": "Tutorial Websites"
    },
    "2224": {
        "APIs": [
            "values()",
            "max()",
            "sort()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to sort a dictionary list based on the maximum value",
        "Source": "Tutorial Websites"
    },
    "2225": {
        "APIs": [
            "sort()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to sort a list of tuples alphabetically",
        "Source": "Tutorial Websites"
    },
    "2226": {
        "APIs": [
            "sort()",
            "sorted()",
            "Sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to sort a list of tuples by second Item",
        "Source": "Tutorial Websites"
    },
    "2227": {
        "APIs": [
            "join()",
            "sorted()",
            "reduce()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to sort a string",
        "Source": "Tutorial Websites"
    },
    "2228": {
        "APIs": [
            "sort()",
            "sum()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to sort matrix based upon sum of rows",
        "Source": "Tutorial Websites"
    },
    "2229": {
        "APIs": [
            "sort()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to sort strings by substring range",
        "Source": "Tutorial Websites"
    },
    "2230": {
        "APIs": [
            "sorted()",
            "abs()",
            "count()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to sort tuples by frequency of their absolute difference",
        "Source": "Tutorial Websites"
    },
    "2231": {
        "APIs": [
            "re.split()",
            "split()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python program to split a string by the given list of strings",
        "Source": "Tutorial Websites"
    },
    "2232": {
        "APIs": [
            "split()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to split and join a string",
        "Source": "Tutorial Websites"
    },
    "2233": {
        "APIs": [
            "split()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to split the string and convert it to dictionary",
        "Source": "Tutorial Websites"
    },
    "2234": {
        "APIs": [
            "list.pop()"
        ],
        "APIClasses": [
            "list"
        ],
        "OriginalQuery": "Python program to swap two elements in a list",
        "Source": "Tutorial Websites"
    },
    "2235": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to test for Non-neighbours in List",
        "Source": "Tutorial Websites"
    },
    "2236": {
        "APIs": [
            "sort()",
            "min()",
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to test if all elements in list are maximum of K apart",
        "Source": "Tutorial Websites"
    },
    "2237": {
        "APIs": [
            "defaultdict()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to unique keys count for Value in Tuple List",
        "Source": "Tutorial Websites"
    },
    "2238": {
        "APIs": [
            "update()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to update a dictionary with the values from a dictionary list",
        "Source": "Tutorial Websites"
    },
    "2239": {
        "APIs": [
            "uppercase()",
            "upper()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to uppercase the given characters",
        "Source": "Tutorial Websites"
    },
    "2240": {
        "APIs": [
            "issubset()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python program to verify that a string only contains letters, numbers, underscores and dashes",
        "Source": "Tutorial Websites"
    },
    "2241": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python progran to extract rows with common difference elements",
        "Source": "Tutorial Websites"
    },
    "2242": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python prorgam to remove duplicate elements index from other list",
        "Source": "Tutorial Websites"
    },
    "2243": {
        "APIs": [
            "re.search()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python regex to find sequences of one upper case letter followed by lower case letters",
        "Source": "Tutorial Websites"
    },
    "2244": {
        "APIs": [
            "range()",
            "len()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Above K elements summation",
        "Source": "Tutorial Websites"
    },
    "2245": {
        "APIs": [
            "abs()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Absolute value of list elements",
        "Source": "Tutorial Websites"
    },
    "2246": {
        "APIs": [
            "dict.items()",
            "items()",
            "enumerate()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Python | Accessing Key-value in Dictionary",
        "Source": "Tutorial Websites"
    },
    "2247": {
        "APIs": [
            "map()",
            "operator.itemgetter()"
        ],
        "APIClasses": [
            "operator"
        ],
        "OriginalQuery": "Python | Accessing all elements at given list of indexes",
        "Source": "Tutorial Websites"
    },
    "2248": {
        "APIs": [
            "range()",
            "len()",
            "list()",
            "enumerate()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Accessing index and value in list",
        "Source": "Tutorial Websites"
    },
    "2249": {
        "APIs": [
            "map()",
            "itemgetter()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Accessing nth element from tuples in list",
        "Source": "Tutorial Websites"
    },
    "2250": {
        "APIs": [
            "accumulate()",
            "sum()",
            "map()",
            "tuple()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Accumulative index summation in tuple list",
        "Source": "Tutorial Websites"
    },
    "2251": {
        "APIs": [
            "str.format()",
            "format()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python | Add comma between numbers",
        "Source": "Tutorial Websites"
    },
    "2252": {
        "APIs": [
            "list()",
            "tuple()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Add dictionary to tuple",
        "Source": "Tutorial Websites"
    },
    "2253": {
        "APIs": [
            "join()",
            "list()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Add element at alternate position in list",
        "Source": "Tutorial Websites"
    },
    "2254": {
        "APIs": [
            "update()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Add keys to nested dictionary",
        "Source": "Tutorial Websites"
    },
    "2255": {
        "APIs": [
            "rjust()",
            "format()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Add leading K character",
        "Source": "Tutorial Websites"
    },
    "2256": {
        "APIs": [
            "rjust()",
            "zfill()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Add leading Zeros to string",
        "Source": "Tutorial Websites"
    },
    "2257": {
        "APIs": [
            "deque.extendleft()",
            "reversed()",
            "extendleft()"
        ],
        "APIClasses": [
            "deque"
        ],
        "OriginalQuery": "Python | Add list at beginning of list",
        "Source": "Tutorial Websites"
    },
    "2258": {
        "APIs": [
            "range()",
            "len()",
            "append()",
            "enumerate()",
            "Zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Add list elements with a multi-list based on index",
        "Source": "Tutorial Websites"
    },
    "2259": {
        "APIs": [
            "dict()",
            "my_dictionary()",
            "add()",
            "update()",
            "__setitem__()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Add new keys to a dictionary",
        "Source": "Tutorial Websites"
    },
    "2260": {
        "APIs": [
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Add one string to another",
        "Source": "Tutorial Websites"
    },
    "2261": {
        "APIs": [
            "filter()",
            "sum()",
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Add only numeric values present in a list",
        "Source": "Tutorial Websites"
    },
    "2262": {
        "APIs": [
            "extend()",
            "itertools.repeat()",
            "repeat()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Add similar value multiple times in list",
        "Source": "Tutorial Websites"
    },
    "2263": {
        "APIs": [
            "join()",
            "list()",
            "insert()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Add substring at specific index",
        "Source": "Tutorial Websites"
    },
    "2264": {
        "APIs": [
            "count()",
            "append()",
            "count_occur()",
            "counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Add the occurrence of each number as sublists",
        "Source": "Tutorial Websites"
    },
    "2265": {
        "APIs": [
            "ljust()",
            "format()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Add trailing Zeros to string",
        "Source": "Tutorial Websites"
    },
    "2266": {
        "APIs": [
            "insert()",
            "deque()",
            "appendleft()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Add tuple to front of list",
        "Source": "Tutorial Websites"
    },
    "2267": {
        "APIs": [
            "map()",
            "list()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Adding K to each element in a list of integers",
        "Source": "Tutorial Websites"
    },
    "2268": {
        "APIs": [
            "range()",
            "len()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Adding N to Kth tuple element",
        "Source": "Tutorial Websites"
    },
    "2269": {
        "APIs": [
            "range()",
            "len()",
            "append()",
            "map()",
            "add()",
            "zip()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Adding two list elements",
        "Source": "Tutorial Websites"
    },
    "2270": {
        "APIs": [
            "map()",
            "zip()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Addition of tuples",
        "Source": "Tutorial Websites"
    },
    "2271": {
        "APIs": [
            "Counter()",
            "groupby()",
            "map()",
            "itemgetter()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Aggregate values by tuple keys",
        "Source": "Tutorial Websites"
    },
    "2272": {
        "APIs": [
            "startswith()",
            "re.finditer()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python | All occurrences of substring in string",
        "Source": "Tutorial Websites"
    },
    "2273": {
        "APIs": [
            "product()",
            "range()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | All possible N combination tuples",
        "Source": "Tutorial Websites"
    },
    "2274": {
        "APIs": [
            "itertools.product()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | All possible permutations of N lists",
        "Source": "Tutorial Websites"
    },
    "2275": {
        "APIs": [
            "enumerate()",
            "itertools.groupby()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Altering duplicate values from given list",
        "Source": "Tutorial Websites"
    },
    "2276": {
        "APIs": [
            "reversed()",
            "islice()",
            "iter()",
            "cycle()",
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Alternate Cycling in list",
        "Source": "Tutorial Websites"
    },
    "2277": {
        "APIs": [
            "join()",
            "enumerate()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Alternate Sort in String list",
        "Source": "Tutorial Websites"
    },
    "2278": {
        "APIs": [
            "upper()",
            "lower()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Alternate cases in String",
        "Source": "Tutorial Websites"
    },
    "2279": {
        "APIs": [
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Alternate character addition",
        "Source": "Tutorial Websites"
    },
    "2280": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Alternate element summation in list",
        "Source": "Tutorial Websites"
    },
    "2281": {
        "APIs": [
            "len()",
            "range()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Alternate front \u2013 rear Sum",
        "Source": "Tutorial Websites"
    },
    "2282": {
        "APIs": [
            "range()",
            "len()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Alternate range slicing in list",
        "Source": "Tutorial Websites"
    },
    "2283": {
        "APIs": [
            "join()",
            "zip_longest()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Alternate vowels and consonents in String",
        "Source": "Tutorial Websites"
    },
    "2284": {
        "APIs": [
            "upper()",
            "range()",
            "system()",
            "max()",
            "len()",
            "sleep()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Animated Banner showing \u2018GeeksForGeeks\u2019",
        "Source": "Tutorial Websites"
    },
    "2285": {
        "APIs": [
            "ljust()",
            "format()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Append K character N times",
        "Source": "Tutorial Websites"
    },
    "2286": {
        "APIs": [
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Append String to list",
        "Source": "Tutorial Websites"
    },
    "2287": {
        "APIs": [
            "collections.deque()"
        ],
        "APIClasses": [
            "collections"
        ],
        "OriginalQuery": "Python | Append at front and remove from rear",
        "Source": "Tutorial Websites"
    },
    "2288": {
        "APIs": [
            "itertools.chain()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Append multiple lists at once",
        "Source": "Tutorial Websites"
    },
    "2289": {
        "APIs": [
            "randrange()",
            "random.sample()"
        ],
        "APIClasses": [
            "random"
        ],
        "OriginalQuery": "Python | Arbitrary List Product",
        "Source": "Tutorial Websites"
    },
    "2290": {
        "APIs": [
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Arrange Tuples consecutively in list",
        "Source": "Tutorial Websites"
    },
    "2291": {
        "APIs": [
            "defaultdict()",
            "len()",
            "OrderedDict.fromkeys()",
            "enumerate()"
        ],
        "APIClasses": [
            "OrderedDict"
        ],
        "OriginalQuery": "Python | Assign ids to each unique value in a list",
        "Source": "Tutorial Websites"
    },
    "2292": {
        "APIs": [
            "itemgetter()",
            "itertools.compress()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Assign multiple variables with list values",
        "Source": "Tutorial Websites"
    },
    "2293": {
        "APIs": [
            "extend()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Assign range of elements to List",
        "Source": "Tutorial Websites"
    },
    "2294": {
        "APIs": [
            "enumerate()",
            "setdefault()",
            "map()",
            "count()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Assign value to unique number in list",
        "Source": "Tutorial Websites"
    },
    "2295": {
        "APIs": [
            "map()",
            "zip()",
            "itertools.repeat()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Associating a single value with all list items",
        "Source": "Tutorial Websites"
    },
    "2296": {
        "APIs": [
            "sum()",
            "len()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Average String length in list",
        "Source": "Tutorial Websites"
    },
    "2297": {
        "APIs": [
            "len()",
            "statistics.fmean()",
            "fmean()"
        ],
        "APIClasses": [
            "statistics"
        ],
        "OriginalQuery": "Python | Average of Float Numbers",
        "Source": "Tutorial Websites"
    },
    "2298": {
        "APIs": [
            "sum()",
            "range()",
            "len()",
            "zip()",
            "islice()",
            "list()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Average of each n-length consecutive segment in a list",
        "Source": "Tutorial Websites"
    },
    "2299": {
        "APIs": [
            "sum()",
            "len()",
            "chain()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Average of two lists",
        "Source": "Tutorial Websites"
    },
    "2300": {
        "APIs": [
            "join()",
            "print()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Avoiding quotes while printing strings",
        "Source": "Tutorial Websites"
    },
    "2301": {
        "APIs": [
            "zip()",
            "defaultdict()",
            "sorted()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Binary Group Tuple list elements",
        "Source": "Tutorial Websites"
    },
    "2302": {
        "APIs": [
            "set()",
            "map()",
            "itertools.groupby()",
            "itemgetter()",
            "collections.defaultdict()"
        ],
        "APIClasses": [
            "itertools",
            "collections"
        ],
        "OriginalQuery": "Python | Binary element list grouping",
        "Source": "Tutorial Websites"
    },
    "2303": {
        "APIs": [
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Binary list to integer",
        "Source": "Tutorial Websites"
    },
    "2304": {
        "APIs": [
            "reduce()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Bitwise OR among List elements",
        "Source": "Tutorial Websites"
    },
    "2305": {
        "APIs": [
            "all()",
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Boolean List AND and OR operations",
        "Source": "Tutorial Websites"
    },
    "2306": {
        "APIs": [
            "range()",
            "bytearray()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Boolean list initialization",
        "Source": "Tutorial Websites"
    },
    "2307": {
        "APIs": [
            "zip()",
            "append()",
            "range()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Calculate difference between adjacent elements in given list",
        "Source": "Tutorial Websites"
    },
    "2308": {
        "APIs": [
            "split()",
            "product()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Cartesian product of string elements",
        "Source": "Tutorial Websites"
    },
    "2309": {
        "APIs": [
            "map()",
            "sum()",
            "isupper()",
            "islower()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Case Counter in String",
        "Source": "Tutorial Websites"
    },
    "2310": {
        "APIs": [
            "next()",
            "sorted()",
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Categorize the given list by string size",
        "Source": "Tutorial Websites"
    },
    "2311": {
        "APIs": [
            "setdefault()",
            "setdafault()",
            "dict()",
            "frozenset()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Categorize tuple values into dictionary value list",
        "Source": "Tutorial Websites"
    },
    "2312": {
        "APIs": [
            "search()",
            "bool()",
            "isdigit()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check Numeric Suffix in String",
        "Source": "Tutorial Websites"
    },
    "2313": {
        "APIs": [
            "enumerate()",
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check element for range occurrence",
        "Source": "Tutorial Websites"
    },
    "2314": {
        "APIs": [
            "ord()",
            "all()",
            "encode()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check for ASCII string",
        "Source": "Tutorial Websites"
    },
    "2315": {
        "APIs": [
            "sort()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check for Descending Sorted List",
        "Source": "Tutorial Websites"
    },
    "2316": {
        "APIs": [
            "all()",
            "len()",
            "count()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check for None Tuple",
        "Source": "Tutorial Websites"
    },
    "2317": {
        "APIs": [
            "all()",
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check for None values in given dictionary",
        "Source": "Tutorial Websites"
    },
    "2318": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check for Nth index existence in list",
        "Source": "Tutorial Websites"
    },
    "2319": {
        "APIs": [
            "findall()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check for URL in a String",
        "Source": "Tutorial Websites"
    },
    "2320": {
        "APIs": [
            "any()",
            "search()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check for Whitespace in List",
        "Source": "Tutorial Websites"
    },
    "2321": {
        "APIs": [
            "isdigit()",
            "replace()",
            "float()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check for float string",
        "Source": "Tutorial Websites"
    },
    "2322": {
        "APIs": [
            "search()",
            "bool()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check for spaces in string",
        "Source": "Tutorial Websites"
    },
    "2323": {
        "APIs": [
            "all()",
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if Non-None values are contiguous",
        "Source": "Tutorial Websites"
    },
    "2324": {
        "APIs": [
            "find()",
            "line.find()",
            "\u201ccount()",
            "check()"
        ],
        "APIClasses": [
            "line"
        ],
        "OriginalQuery": "Python | Check if a Substring is Present in a Given String",
        "Source": "Tutorial Websites"
    },
    "2325": {
        "APIs": [
            "isinstance()",
            "type()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if a given object is list or not",
        "Source": "Tutorial Websites"
    },
    "2326": {
        "APIs": [
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if a list exists in given list of lists",
        "Source": "Tutorial Websites"
    },
    "2327": {
        "APIs": [
            "len()",
            "any()",
            "range()",
            "removeElements()",
            "join()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if a list is contained in another list",
        "Source": "Tutorial Websites"
    },
    "2328": {
        "APIs": [
            "checkSubset()",
            "append()",
            "tuple()",
            "set()",
            "all()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if a nested list is a subset of another nested list",
        "Source": "Tutorial Websites"
    },
    "2329": {
        "APIs": [
            "isinstance()",
            "type()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if a variable is string",
        "Source": "Tutorial Websites"
    },
    "2330": {
        "APIs": [
            "all()",
            "count()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if all elements in a List are same",
        "Source": "Tutorial Websites"
    },
    "2331": {
        "APIs": [
            "all()",
            "check()",
            "count()",
            "len()",
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if all elements in a list are identical",
        "Source": "Tutorial Websites"
    },
    "2332": {
        "APIs": [
            "all()",
            "itertools.takewhile()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Check if all elements in list follow a condition",
        "Source": "Tutorial Websites"
    },
    "2333": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if all the values in a list are less than a given value",
        "Source": "Tutorial Websites"
    },
    "2334": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if all the values in a list that are greater than a given value",
        "Source": "Tutorial Websites"
    },
    "2335": {
        "APIs": [
            "all()",
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if all values are 0 in dictionary",
        "Source": "Tutorial Websites"
    },
    "2336": {
        "APIs": [
            "any()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if any String is empty in list",
        "Source": "Tutorial Websites"
    },
    "2337": {
        "APIs": [
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if any element in list satisfies a condition",
        "Source": "Tutorial Websites"
    },
    "2338": {
        "APIs": [
            "bool()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if dictionary is empty",
        "Source": "Tutorial Websites"
    },
    "2339": {
        "APIs": [
            "any()",
            "itertools.chain()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Check if element exists in list of lists",
        "Source": "Tutorial Websites"
    },
    "2340": {
        "APIs": [
            "any()",
            "itertools.chain()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Check if element is present in tuple of tuples",
        "Source": "Tutorial Websites"
    },
    "2341": {
        "APIs": [
            "map()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if front digit is Odd in list",
        "Source": "Tutorial Websites"
    },
    "2342": {
        "APIs": [
            "issubset()",
            "subset()",
            "keys()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if given multiple keys exist in a dictionary",
        "Source": "Tutorial Websites"
    },
    "2343": {
        "APIs": [
            "regex\u00a0re.search()",
            "string.isnumeric()"
        ],
        "APIClasses": [
            "regex\u00a0re",
            "string"
        ],
        "OriginalQuery": "Python | Check if given string is numeric or not",
        "Source": "Tutorial Websites"
    },
    "2344": {
        "APIs": [
            "all()",
            "range()",
            "len()",
            "check()",
            "append()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if given words appear together in a list of sentence",
        "Source": "Tutorial Websites"
    },
    "2345": {
        "APIs": [
            "sum()",
            "next()",
            "islice()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if k occurs atleast n times in a list",
        "Source": "Tutorial Websites"
    },
    "2346": {
        "APIs": [
            "bool()",
            "get()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if key has Non-None value in dictionary",
        "Source": "Tutorial Websites"
    },
    "2347": {
        "APIs": [
            "len()",
            "set()",
            "Counter.itervalues()"
        ],
        "APIClasses": [
            "Counter"
        ],
        "OriginalQuery": "Python | Check if list contains all unique elements",
        "Source": "Tutorial Websites"
    },
    "2348": {
        "APIs": [
            "sorted()",
            "numpy.diff()",
            "diff()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Python | Check if list contains consecutive numbers",
        "Source": "Tutorial Websites"
    },
    "2349": {
        "APIs": [
            "isinstance()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if list is Matrix",
        "Source": "Tutorial Websites"
    },
    "2350": {
        "APIs": [
            "sort()",
            "sorted()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if list is sorted or not",
        "Source": "Tutorial Websites"
    },
    "2351": {
        "APIs": [
            "all()",
            "zip()",
            "reduce()",
            "lambdareduce()",
            "itertools.starmap()",
            "starmap()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Check if list is strictly increasing",
        "Source": "Tutorial Websites"
    },
    "2352": {
        "APIs": [
            "all()",
            "items()",
            "get()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if one dictionary is subset of other",
        "Source": "Tutorial Websites"
    },
    "2353": {
        "APIs": [
            "all()",
            "set.issubset()",
            "set.intersection()"
        ],
        "APIClasses": [
            "set",
            "set"
        ],
        "OriginalQuery": "Python | Check if one list is subset of other",
        "Source": "Tutorial Websites"
    },
    "2354": {
        "APIs": [
            "issubset()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if one tuple is subset of other",
        "Source": "Tutorial Websites"
    },
    "2355": {
        "APIs": [
            "filter()",
            "endswith()",
            "list()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if string ends with any string in given list",
        "Source": "Tutorial Websites"
    },
    "2356": {
        "APIs": [
            "re.match()",
            "match()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python | Check if string matches regex list",
        "Source": "Tutorial Websites"
    },
    "2357": {
        "APIs": [
            "find()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if string repeats itself",
        "Source": "Tutorial Websites"
    },
    "2358": {
        "APIs": [
            "join()",
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if substring is part of List of Strings",
        "Source": "Tutorial Websites"
    },
    "2359": {
        "APIs": [
            "str.find()",
            "str.index()",
            "operator.contains()"
        ],
        "APIClasses": [
            "str",
            "str",
            "operator"
        ],
        "OriginalQuery": "Python | Check if substring present in string",
        "Source": "Tutorial Websites"
    },
    "2360": {
        "APIs": [
            "any()",
            "filter()",
            "lambda()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if suffix matches with any string in given list",
        "Source": "Tutorial Websites"
    },
    "2361": {
        "APIs": [
            "range()",
            "len()",
            "all()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if tuple and list are identical",
        "Source": "Tutorial Websites"
    },
    "2362": {
        "APIs": [
            "get()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if tuple exists as dictionary key",
        "Source": "Tutorial Websites"
    },
    "2363": {
        "APIs": [
            "any()",
            "map()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if tuple has any None value",
        "Source": "Tutorial Websites"
    },
    "2364": {
        "APIs": [
            "cmp()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if two list of tuples are identical",
        "Source": "Tutorial Websites"
    },
    "2365": {
        "APIs": [
            "list.sort()",
            "operatorsort()",
            "collections.Counter()",
            "Counter()",
            "sum()",
            "zip()",
            "len()",
            "reduce()",
            "map()"
        ],
        "APIClasses": [
            "list",
            "collections"
        ],
        "OriginalQuery": "Python | Check if two lists are identical",
        "Source": "Tutorial Websites"
    },
    "2366": {
        "APIs": [
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if two lists have any element in common",
        "Source": "Tutorial Websites"
    },
    "2367": {
        "APIs": [
            "common_data()",
            "set()",
            "common_member()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if two lists have at-least one element common",
        "Source": "Tutorial Websites"
    },
    "2368": {
        "APIs": [
            "type()",
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check if variable is tuple",
        "Source": "Tutorial Websites"
    },
    "2369": {
        "APIs": [
            "isinstance()",
            "isintance()",
            "map()",
            "type()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check order specific data type in tuple",
        "Source": "Tutorial Websites"
    },
    "2370": {
        "APIs": [
            "isdigit()",
            "match()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check whether string contains only numbers or not",
        "Source": "Tutorial Websites"
    },
    "2371": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Check whether two lists are circularly identical",
        "Source": "Tutorial Websites"
    },
    "2372": {
        "APIs": [
            "map()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Checking if starting digits are similar in list",
        "Source": "Tutorial Websites"
    },
    "2373": {
        "APIs": [
            "sort()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Checking triangular inequality on list of lists",
        "Source": "Tutorial Websites"
    },
    "2374": {
        "APIs": [
            "range()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Chuncked summation every K value",
        "Source": "Tutorial Websites"
    },
    "2375": {
        "APIs": [
            "range()",
            "len()",
            "zip()",
            "iter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Chunk Tuples to N",
        "Source": "Tutorial Websites"
    },
    "2376": {
        "APIs": [
            "clear()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Clearing list as dictionary value",
        "Source": "Tutorial Websites"
    },
    "2377": {
        "APIs": [
            "sum()",
            "append()",
            "len()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Column Average in Record List",
        "Source": "Tutorial Websites"
    },
    "2378": {
        "APIs": [
            "sum()",
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Column Mean in tuple list",
        "Source": "Tutorial Websites"
    },
    "2379": {
        "APIs": [
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Column Product in List of lists",
        "Source": "Tutorial Websites"
    },
    "2380": {
        "APIs": [
            "pop()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Column deletion from list of lists",
        "Source": "Tutorial Websites"
    },
    "2381": {
        "APIs": [
            "sum()",
            "filter()",
            "map()",
            "zip_longest()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Column summation in uneven sized lists",
        "Source": "Tutorial Websites"
    },
    "2382": {
        "APIs": [
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Column summation of tuples",
        "Source": "Tutorial Websites"
    },
    "2383": {
        "APIs": [
            "sum()",
            "zip()",
            "column_sum()",
            "map()",
            "numpy.sum()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Python | Column wise sum of nested list",
        "Source": "Tutorial Websites"
    },
    "2384": {
        "APIs": [
            "combinations()",
            "combination()",
            "extend()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Combinations of elements till size N in list",
        "Source": "Tutorial Websites"
    },
    "2385": {
        "APIs": [
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Combine the values of two dictionaries having same key",
        "Source": "Tutorial Websites"
    },
    "2386": {
        "APIs": [
            "collections.Counter()",
            "itertools.chain()"
        ],
        "APIClasses": [
            "collections",
            "itertools"
        ],
        "OriginalQuery": "Python | Combine two dictionary adding values for common keys",
        "Source": "Tutorial Websites"
    },
    "2387": {
        "APIs": [
            "list()",
            "extend()",
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Combine two lists by maintaining duplicates in first list",
        "Source": "Tutorial Websites"
    },
    "2388": {
        "APIs": [
            "product()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Combining tuples in list of tuples",
        "Source": "Tutorial Websites"
    },
    "2389": {
        "APIs": [
            "len()",
            "append()",
            "sorted()",
            "heapq.merge()"
        ],
        "APIClasses": [
            "heapq"
        ],
        "OriginalQuery": "Python | Combining two sorted lists",
        "Source": "Tutorial Websites"
    },
    "2390": {
        "APIs": [
            "zip()",
            "product()",
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Combining values from dictionary of list",
        "Source": "Tutorial Websites"
    },
    "2391": {
        "APIs": [
            "reduce()",
            "set()",
            "sum()",
            "map()",
            "intersection()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Common Row elements Summation",
        "Source": "Tutorial Websites"
    },
    "2392": {
        "APIs": [
            "len()",
            "set()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Common items among dictionaries",
        "Source": "Tutorial Websites"
    },
    "2393": {
        "APIs": [
            "join()",
            "set()",
            "split()",
            "map()",
            "reduce()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Common words among tuple strings",
        "Source": "Tutorial Websites"
    },
    "2394": {
        "APIs": [
            "all()",
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Compare tuples",
        "Source": "Tutorial Websites"
    },
    "2395": {
        "APIs": [
            "join()",
            "map()",
            "chain.from_iterable()",
            "from_iterable()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python | Concatenate All Records",
        "Source": "Tutorial Websites"
    },
    "2396": {
        "APIs": [
            "format()",
            "zip()",
            "iter()",
            "starmap()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Concatenate N consecutive elements in String list",
        "Source": "Tutorial Websites"
    },
    "2397": {
        "APIs": [
            "sum()",
            "values()",
            "chain()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Concatenate dictionary value lists",
        "Source": "Tutorial Websites"
    },
    "2398": {
        "APIs": [
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Concatenate two lists element-wise",
        "Source": "Tutorial Websites"
    },
    "2399": {
        "APIs": [
            "max()",
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Consecutive Character Maximum difference",
        "Source": "Tutorial Websites"
    },
    "2400": {
        "APIs": [
            "enumerate()",
            "itertools.compress()",
            "itertools.cycle()"
        ],
        "APIClasses": [
            "itertools",
            "itertools"
        ],
        "OriginalQuery": "Python | Consecutive Custom Chunked elements Product",
        "Source": "Tutorial Websites"
    },
    "2401": {
        "APIs": [
            "groupby()",
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Consecutive Maximum Occurrence in list",
        "Source": "Tutorial Websites"
    },
    "2402": {
        "APIs": [
            "range()",
            "len()",
            "append()",
            "min()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Consecutive Pair Minimums",
        "Source": "Tutorial Websites"
    },
    "2403": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Consecutive String Comparison",
        "Source": "Tutorial Websites"
    },
    "2404": {
        "APIs": [
            "min()",
            "itertools.islice()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Consecutive Subsets Minimum",
        "Source": "Tutorial Websites"
    },
    "2405": {
        "APIs": [
            "groupby()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Consecutive characters frequency",
        "Source": "Tutorial Websites"
    },
    "2406": {
        "APIs": [
            "prod()",
            "range()",
            "len()",
            "itertools.islice()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Consecutive chunks Product",
        "Source": "Tutorial Websites"
    },
    "2407": {
        "APIs": [
            "groupby()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Consecutive duplicates all elements deletion in list",
        "Source": "Tutorial Websites"
    },
    "2408": {
        "APIs": [
            "max()",
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Consecutive element maximum product",
        "Source": "Tutorial Websites"
    },
    "2409": {
        "APIs": [
            "join()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Consecutive element swapping in String",
        "Source": "Tutorial Websites"
    },
    "2410": {
        "APIs": [
            "enumerate()",
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Consecutive elements grouping in list",
        "Source": "Tutorial Websites"
    },
    "2411": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Consecutive elements pairing in list",
        "Source": "Tutorial Websites"
    },
    "2412": {
        "APIs": [
            "endswith()",
            "join()",
            "zip()",
            "reduce()",
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Consecutive prefix overlap concatenation",
        "Source": "Tutorial Websites"
    },
    "2413": {
        "APIs": [
            "range()",
            "from_iterable()",
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Consecutive remaining elements in list",
        "Source": "Tutorial Websites"
    },
    "2414": {
        "APIs": [
            "itertools.product()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Construct Cartesian Product Tuple list",
        "Source": "Tutorial Websites"
    },
    "2415": {
        "APIs": [
            "zfill()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Construct N Range Equilength String list",
        "Source": "Tutorial Websites"
    },
    "2416": {
        "APIs": [
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Construct string from character frequency tuple",
        "Source": "Tutorial Websites"
    },
    "2417": {
        "APIs": [
            "enumerate()",
            "zip()",
            "sum()",
            "accumulate()",
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Contiguous Boolean Range",
        "Source": "Tutorial Websites"
    },
    "2418": {
        "APIs": [
            "append()",
            "len()",
            "tuple()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Conversion to N*N tuple matrix",
        "Source": "Tutorial Websites"
    },
    "2419": {
        "APIs": [
            "list()",
            "convert()",
            "itertools.islice()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Convert 1D list to 2D list of variable length",
        "Source": "Tutorial Websites"
    },
    "2420": {
        "APIs": [
            "format()",
            "join()",
            "binascii.hexlify()"
        ],
        "APIClasses": [
            "binascii"
        ],
        "OriginalQuery": "Python | Convert Bytearray to Hexadecimal String",
        "Source": "Tutorial Websites"
    },
    "2421": {
        "APIs": [
            "join()",
            "chain()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert Character Matrix to single String",
        "Source": "Tutorial Websites"
    },
    "2422": {
        "APIs": [
            "zip()",
            "list()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert Integral list to tuple list",
        "Source": "Tutorial Websites"
    },
    "2423": {
        "APIs": [
            "float()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert Joint Float string to Numbers",
        "Source": "Tutorial Websites"
    },
    "2424": {
        "APIs": [
            "keys()",
            "append()",
            "tuple()",
            "format()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert List of Dictionary to Tuple list",
        "Source": "Tutorial Websites"
    },
    "2425": {
        "APIs": [
            "map()",
            "join()",
            "isdigit()",
            "eval()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert List of String List to String List",
        "Source": "Tutorial Websites"
    },
    "2426": {
        "APIs": [
            "join()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert List of lists to list of Strings",
        "Source": "Tutorial Websites"
    },
    "2427": {
        "APIs": [
            "zip()",
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert Lists to column tuples",
        "Source": "Tutorial Websites"
    },
    "2428": {
        "APIs": [
            "conv()",
            "str()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert None to empty string",
        "Source": "Tutorial Websites"
    },
    "2429": {
        "APIs": [
            "list()",
            "split()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert Stream of numbers to list",
        "Source": "Tutorial Websites"
    },
    "2430": {
        "APIs": [
            "range()",
            "len()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert String list to Joined Single element",
        "Source": "Tutorial Websites"
    },
    "2431": {
        "APIs": [
            "ord()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert String list to ascii values",
        "Source": "Tutorial Websites"
    },
    "2432": {
        "APIs": [
            "sum()",
            "split()",
            "enumerate()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert String ranges to list",
        "Source": "Tutorial Websites"
    },
    "2433": {
        "APIs": [
            "join()",
            "ord()",
            "format()",
            "bytearray()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert String to Binary",
        "Source": "Tutorial Websites"
    },
    "2434": {
        "APIs": [
            "tuple()",
            "zip()",
            "iter()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert String to N chunks tuple",
        "Source": "Tutorial Websites"
    },
    "2435": {
        "APIs": [
            "map()",
            "split()",
            "tuple()",
            "eval()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert String to Tuple",
        "Source": "Tutorial Websites"
    },
    "2436": {
        "APIs": [
            "bytes()",
            "type()",
            "encode()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert String to bytes",
        "Source": "Tutorial Websites"
    },
    "2437": {
        "APIs": [
            "zip()",
            "split()",
            "iter()",
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert String to list of tuples",
        "Source": "Tutorial Websites"
    },
    "2438": {
        "APIs": [
            "split()",
            "replace()",
            "eval()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert String to tuple list",
        "Source": "Tutorial Websites"
    },
    "2439": {
        "APIs": [
            "chain.from_iterable()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python | Convert Triple nesting to Double nesting list",
        "Source": "Tutorial Websites"
    },
    "2440": {
        "APIs": [
            "reduce()",
            "int()",
            "join()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert Tuple to integer",
        "Source": "Tutorial Websites"
    },
    "2441": {
        "APIs": [
            "enumerate()",
            "zip()",
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert Tuples to Dictionary",
        "Source": "Tutorial Websites"
    },
    "2442": {
        "APIs": [
            "tuple()",
            "convert()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert a list into a tuple",
        "Source": "Tutorial Websites"
    },
    "2443": {
        "APIs": [
            "tuple()",
            "map()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert a list into tuple of lists",
        "Source": "Tutorial Websites"
    },
    "2444": {
        "APIs": [
            "setdefault()",
            "dict()",
            "append()",
            "Convert()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert a list of Tuples into Dictionary",
        "Source": "Tutorial Websites"
    },
    "2445": {
        "APIs": [
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert a list of characters into a string",
        "Source": "Tutorial Websites"
    },
    "2446": {
        "APIs": [
            "formTree()",
            "reduce()",
            "getTree()",
            "setTree()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert a list of lists into tree-like dict",
        "Source": "Tutorial Websites"
    },
    "2447": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert a list to dictionary",
        "Source": "Tutorial Websites"
    },
    "2448": {
        "APIs": [
            "fromkeys()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert a set into dictionary",
        "Source": "Tutorial Websites"
    },
    "2449": {
        "APIs": [
            "split()",
            "strip()",
            "ast.literal_eval()",
            "json.loads()"
        ],
        "APIClasses": [
            "ast",
            "json"
        ],
        "OriginalQuery": "Python | Convert a string representation of list into list",
        "Source": "Tutorial Websites"
    },
    "2450": {
        "APIs": [
            "decode()",
            "get()",
            "keys()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert byteString key:value pair of dictionary to String",
        "Source": "Tutorial Websites"
    },
    "2451": {
        "APIs": [
            "map()",
            "lower()",
            "list()",
            "upper()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert case of elements in a list of strings",
        "Source": "Tutorial Websites"
    },
    "2452": {
        "APIs": [
            "itertools.chain()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Convert column to separate elements in list of lists",
        "Source": "Tutorial Websites"
    },
    "2453": {
        "APIs": [
            "json.dumps()",
            "str()"
        ],
        "APIClasses": [
            "json"
        ],
        "OriginalQuery": "Python | Convert dictionary object into string",
        "Source": "Tutorial Websites"
    },
    "2454": {
        "APIs": [
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert dictionary to list of tuples",
        "Source": "Tutorial Websites"
    },
    "2455": {
        "APIs": [
            "split()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert given list into nested list",
        "Source": "Tutorial Websites"
    },
    "2456": {
        "APIs": [
            "split()",
            "strip()",
            "eval()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert heterogenous type String to List",
        "Source": "Tutorial Websites"
    },
    "2457": {
        "APIs": [
            "dict()",
            "split()",
            "eval()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert key-value pair comma separated string into dictionary",
        "Source": "Tutorial Websites"
    },
    "2458": {
        "APIs": [
            "zip()",
            "repeat()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert list elements to bi-tuples",
        "Source": "Tutorial Websites"
    },
    "2459": {
        "APIs": [
            "split()",
            "append()",
            "extractDigits()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert list into list of lists",
        "Source": "Tutorial Websites"
    },
    "2460": {
        "APIs": [
            "int()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert list of numerical string to list of Integers",
        "Source": "Tutorial Websites"
    },
    "2461": {
        "APIs": [
            "sorted()",
            "map()",
            "int()",
            "sort()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert list of string into sorted list of integer",
        "Source": "Tutorial Websites"
    },
    "2462": {
        "APIs": [
            "strip()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert list of string to list of list",
        "Source": "Tutorial Websites"
    },
    "2463": {
        "APIs": [
            "join()",
            "chain.from_iterable()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python | Convert list of strings and characters to list of characters",
        "Source": "Tutorial Websites"
    },
    "2464": {
        "APIs": [
            "map()",
            "split()",
            "tuple()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert list of strings to list of tuples",
        "Source": "Tutorial Websites"
    },
    "2465": {
        "APIs": [
            "append()",
            "Graph()",
            "add_nodes_from()",
            "to_dict_of_lists()",
            "tuple()",
            "reversed()",
            "itemgetter()",
            "groupby()",
            "sorted()",
            "list()",
            "map()",
            "defaultdict()",
            "dict()",
            "update()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert list of tuple into dictionary",
        "Source": "Tutorial Websites"
    },
    "2466": {
        "APIs": [
            "sub()",
            "int()",
            "set()",
            "itertools.chain()",
            "lambda()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Convert list of tuples into digits",
        "Source": "Tutorial Websites"
    },
    "2467": {
        "APIs": [
            "list()",
            "chain()",
            "append()",
            "sum()",
            "reduce()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert list of tuples into list",
        "Source": "Tutorial Websites"
    },
    "2468": {
        "APIs": [
            "defaultdict()",
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert list of tuples to dictionary value lists",
        "Source": "Tutorial Websites"
    },
    "2469": {
        "APIs": [
            "list()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert list of tuples to list of list",
        "Source": "Tutorial Websites"
    },
    "2470": {
        "APIs": [
            "join()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert list of tuples to list of strings",
        "Source": "Tutorial Websites"
    },
    "2471": {
        "APIs": [
            "array()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert list to Python array",
        "Source": "Tutorial Websites"
    },
    "2472": {
        "APIs": [
            "list()",
            "enumerate()",
            "zip()",
            "range()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert list to indexed tuple list",
        "Source": "Tutorial Websites"
    },
    "2473": {
        "APIs": [
            "tuple()",
            "float()",
            "split()",
            "map()",
            "eval()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert location coordinates to tuple",
        "Source": "Tutorial Websites"
    },
    "2474": {
        "APIs": [
            "tuple()",
            "str()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert mixed data types tuple list to string list",
        "Source": "Tutorial Websites"
    },
    "2475": {
        "APIs": [
            "items()",
            "isinstance()",
            "extend()",
            "convert_flatten()",
            "append()",
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert nested dictionary into flattened dictionary",
        "Source": "Tutorial Websites"
    },
    "2476": {
        "APIs": [
            "tuple()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert nested sublist into tuples",
        "Source": "Tutorial Websites"
    },
    "2477": {
        "APIs": [
            "int()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert number to list of integers",
        "Source": "Tutorial Websites"
    },
    "2478": {
        "APIs": [
            "isdigit()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert numeric String to integers in mixed List",
        "Source": "Tutorial Websites"
    },
    "2479": {
        "APIs": [
            "join()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert numeric words to numbers",
        "Source": "Tutorial Websites"
    },
    "2480": {
        "APIs": [
            "list()",
            "set()",
            "convert()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert set into a list",
        "Source": "Tutorial Websites"
    },
    "2481": {
        "APIs": [
            "split()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert string List to Nested Character List",
        "Source": "Tutorial Websites"
    },
    "2482": {
        "APIs": [
            "json.loads()",
            "ast.literal_eval()"
        ],
        "APIClasses": [
            "json",
            "ast"
        ],
        "OriginalQuery": "Python | Convert string dictionary to dictionary",
        "Source": "Tutorial Websites"
    },
    "2483": {
        "APIs": [
            "eval()",
            "literal_eval()",
            "json.loads()"
        ],
        "APIClasses": [
            "json"
        ],
        "OriginalQuery": "Python | Convert string enclosed list to list",
        "Source": "Tutorial Websites"
    },
    "2484": {
        "APIs": [
            "upper()",
            "title()",
            "lower()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert string list into multiple cases",
        "Source": "Tutorial Websites"
    },
    "2485": {
        "APIs": [
            "strptime()",
            "strftime()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert string to DateTime and vice-versa",
        "Source": "Tutorial Websites"
    },
    "2486": {
        "APIs": [
            "eval()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert string tuples to list tuples",
        "Source": "Tutorial Websites"
    },
    "2487": {
        "APIs": [
            "join()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert tuple records to single string",
        "Source": "Tutorial Websites"
    },
    "2488": {
        "APIs": [
            "dict()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert tuple to adjacent pair dictionary",
        "Source": "Tutorial Websites"
    },
    "2489": {
        "APIs": [
            "join()",
            "float()",
            "str()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert tuple to float value",
        "Source": "Tutorial Websites"
    },
    "2490": {
        "APIs": [
            "remove()",
            "range()",
            "len()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Convert two lists into a dictionary",
        "Source": "Tutorial Websites"
    },
    "2491": {
        "APIs": [
            "split()",
            "eval()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Converting String content to dictionary",
        "Source": "Tutorial Websites"
    },
    "2492": {
        "APIs": [
            "range()",
            "len()",
            "int()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Converting all strings in list to integers",
        "Source": "Tutorial Websites"
    },
    "2493": {
        "APIs": [
            "split()",
            "eval()",
            "replace()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Converting list string to dictionary",
        "Source": "Tutorial Websites"
    },
    "2494": {
        "APIs": [
            "append()",
            "findall()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Count K character between consecutive characters",
        "Source": "Tutorial Websites"
    },
    "2495": {
        "APIs": [
            "isinstance()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Count String occurrences in mixed list",
        "Source": "Tutorial Websites"
    },
    "2496": {
        "APIs": [
            "sum()",
            "values()",
            "value()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Count keys with particular value in dictionary",
        "Source": "Tutorial Websites"
    },
    "2497": {
        "APIs": [
            "isinstance()",
            "len()",
            "main()",
            "dict.items()",
            "enumerate()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Python | Count number of items in a dictionary value that is a list",
        "Source": "Tutorial Websites"
    },
    "2498": {
        "APIs": [
            "countOccurrence()",
            "Counter()",
            "sum()",
            "set()",
            "numpy.in1d()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Python | Count occurrence of all elements of list in a tuple",
        "Source": "Tutorial Websites"
    },
    "2499": {
        "APIs": [
            "count()",
            "collections.Counter()",
            "sum()",
            "map()",
            "findall()"
        ],
        "APIClasses": [
            "collections"
        ],
        "OriginalQuery": "Python | Count occurrences of a character in string",
        "Source": "Tutorial Websites"
    },
    "2500": {
        "APIs": [
            "count()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Count occurrences of an element in a list",
        "Source": "Tutorial Websites"
    },
    "2501": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Count of Matching i, j index elements",
        "Source": "Tutorial Websites"
    },
    "2502": {
        "APIs": [
            "sum()",
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Count of common elements in the lists",
        "Source": "Tutorial Websites"
    },
    "2503": {
        "APIs": [
            "sum()",
            "map()",
            "reduce()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Count of elements matching particular condition",
        "Source": "Tutorial Websites"
    },
    "2504": {
        "APIs": [
            "count()",
            "find()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Count overlapping substring in a given string",
        "Source": "Tutorial Websites"
    },
    "2505": {
        "APIs": [
            "set()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Count the Number of matching characters in a pair of string",
        "Source": "Tutorial Websites"
    },
    "2506": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Count the elements in a list until an element is a Tuple",
        "Source": "Tutorial Websites"
    },
    "2507": {
        "APIs": [
            "isintance()",
            "enumerate()",
            "isinstance()",
            "takewhile()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Count the elements till first tuple",
        "Source": "Tutorial Websites"
    },
    "2508": {
        "APIs": [
            "range()",
            "len()",
            "countList()",
            "sum()",
            "chain.from_iterable()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python | Count the sublists containing given element in a list",
        "Source": "Tutorial Websites"
    },
    "2509": {
        "APIs": [
            "defaultdict()",
            "Counter()",
            "chain()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Count tuples occurrence in list of tuples",
        "Source": "Tutorial Websites"
    },
    "2510": {
        "APIs": [
            "append()",
            "setdefault()",
            "tuple()",
            "list()",
            "items()",
            "sum()",
            "Counter()",
            "DataFrame()",
            "keys()",
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Count unique sublists within list",
        "Source": "Tutorial Websites"
    },
    "2511": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Count unmatched elements",
        "Source": "Tutorial Websites"
    },
    "2512": {
        "APIs": [
            "Counter()",
            "map()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Counting Nth tuple element",
        "Source": "Tutorial Websites"
    },
    "2513": {
        "APIs": [
            "append()",
            "createList()",
            "range()",
            "numpy.arange()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Python | Create list of numbers with given range",
        "Source": "Tutorial Websites"
    },
    "2514": {
        "APIs": [
            "setdefault()",
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Creating Multidimensional dictionary",
        "Source": "Tutorial Websites"
    },
    "2515": {
        "APIs": [
            "min()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Cropped list Minimum",
        "Source": "Tutorial Websites"
    },
    "2516": {
        "APIs": [
            "sum()",
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Cummulative Columns summation of Records",
        "Source": "Tutorial Websites"
    },
    "2517": {
        "APIs": [
            "zip()",
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Cummulative Nested Tuple Column Product",
        "Source": "Tutorial Websites"
    },
    "2518": {
        "APIs": [
            "join()",
            "windowed()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Custom Consecutive Character Pairing",
        "Source": "Tutorial Websites"
    },
    "2519": {
        "APIs": [
            "dropwhile()",
            "cycle()",
            "islice()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Custom Cycle list",
        "Source": "Tutorial Websites"
    },
    "2520": {
        "APIs": [
            "zip()",
            "sum()",
            "itertools.chain()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Custom Index Range Summation",
        "Source": "Tutorial Websites"
    },
    "2521": {
        "APIs": [
            "itertools.islice()",
            "sum()",
            "zip()",
            "accumulate()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Custom List slicing Sum",
        "Source": "Tutorial Websites"
    },
    "2522": {
        "APIs": [
            "range()",
            "len()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Custom Multiplication in list of lists",
        "Source": "Tutorial Websites"
    },
    "2523": {
        "APIs": [
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Custom length Matrix",
        "Source": "Tutorial Websites"
    },
    "2524": {
        "APIs": [
            "zip()",
            "itertools.chain()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Custom list split",
        "Source": "Tutorial Websites"
    },
    "2525": {
        "APIs": [
            "compress()",
            "cycle()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Custom slicing in List",
        "Source": "Tutorial Websites"
    },
    "2526": {
        "APIs": [
            "sorted()",
            "lambda()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Custom sorting in list of tuples",
        "Source": "Tutorial Websites"
    },
    "2527": {
        "APIs": [
            "range()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Decimal step range in list",
        "Source": "Tutorial Websites"
    },
    "2528": {
        "APIs": [
            "sorted()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Delete elements in range",
        "Source": "Tutorial Websites"
    },
    "2529": {
        "APIs": [
            "count()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Delete elements with frequency atmost K",
        "Source": "Tutorial Websites"
    },
    "2530": {
        "APIs": [
            "del()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Delete items from dictionary while iterating",
        "Source": "Tutorial Websites"
    },
    "2531": {
        "APIs": [
            "translate()",
            "replace()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Deleting all occurrences of character",
        "Source": "Tutorial Websites"
    },
    "2532": {
        "APIs": [
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Delimited String List to String Matrix",
        "Source": "Tutorial Websites"
    },
    "2533": {
        "APIs": [
            "zip()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Dictionary creation using list contents",
        "Source": "Tutorial Websites"
    },
    "2534": {
        "APIs": [
            "zip()",
            "repeat()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Dictionary initialization with common dictionary",
        "Source": "Tutorial Websites"
    },
    "2535": {
        "APIs": [
            "enumerate()",
            "itertools.combinations()",
            "combinations()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Dictionary key combinations",
        "Source": "Tutorial Websites"
    },
    "2536": {
        "APIs": [
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Dictionary to list of tuple conversion",
        "Source": "Tutorial Websites"
    },
    "2537": {
        "APIs": [
            "enumerate()",
            "dict()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Dictionary with index as value",
        "Source": "Tutorial Websites"
    },
    "2538": {
        "APIs": [
            "list()",
            "set()",
            "set.intersection()",
            "intersection()"
        ],
        "APIClasses": [
            "set"
        ],
        "OriginalQuery": "Python | Difference in Record Lists",
        "Source": "Tutorial Websites"
    },
    "2539": {
        "APIs": [
            "set()",
            "keys()",
            "intersection()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Difference in keys of two dictionaries",
        "Source": "Tutorial Websites"
    },
    "2540": {
        "APIs": [
            "collections.Counter()",
            "map()",
            "remove()"
        ],
        "APIClasses": [
            "collections"
        ],
        "OriginalQuery": "Python | Difference of two lists including duplicates",
        "Source": "Tutorial Websites"
    },
    "2541": {
        "APIs": [
            "range()",
            "len()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Divide constant to Kth Tuple index",
        "Source": "Tutorial Websites"
    },
    "2542": {
        "APIs": [
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Dividing two lists",
        "Source": "Tutorial Websites"
    },
    "2543": {
        "APIs": [
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Duplicate element indices in list",
        "Source": "Tutorial Websites"
    },
    "2544": {
        "APIs": [
            "set()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Duplicate substring removal from list",
        "Source": "Tutorial Websites"
    },
    "2545": {
        "APIs": [
            "sum()",
            "collections.Counter()"
        ],
        "APIClasses": [
            "collections"
        ],
        "OriginalQuery": "Python | Element Occurrence in dictionary of list values",
        "Source": "Tutorial Websites"
    },
    "2546": {
        "APIs": [
            "index()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Element indices Summation",
        "Source": "Tutorial Websites"
    },
    "2547": {
        "APIs": [
            "reduce()",
            "itertools.chain()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Element repetition in list",
        "Source": "Tutorial Websites"
    },
    "2548": {
        "APIs": [
            "count()",
            "max()",
            "set()",
            "statistics.mode()",
            "collections.Counter.most_common()",
            "Counter()"
        ],
        "APIClasses": [
            "statistics",
            "collections.Counter"
        ],
        "OriginalQuery": "Python | Element with largest frequency in list",
        "Source": "Tutorial Websites"
    },
    "2549": {
        "APIs": [
            "count()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Elements with Frequency equal K",
        "Source": "Tutorial Websites"
    },
    "2550": {
        "APIs": [
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Elementwise AND in tuples",
        "Source": "Tutorial Websites"
    },
    "2551": {
        "APIs": [
            "join()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Embedded Numbers Summation in String List",
        "Source": "Tutorial Websites"
    },
    "2552": {
        "APIs": [
            "conv()",
            "str()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Empty String to None Conversion",
        "Source": "Tutorial Websites"
    },
    "2553": {
        "APIs": [
            "items()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Equal Keys List Summation",
        "Source": "Tutorial Websites"
    },
    "2554": {
        "APIs": [
            "tuple()",
            "join()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Equate two list index elements",
        "Source": "Tutorial Websites"
    },
    "2555": {
        "APIs": [
            "range()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Equidistant element list",
        "Source": "Tutorial Websites"
    },
    "2556": {
        "APIs": [
            "map()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Even Front digits Test in List",
        "Source": "Tutorial Websites"
    },
    "2557": {
        "APIs": [
            "update()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Even values update in dictionary",
        "Source": "Tutorial Websites"
    },
    "2558": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Every Kth element removal in List",
        "Source": "Tutorial Websites"
    },
    "2559": {
        "APIs": [
            "strip()",
            "regex()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Exceptional Split in String",
        "Source": "Tutorial Websites"
    },
    "2560": {
        "APIs": [
            "range()",
            "len()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Exponentiate Kth Record Index",
        "Source": "Tutorial Websites"
    },
    "2561": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Exponentiation by K in list",
        "Source": "Tutorial Websites"
    },
    "2562": {
        "APIs": [
            "range()",
            "len()",
            "append()",
            "chain()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Extend tuples by count of elements in tuple",
        "Source": "Tutorial Websites"
    },
    "2563": {
        "APIs": [
            "zip()",
            "product()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Extract Combination Mapping in two lists",
        "Source": "Tutorial Websites"
    },
    "2564": {
        "APIs": [
            "len()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Extract K sized strings",
        "Source": "Tutorial Websites"
    },
    "2565": {
        "APIs": [
            "split()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Extract Nth words in Strings List",
        "Source": "Tutorial Websites"
    },
    "2566": {
        "APIs": [
            "findall()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Extract Numbers in Brackets in String",
        "Source": "Tutorial Websites"
    },
    "2567": {
        "APIs": [
            "ord()",
            "zip()",
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Extract Score list of String",
        "Source": "Tutorial Websites"
    },
    "2568": {
        "APIs": [
            "isalpha()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Extract Strings with only Alphabets",
        "Source": "Tutorial Websites"
    },
    "2569": {
        "APIs": [
            "append()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Extract characters except of K string",
        "Source": "Tutorial Websites"
    },
    "2570": {
        "APIs": [
            "join()",
            "isdigit()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Extract digits from given string",
        "Source": "Tutorial Websites"
    },
    "2571": {
        "APIs": [
            "keys()",
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Extract filtered Dictionary Values",
        "Source": "Tutorial Websites"
    },
    "2572": {
        "APIs": [
            "items()",
            "iter()",
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Extract key-value of dictionary in variables",
        "Source": "Tutorial Websites"
    },
    "2573": {
        "APIs": [
            "defaultdict()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Extract least frequency element",
        "Source": "Tutorial Websites"
    },
    "2574": {
        "APIs": [
            "max()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Extract length of longest string in list",
        "Source": "Tutorial Websites"
    },
    "2575": {
        "APIs": [
            "split()",
            "join()",
            "isnumeric()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Extract numbers from list of strings",
        "Source": "Tutorial Websites"
    },
    "2576": {
        "APIs": [
            "isdigit()",
            "split()",
            "re.findall()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python | Extract numbers from string",
        "Source": "Tutorial Websites"
    },
    "2577": {
        "APIs": [
            "split()",
            "len()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Extract odd length words in String",
        "Source": "Tutorial Websites"
    },
    "2578": {
        "APIs": [
            "join()",
            "split()",
            "findall()",
            "isalpha()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Extract only characters from given string",
        "Source": "Tutorial Websites"
    },
    "2579": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Extract similar index elements",
        "Source": "Tutorial Websites"
    },
    "2580": {
        "APIs": [
            "items()",
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Extract specific keys from dictionary",
        "Source": "Tutorial Websites"
    },
    "2581": {
        "APIs": [
            "findall()",
            "isintance()",
            "eval()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Extract substrings between brackets",
        "Source": "Tutorial Websites"
    },
    "2582": {
        "APIs": [
            "rsplit()",
            "rpartition()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Extract suffix after K",
        "Source": "Tutorial Websites"
    },
    "2583": {
        "APIs": [
            "set()",
            "frozenset()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Extract unique tuples from list, Order Irrespective",
        "Source": "Tutorial Websites"
    },
    "2584": {
        "APIs": [
            "split()",
            "findall()",
            "regex()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Extract words from given string",
        "Source": "Tutorial Websites"
    },
    "2585": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Farthest point on horizontal lines in 2D plane",
        "Source": "Tutorial Websites"
    },
    "2586": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Filter String with substring at specific position",
        "Source": "Tutorial Websites"
    },
    "2587": {
        "APIs": [
            "chain.from_iterable()",
            "from_iterable()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python | Filter Tuple Dictionary Keys",
        "Source": "Tutorial Websites"
    },
    "2588": {
        "APIs": [
            "copy()",
            "append()",
            "remove()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Filter a list based on the given list of strings",
        "Source": "Tutorial Websites"
    },
    "2589": {
        "APIs": [
            "set.intersection()"
        ],
        "APIClasses": [
            "set"
        ],
        "OriginalQuery": "Python | Filter dictionary key based on the values in selective list",
        "Source": "Tutorial Websites"
    },
    "2590": {
        "APIs": [
            "items()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Filter dictionary of tuples by condition",
        "Source": "Tutorial Websites"
    },
    "2591": {
        "APIs": [
            "append()",
            "len()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Filter even values from a list",
        "Source": "Tutorial Websites"
    },
    "2592": {
        "APIs": [
            "itertools.compress()",
            "compress()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Filter list by Boolean list",
        "Source": "Tutorial Websites"
    },
    "2593": {
        "APIs": [
            "dict()",
            "items()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Filter the negative values from given dictionary",
        "Source": "Tutorial Websites"
    },
    "2594": {
        "APIs": [
            "any()",
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Filter tuples according to list element presence",
        "Source": "Tutorial Websites"
    },
    "2595": {
        "APIs": [
            "set()",
            "symmetric_difference()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find Dissimilar Elements in Tuples",
        "Source": "Tutorial Websites"
    },
    "2596": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find Maximum difference between tuple pairs",
        "Source": "Tutorial Websites"
    },
    "2597": {
        "APIs": [
            "max()",
            "combination()",
            "nlargest()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find Maximum difference pair",
        "Source": "Tutorial Websites"
    },
    "2598": {
        "APIs": [
            "min()",
            "isinstance()",
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find Min/Max in heterogeneous list",
        "Source": "Tutorial Websites"
    },
    "2599": {
        "APIs": [
            "enumerate()",
            "replace()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find Mixed Combinations of string and list",
        "Source": "Tutorial Websites"
    },
    "2600": {
        "APIs": [
            "keys()",
            "get()",
            "find_sym_pairs()",
            "append()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find Symmetric Pairs in dictionary",
        "Source": "Tutorial Websites"
    },
    "2601": {
        "APIs": [
            "difflib.get_close_matches()"
        ],
        "APIClasses": [
            "difflib"
        ],
        "OriginalQuery": "Python | Find all close matches of input string from a list",
        "Source": "Tutorial Websites"
    },
    "2602": {
        "APIs": [
            "findPairs()",
            "append()",
            "tuple()",
            "combinations()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find all distinct pairs with difference equal to k",
        "Source": "Tutorial Websites"
    },
    "2603": {
        "APIs": [
            "len()",
            "chain()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find all elements count in list",
        "Source": "Tutorial Websites"
    },
    "2604": {
        "APIs": [
            "combination()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find all possible substrings after deleting k characters",
        "Source": "Tutorial Websites"
    },
    "2605": {
        "APIs": [
            "range()",
            "len()",
            "set()",
            "append()",
            "tuple()",
            "pop()",
            "add()",
            "findTriplets()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find all triplets in a list with given sum",
        "Source": "Tutorial Websites"
    },
    "2606": {
        "APIs": [
            "reduce()",
            "set()",
            "map()",
            "intersection()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find common elements in list of lists",
        "Source": "Tutorial Websites"
    },
    "2607": {
        "APIs": [
            "max()",
            "map()",
            "dict_depth()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find depth of a dictionary",
        "Source": "Tutorial Websites"
    },
    "2608": {
        "APIs": [
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find dictionary matching value in list",
        "Source": "Tutorial Websites"
    },
    "2609": {
        "APIs": [
            "map()",
            "itemgetter()",
            "findElements()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find elements of a list by indices",
        "Source": "Tutorial Websites"
    },
    "2610": {
        "APIs": [
            "count()",
            "len()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find frequency of given character at every position in list of lists",
        "Source": "Tutorial Websites"
    },
    "2611": {
        "APIs": [
            "count()",
            "max()",
            "collections.Counter()"
        ],
        "APIClasses": [
            "collections"
        ],
        "OriginalQuery": "Python | Find frequency of largest element in list",
        "Source": "Tutorial Websites"
    },
    "2612": {
        "APIs": [
            "range()",
            "len()",
            "append()",
            "groupSequence()",
            "iter()",
            "next()",
            "list()",
            "cycle()",
            "groupby()",
            "tuple()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find groups of strictly increasing numbers in a list",
        "Source": "Tutorial Websites"
    },
    "2613": {
        "APIs": [
            "range()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find indices with None values in given list",
        "Source": "Tutorial Websites"
    },
    "2614": {
        "APIs": [
            "count()",
            "sorted()",
            "len()",
            "next()",
            "longest_word()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find k longest words in given list",
        "Source": "Tutorial Websites"
    },
    "2615": {
        "APIs": [
            "items()",
            "add()",
            "setdefault()",
            "set()",
            "len()",
            "append()",
            "filter()",
            "values()",
            "list()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find keys with duplicate values in dictionary",
        "Source": "Tutorial Websites"
    },
    "2616": {
        "APIs": [
            "rindex()",
            "rfind()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find last occurrence of substring",
        "Source": "Tutorial Websites"
    },
    "2617": {
        "APIs": [
            "max()",
            "len()",
            "FindMaxLength()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find maximum length sub-list in a nested list",
        "Source": "Tutorial Websites"
    },
    "2618": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find maximum value in each sublist",
        "Source": "Tutorial Websites"
    },
    "2619": {
        "APIs": [
            "min()",
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find minimum of each index in list of lists",
        "Source": "Tutorial Websites"
    },
    "2620": {
        "APIs": [
            "append()",
            "index()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find mismatch item on same index in two list",
        "Source": "Tutorial Websites"
    },
    "2621": {
        "APIs": [
            "difference()",
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find missing and additional values in two lists",
        "Source": "Tutorial Websites"
    },
    "2622": {
        "APIs": [
            "range()",
            "max()",
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find missing elements in List",
        "Source": "Tutorial Websites"
    },
    "2623": {
        "APIs": [
            "zip()",
            "difference()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find missing numbers in a sorted list range",
        "Source": "Tutorial Websites"
    },
    "2624": {
        "APIs": [
            "max()",
            "chain.from_iterable()",
            "most_common()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python | Find most common element in a 2D list",
        "Source": "Tutorial Websites"
    },
    "2625": {
        "APIs": [
            "most_common()",
            "mode()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find most common element in each column in a 2D list",
        "Source": "Tutorial Websites"
    },
    "2626": {
        "APIs": [
            "count()",
            "most_frequent()",
            "max()",
            "set()",
            "most_common()",
            "Counter()",
            "mode()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find most frequent element in a list",
        "Source": "Tutorial Websites"
    },
    "2627": {
        "APIs": [
            "len()",
            "isinstance()",
            "find()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find number of lists in a tuple",
        "Source": "Tutorial Websites"
    },
    "2628": {
        "APIs": [
            "index()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find position of a character in given string",
        "Source": "Tutorial Websites"
    },
    "2629": {
        "APIs": [
            "min()",
            "expressionmin()",
            "filter()",
            "sort()",
            "bisect_right()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find smallest element greater than K",
        "Source": "Tutorial Websites"
    },
    "2630": {
        "APIs": [
            "sum()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find sum of frequency of given elements in the list",
        "Source": "Tutorial Websites"
    },
    "2631": {
        "APIs": [
            "keys()",
            "bisect_left()",
            "OrderedDict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find the closest Key in dictionary",
        "Source": "Tutorial Websites"
    },
    "2632": {
        "APIs": [
            "lower()",
            "startswith()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find the list elements starting with specific letter",
        "Source": "Tutorial Websites"
    },
    "2633": {
        "APIs": [
            "max()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find the sublist with maximum value in given nested list",
        "Source": "Tutorial Websites"
    },
    "2634": {
        "APIs": [
            "list()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find the tuples containing the given element from a list of tuples",
        "Source": "Tutorial Websites"
    },
    "2635": {
        "APIs": [
            "defaultdict()",
            "list()",
            "from_iterable()",
            "append()",
            "sum()",
            "items()",
            "sorted()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find top K frequent elements from a list of tuples",
        "Source": "Tutorial Websites"
    },
    "2636": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Find whether all tuple have same length",
        "Source": "Tutorial Websites"
    },
    "2637": {
        "APIs": [
            "datetime.now()"
        ],
        "APIClasses": [
            "datetime"
        ],
        "OriginalQuery": "Python | Find yesterday\u2019s, today\u2019s and tomorrow\u2019s date",
        "Source": "Tutorial Websites"
    },
    "2638": {
        "APIs": [
            "map()",
            "count()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Finding frequency in list of tuples",
        "Source": "Tutorial Websites"
    },
    "2639": {
        "APIs": [
            "sorted()",
            "index()",
            "map()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Finding relative order of elements in list",
        "Source": "Tutorial Websites"
    },
    "2640": {
        "APIs": [
            "filter()",
            "search()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Finding strings with given substring in list",
        "Source": "Tutorial Websites"
    },
    "2641": {
        "APIs": [
            "join()",
            "ord()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | First N letters string construction",
        "Source": "Tutorial Websites"
    },
    "2642": {
        "APIs": [
            "next()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | First Non-Empty String in list",
        "Source": "Tutorial Websites"
    },
    "2643": {
        "APIs": [
            "search()",
            "start()",
            "find()",
            "next()",
            "filter()",
            "isalpha()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | First alphabet index",
        "Source": "Tutorial Websites"
    },
    "2644": {
        "APIs": [
            "index()",
            "rfind()",
            "list()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | First character occurrence from rear String",
        "Source": "Tutorial Websites"
    },
    "2645": {
        "APIs": [
            "next()",
            "enumerate()",
            "filter()",
            "index()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | First occurrence of True number",
        "Source": "Tutorial Websites"
    },
    "2646": {
        "APIs": [
            "join()",
            "chain()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Flatten Tuples List to String",
        "Source": "Tutorial Websites"
    },
    "2647": {
        "APIs": [
            "sorted()",
            "itertools.chain()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Flatten and Reverse Sort Matrix",
        "Source": "Tutorial Websites"
    },
    "2648": {
        "APIs": [
            "update()",
            "items()",
            "reduce()",
            "ChainMap()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Flatten given list of dictionaries",
        "Source": "Tutorial Websites"
    },
    "2649": {
        "APIs": [
            "dict()",
            "append()",
            "Counter()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Frequency grouping of list elements",
        "Source": "Tutorial Websites"
    },
    "2650": {
        "APIs": [
            "collections.Counter()",
            "dict.get()",
            "get()",
            "set()",
            "count()"
        ],
        "APIClasses": [
            "collections",
            "dict"
        ],
        "OriginalQuery": "Python | Frequency of each character in String",
        "Source": "Tutorial Websites"
    },
    "2651": {
        "APIs": [
            "re.findall()",
            "len()",
            "findall()",
            "sum()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python | Frequency of numbers in String",
        "Source": "Tutorial Websites"
    },
    "2652": {
        "APIs": [
            "count()",
            "len()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Frequency of substring in given string",
        "Source": "Tutorial Websites"
    },
    "2653": {
        "APIs": [
            "choice()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Generate random number except K in list",
        "Source": "Tutorial Websites"
    },
    "2654": {
        "APIs": [
            "random.choices()",
            "secrets.choice()"
        ],
        "APIClasses": [
            "random",
            "secrets"
        ],
        "OriginalQuery": "Python | Generate random string of given length",
        "Source": "Tutorial Websites"
    },
    "2655": {
        "APIs": [
            "range()",
            "len()",
            "zip()",
            "map()",
            "operator.submap()"
        ],
        "APIClasses": [
            "operator"
        ],
        "OriginalQuery": "Python | Generate successive element difference list",
        "Source": "Tutorial Websites"
    },
    "2656": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get Kth Column of Matrix",
        "Source": "Tutorial Websites"
    },
    "2657": {
        "APIs": [
            "map()",
            "itemgetter()",
            "islice()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get Kth element till N",
        "Source": "Tutorial Websites"
    },
    "2658": {
        "APIs": [
            "sorted()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get Top N elements from Records",
        "Source": "Tutorial Websites"
    },
    "2659": {
        "APIs": [
            "set()",
            "values()",
            "from_iterable()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get Unique values from list of dictionary",
        "Source": "Tutorial Websites"
    },
    "2660": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get a list as input from user",
        "Source": "Tutorial Websites"
    },
    "2661": {
        "APIs": [
            "range()",
            "len()",
            "itertools.combinations()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Get all substrings of given string",
        "Source": "Tutorial Websites"
    },
    "2662": {
        "APIs": [
            "chain.from_iterable()",
            "from_iterable()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python | Get all tuple keys from dictionary",
        "Source": "Tutorial Websites"
    },
    "2663": {
        "APIs": [
            "dict.keys()",
            "keys()",
            "getList()",
            "append()",
            "list()",
            "__getitem__()",
            "dict.items()"
        ],
        "APIClasses": [
            "dict",
            "dict"
        ],
        "OriginalQuery": "Python | Get dictionary keys as a list",
        "Source": "Tutorial Websites"
    },
    "2664": {
        "APIs": [
            "set()",
            "count()",
            "Counter()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get duplicate tuples from list",
        "Source": "Tutorial Websites"
    },
    "2665": {
        "APIs": [
            "index()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get elements till particular element in list",
        "Source": "Tutorial Websites"
    },
    "2666": {
        "APIs": [
            "items()",
            "islice()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get first K items in dictionary",
        "Source": "Tutorial Websites"
    },
    "2667": {
        "APIs": [
            "itertools.islice()",
            "dict()",
            "islice()",
            "items()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Get first N key:value pairs in given dictionary",
        "Source": "Tutorial Websites"
    },
    "2668": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get first and last elements of a list",
        "Source": "Tutorial Websites"
    },
    "2669": {
        "APIs": [
            "Extract()",
            "list()",
            "zip()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get first element of each sublist",
        "Source": "Tutorial Websites"
    },
    "2670": {
        "APIs": [
            "max()",
            "operator.itemgetter()",
            "itemgetter()",
            "sorted()"
        ],
        "APIClasses": [
            "operator"
        ],
        "OriginalQuery": "Python | Get first element with maximum value in list of tuples",
        "Source": "Tutorial Websites"
    },
    "2671": {
        "APIs": [
            "list()",
            "next()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get first index values in tuple of strings",
        "Source": "Tutorial Websites"
    },
    "2672": {
        "APIs": [
            "enumerate()",
            "filter()",
            "range()",
            "itertools.compress()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Get indices of True values in a binary list",
        "Source": "Tutorial Websites"
    },
    "2673": {
        "APIs": [
            "sorted()",
            "d.items()"
        ],
        "APIClasses": [
            "d"
        ],
        "OriginalQuery": "Python | Get items in sorted order from given dictionary",
        "Source": "Tutorial Websites"
    },
    "2674": {
        "APIs": [
            "list.index()",
            "index()",
            "dict.item()"
        ],
        "APIClasses": [
            "list",
            "dict"
        ],
        "OriginalQuery": "Python | Get key from value in Dictionary",
        "Source": "Tutorial Websites"
    },
    "2675": {
        "APIs": [
            "max()",
            "items()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get key with maximum value in Dictionary",
        "Source": "Tutorial Websites"
    },
    "2676": {
        "APIs": [
            "islice()",
            "reversed()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get last N elements from given list",
        "Source": "Tutorial Websites"
    },
    "2677": {
        "APIs": [
            "Extract()",
            "list()",
            "zip()",
            "reversed()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get last element of each sublist",
        "Source": "Tutorial Websites"
    },
    "2678": {
        "APIs": [
            "index()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get match indices",
        "Source": "Tutorial Websites"
    },
    "2679": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get matching substrings in string",
        "Source": "Tutorial Websites"
    },
    "2680": {
        "APIs": [
            "re.findall()",
            "itertools.takewhile()"
        ],
        "APIClasses": [
            "re",
            "itertools"
        ],
        "OriginalQuery": "Python | Get numeric prefix of given string",
        "Source": "Tutorial Websites"
    },
    "2681": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get positional characters from String",
        "Source": "Tutorial Websites"
    },
    "2682": {
        "APIs": [
            "append()",
            "map()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get positive elements from given list of lists",
        "Source": "Tutorial Websites"
    },
    "2683": {
        "APIs": [
            "random.choice()",
            "list()",
            "items()",
            "popitem()"
        ],
        "APIClasses": [
            "random"
        ],
        "OriginalQuery": "Python | Get random dictionary pair",
        "Source": "Tutorial Websites"
    },
    "2684": {
        "APIs": [
            "map()",
            "get()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get specific keys\u2019 values",
        "Source": "Tutorial Websites"
    },
    "2685": {
        "APIs": [
            "map()",
            "list()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get sum of tuples having same first value",
        "Source": "Tutorial Websites"
    },
    "2686": {
        "APIs": [
            "next()",
            "enumerate()",
            "filter()",
            "map()",
            "index()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get the Index of first element greater than K",
        "Source": "Tutorial Websites"
    },
    "2687": {
        "APIs": [
            "list()",
            "keys()",
            "next()",
            "iter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get the first key in dictionary",
        "Source": "Tutorial Websites"
    },
    "2688": {
        "APIs": [
            "sum()",
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get the number of keys with given value N in dictionary",
        "Source": "Tutorial Websites"
    },
    "2689": {
        "APIs": [
            "join()",
            "takewhile()",
            "sub()",
            "findall()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get the numeric prefix of given string",
        "Source": "Tutorial Websites"
    },
    "2690": {
        "APIs": [
            "range()",
            "len()",
            "append()",
            "startswith()",
            "start()",
            "finditer()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get the starting index for all occurrences of given substring",
        "Source": "Tutorial Websites"
    },
    "2691": {
        "APIs": [
            "partition()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get the string after occurrence of given substring",
        "Source": "Tutorial Websites"
    },
    "2692": {
        "APIs": [
            "items()",
            "sum()",
            "len()",
            "yield()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get total keys in dictionary",
        "Source": "Tutorial Websites"
    },
    "2693": {
        "APIs": [
            "map()",
            "type()",
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get tuple element data types",
        "Source": "Tutorial Websites"
    },
    "2694": {
        "APIs": [
            "list()",
            "set()",
            "dict.fromkeys()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Python | Get unique tuples from list",
        "Source": "Tutorial Websites"
    },
    "2695": {
        "APIs": [
            "set()",
            "numpy.unique()",
            "collections.Counter()",
            "Counter()"
        ],
        "APIClasses": [
            "numpy",
            "collections"
        ],
        "OriginalQuery": "Python | Get unique values from a list",
        "Source": "Tutorial Websites"
    },
    "2696": {
        "APIs": [
            "map()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Get values of particular key in list of dictionaries",
        "Source": "Tutorial Websites"
    },
    "2697": {
        "APIs": [
            "map()",
            "itemgetter()",
            "islice()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Getting sublist element till N",
        "Source": "Tutorial Websites"
    },
    "2698": {
        "APIs": [
            "defaultdict()",
            "sorted()",
            "values()",
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Group Anagrams from given list",
        "Source": "Tutorial Websites"
    },
    "2699": {
        "APIs": [
            "index()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Group List on K character",
        "Source": "Tutorial Websites"
    },
    "2700": {
        "APIs": [
            "Counter()",
            "set()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Group and count similar records",
        "Source": "Tutorial Websites"
    },
    "2701": {
        "APIs": [
            "append()",
            "list()",
            "split_tol()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Group consecutive list elements with tolerance",
        "Source": "Tutorial Websites"
    },
    "2702": {
        "APIs": [
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Group elements at same indices in a multi-list",
        "Source": "Tutorial Websites"
    },
    "2703": {
        "APIs": [
            "itemgetter()",
            "map()",
            "lambda()",
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Group elements on break positions in list",
        "Source": "Tutorial Websites"
    },
    "2704": {
        "APIs": [
            "OrderedDict()",
            "collections.Counter()",
            "keys()",
            "values()",
            "zip()"
        ],
        "APIClasses": [
            "collections"
        ],
        "OriginalQuery": "Python | Group list elements based on frequency",
        "Source": "Tutorial Websites"
    },
    "2705": {
        "APIs": [
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Group strings at particular element in list",
        "Source": "Tutorial Websites"
    },
    "2706": {
        "APIs": [
            "itemgetter()",
            "groupby()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Group tuple into list based on value",
        "Source": "Tutorial Websites"
    },
    "2707": {
        "APIs": [
            "extend()",
            "list()",
            "tuple()",
            "values()",
            "find()",
            "defaultdict()",
            "append()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Group tuples in list with same first value",
        "Source": "Tutorial Websites"
    },
    "2708": {
        "APIs": [
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Grouped Flattening of list",
        "Source": "Tutorial Websites"
    },
    "2709": {
        "APIs": [
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Grouped summation of tuple list",
        "Source": "Tutorial Websites"
    },
    "2710": {
        "APIs": [
            "sorted()",
            "items()",
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Grouping dictionary keys by value",
        "Source": "Tutorial Websites"
    },
    "2711": {
        "APIs": [
            "defaultdict()",
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Grouping list values into dictionary",
        "Source": "Tutorial Websites"
    },
    "2712": {
        "APIs": [
            "itertools.groupby()",
            "split()",
            "partition()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Grouping similar substrings in list",
        "Source": "Tutorial Websites"
    },
    "2713": {
        "APIs": [
            "index()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Handling no element found in index()",
        "Source": "Tutorial Websites"
    },
    "2714": {
        "APIs": [
            "len()",
            "statistics.harmonic_mean()",
            "harmonic_mean()"
        ],
        "APIClasses": [
            "statistics"
        ],
        "OriginalQuery": "Python | Harmonic Mean of List",
        "Source": "Tutorial Websites"
    },
    "2715": {
        "APIs": [
            "range()",
            "len()",
            "append()",
            "deepcopy()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | How to copy a nested list",
        "Source": "Tutorial Websites"
    },
    "2716": {
        "APIs": [
            "map()",
            "sub()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | How to get Subtraction of tuples",
        "Source": "Tutorial Websites"
    },
    "2717": {
        "APIs": [
            "list.pop()",
            "reversed()",
            "next()"
        ],
        "APIClasses": [
            "list"
        ],
        "OriginalQuery": "Python | How to get the last element of list",
        "Source": "Tutorial Websites"
    },
    "2718": {
        "APIs": [
            "set()",
            "from_iterable()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | How to get unique elements in nested tuple",
        "Source": "Tutorial Websites"
    },
    "2719": {
        "APIs": [
            "sort()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | How to sort a list of strings",
        "Source": "Tutorial Websites"
    },
    "2720": {
        "APIs": [
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Identical Consecutive Grouping in list",
        "Source": "Tutorial Websites"
    },
    "2721": {
        "APIs": [
            "collections.Counter()",
            "itertools.groupby()"
        ],
        "APIClasses": [
            "collections",
            "itertools"
        ],
        "OriginalQuery": "Python | Identical Strings Grouping",
        "Source": "Tutorial Websites"
    },
    "2722": {
        "APIs": [
            "range()",
            "increaseSize()",
            "functools.reduce()",
            "itertools.chain()"
        ],
        "APIClasses": [
            "functools",
            "itertools"
        ],
        "OriginalQuery": "Python | Increase list size by padding each element by N",
        "Source": "Tutorial Websites"
    },
    "2723": {
        "APIs": [
            "enumerate()",
            "itertools.chain.from_iterable()",
            "zip()"
        ],
        "APIClasses": [
            "itertools.chain"
        ],
        "OriginalQuery": "Python | Increasing alternate element pattern in list",
        "Source": "Tutorial Websites"
    },
    "2724": {
        "APIs": [
            "transform()",
            "range()",
            "len()",
            "append()",
            "next()",
            "count()",
            "list()",
            "chain()",
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Increment 1\u2019s in list based on pattern",
        "Source": "Tutorial Websites"
    },
    "2725": {
        "APIs": [
            "get()",
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Increment value in dictionary",
        "Source": "Tutorial Websites"
    },
    "2726": {
        "APIs": [
            "accumulate()",
            "map()",
            "tuple()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Incremental Records Product",
        "Source": "Tutorial Websites"
    },
    "2727": {
        "APIs": [
            "len()",
            "enumerate()",
            "slice()",
            "next()",
            "iter()",
            "count()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Incremental slice partition in list",
        "Source": "Tutorial Websites"
    },
    "2728": {
        "APIs": [
            "map()",
            "max()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Index Maximum among Tuples",
        "Source": "Tutorial Websites"
    },
    "2729": {
        "APIs": [
            "min()",
            "operator.itemgetter()"
        ],
        "APIClasses": [
            "operator"
        ],
        "OriginalQuery": "Python | Index minimum value Record",
        "Source": "Tutorial Websites"
    },
    "2730": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Index of Non-Zero elements in Python list",
        "Source": "Tutorial Websites"
    },
    "2731": {
        "APIs": [
            "range()",
            "len()",
            "append()",
            "itertools.cycle()",
            "itertools.islice()",
            "itertools.dropwhile()"
        ],
        "APIClasses": [
            "itertools",
            "itertools",
            "itertools"
        ],
        "OriginalQuery": "Python | Index specific cyclic iteration in list",
        "Source": "Tutorial Websites"
    },
    "2732": {
        "APIs": [
            "index()",
            "next()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Indexing a sublist",
        "Source": "Tutorial Websites"
    },
    "2733": {
        "APIs": [
            "count()",
            "set()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Indices list of matching element from other list",
        "Source": "Tutorial Websites"
    },
    "2734": {
        "APIs": [
            "append()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Indices of Kth element value",
        "Source": "Tutorial Websites"
    },
    "2735": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Indices of N largest elements in list",
        "Source": "Tutorial Websites"
    },
    "2736": {
        "APIs": [
            "range()",
            "len()",
            "append()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Indices of numbers greater than K",
        "Source": "Tutorial Websites"
    },
    "2737": {
        "APIs": [
            "enumerate()",
            "sort()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Indices of sorted list of list elements",
        "Source": "Tutorial Websites"
    },
    "2738": {
        "APIs": [
            "zip()",
            "fromkeys()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Initialize a dictionary with only keys from a list",
        "Source": "Tutorial Websites"
    },
    "2739": {
        "APIs": [
            "defaultdict()",
            "get()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Initialize common value to keys",
        "Source": "Tutorial Websites"
    },
    "2740": {
        "APIs": [
            "zip()",
            "repeat()",
            "fromkeys()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Initialize dictionary with None values",
        "Source": "Tutorial Websites"
    },
    "2741": {
        "APIs": [
            "dict()",
            "fromkeys()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Initialize dictionary with common value",
        "Source": "Tutorial Websites"
    },
    "2742": {
        "APIs": [
            "fromkeys()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Initialize dictionary with multiple keys",
        "Source": "Tutorial Websites"
    },
    "2743": {
        "APIs": [
            "tuple()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Initialize tuples with parameters",
        "Source": "Tutorial Websites"
    },
    "2744": {
        "APIs": [
            "range()",
            "fromkeys()",
            "setdefaultsetdefault()",
            "defaultdict()",
            "append()",
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Initializing dictionary with empty lists",
        "Source": "Tutorial Websites"
    },
    "2745": {
        "APIs": [
            "enumerate()",
            "zip()",
            "dict()",
            "range()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Initializing dictionary with list index values",
        "Source": "Tutorial Websites"
    },
    "2746": {
        "APIs": [
            "len()",
            "dict()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Initializing dictionary with list index-values",
        "Source": "Tutorial Websites"
    },
    "2747": {
        "APIs": [
            "range()",
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Initializing multiple lists",
        "Source": "Tutorial Websites"
    },
    "2748": {
        "APIs": [
            "pop()",
            "insert()",
            "index()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Insert Nth element to Kth element in other list",
        "Source": "Tutorial Websites"
    },
    "2749": {
        "APIs": [
            "join()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Insert character after every character pair",
        "Source": "Tutorial Websites"
    },
    "2750": {
        "APIs": [
            "insert()",
            "range()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Insert list in another list",
        "Source": "Tutorial Websites"
    },
    "2751": {
        "APIs": [
            "format()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Insert the string at the beginning of all items in a list",
        "Source": "Tutorial Websites"
    },
    "2752": {
        "APIs": [
            "enumerate()",
            "list()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Insert value after each k letters in given list of string",
        "Source": "Tutorial Websites"
    },
    "2753": {
        "APIs": [
            "range()",
            "len()",
            "bisect.insort()"
        ],
        "APIClasses": [
            "bisect"
        ],
        "OriginalQuery": "Python | Inserting item in sorted list maintaining order",
        "Source": "Tutorial Websites"
    },
    "2754": {
        "APIs": [
            "len()",
            "isinstance()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Integer count in Mixed List",
        "Source": "Tutorial Websites"
    },
    "2755": {
        "APIs": [
            "sorted()",
            "zip()",
            "itemgetter()",
            "list()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Integrity Sorting in two lists",
        "Source": "Tutorial Websites"
    },
    "2756": {
        "APIs": [
            "encode()",
            "dumps()",
            "decode()",
            "loads()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Interconversion between Dictionary and Bytes",
        "Source": "Tutorial Websites"
    },
    "2757": {
        "APIs": [
            "map()",
            "comprehensionmap()",
            "itertools.chain()",
            "zip()",
            "chain()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Interleave multiple lists of same length",
        "Source": "Tutorial Websites"
    },
    "2758": {
        "APIs": [
            "join()",
            "zip()",
            "chain.from_iterable()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python | Interleaving two strings",
        "Source": "Tutorial Websites"
    },
    "2759": {
        "APIs": [
            "range()",
            "len()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Interlist XOR",
        "Source": "Tutorial Websites"
    },
    "2760": {
        "APIs": [
            "dict()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Intersect two dictionaries through keys",
        "Source": "Tutorial Websites"
    },
    "2761": {
        "APIs": [
            "set.intersection()",
            "intersection()"
        ],
        "APIClasses": [
            "set"
        ],
        "OriginalQuery": "Python | Intersection in Tuple Records Data",
        "Source": "Tutorial Websites"
    },
    "2762": {
        "APIs": [
            "intersection()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Intersection of multiple lists",
        "Source": "Tutorial Websites"
    },
    "2763": {
        "APIs": [
            "set()",
            "intersection()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Intersection of two String",
        "Source": "Tutorial Websites"
    },
    "2764": {
        "APIs": [
            "intersection()",
            "set()",
            "interscetion()",
            "list()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Intersection of two lists",
        "Source": "Tutorial Websites"
    },
    "2765": {
        "APIs": [
            "append()",
            "set()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Intersection of two nested list",
        "Source": "Tutorial Websites"
    },
    "2766": {
        "APIs": [
            "enumerate()",
            "itertools.compress()",
            "itertools.cycle()"
        ],
        "APIClasses": [
            "itertools",
            "itertools"
        ],
        "OriginalQuery": "Python | Interval Initialization in list",
        "Source": "Tutorial Websites"
    },
    "2767": {
        "APIs": [
            "enumerate()",
            "sum()",
            "itertools.compress()",
            "itertools.cycle()"
        ],
        "APIClasses": [
            "itertools",
            "itertools"
        ],
        "OriginalQuery": "Python | Interval List Summation",
        "Source": "Tutorial Websites"
    },
    "2768": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Inverse Sorting String",
        "Source": "Tutorial Websites"
    },
    "2769": {
        "APIs": [
            "keys()",
            "from_iterable()",
            "product()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Iterate through value lists dictionary",
        "Source": "Tutorial Websites"
    },
    "2770": {
        "APIs": [
            "chain()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Iterating two lists at once",
        "Source": "Tutorial Websites"
    },
    "2771": {
        "APIs": [
            "dict()",
            "get()",
            "cycle()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Join cycle in list",
        "Source": "Tutorial Websites"
    },
    "2772": {
        "APIs": [
            "join()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Join tuple elements in a list",
        "Source": "Tutorial Websites"
    },
    "2773": {
        "APIs": [
            "join()",
            "isdigit()",
            "itertools.chain.from_iterable()",
            "groupby()"
        ],
        "APIClasses": [
            "itertools.chain"
        ],
        "OriginalQuery": "Python | Joining only adjacent words in list",
        "Source": "Tutorial Websites"
    },
    "2774": {
        "APIs": [
            "join()",
            "str()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Joining unicode list elements",
        "Source": "Tutorial Websites"
    },
    "2775": {
        "APIs": [
            "split()",
            "zip()",
            "chain()",
            "cycle()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | K Character Split String",
        "Source": "Tutorial Websites"
    },
    "2776": {
        "APIs": [
            "enumerate()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | K Divided Indices List",
        "Source": "Tutorial Websites"
    },
    "2777": {
        "APIs": [
            "max()",
            "min()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | K Division Grouping",
        "Source": "Tutorial Websites"
    },
    "2778": {
        "APIs": [
            "index()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | K Value Indices Product",
        "Source": "Tutorial Websites"
    },
    "2779": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | K elements Slicing",
        "Source": "Tutorial Websites"
    },
    "2780": {
        "APIs": [
            "str.rjust()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python | K length Padding in List",
        "Source": "Tutorial Websites"
    },
    "2781": {
        "APIs": [
            "update()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | K modulo on each Dictionary Key",
        "Source": "Tutorial Websites"
    },
    "2782": {
        "APIs": [
            "sum()",
            "next()",
            "islice()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | K occurrence element Test",
        "Source": "Tutorial Websites"
    },
    "2783": {
        "APIs": [
            "enumerate()",
            "list()",
            "keys()",
            "index()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Key index in Dictionary",
        "Source": "Tutorial Websites"
    },
    "2784": {
        "APIs": [
            "urllib.urlencode()"
        ],
        "APIClasses": [
            "urllib"
        ],
        "OriginalQuery": "Python | Key-Value to URL Parameter Conversion",
        "Source": "Tutorial Websites"
    },
    "2785": {
        "APIs": [
            "max()",
            "values()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Keys with Maximum value",
        "Source": "Tutorial Websites"
    },
    "2786": {
        "APIs": [
            "next()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Kth Non-None String from Rear",
        "Source": "Tutorial Websites"
    },
    "2787": {
        "APIs": [
            "lower()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Kth index character similar Strings",
        "Source": "Tutorial Websites"
    },
    "2788": {
        "APIs": [
            "sorted()",
            "itertools.permutation()",
            "join()",
            "max()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Largest number possible from list of given numbers",
        "Source": "Tutorial Websites"
    },
    "2789": {
        "APIs": [
            "list()",
            "len()",
            "sort()",
            "find_len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Largest, Smallest, Second Largest, Second Smallest in a List",
        "Source": "Tutorial Websites"
    },
    "2790": {
        "APIs": [
            "index()",
            "join()",
            "rfind()",
            "max()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Last occurrence of some element in a list",
        "Source": "Tutorial Websites"
    },
    "2791": {
        "APIs": [
            "format()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Lead and Trail padding of strings list",
        "Source": "Tutorial Websites"
    },
    "2792": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Least Value test in Dictionary",
        "Source": "Tutorial Websites"
    },
    "2793": {
        "APIs": [
            "min()",
            "isinstance()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Lexicographically smallest string in mixed list",
        "Source": "Tutorial Websites"
    },
    "2794": {
        "APIs": [
            "range()",
            "len()",
            "search()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Linear search on list or tuples",
        "Source": "Tutorial Websites"
    },
    "2795": {
        "APIs": [
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | List Element Count with Order",
        "Source": "Tutorial Websites"
    },
    "2796": {
        "APIs": [
            "range()",
            "itertools.cycle()",
            "itertools.islice()"
        ],
        "APIClasses": [
            "itertools",
            "itertools"
        ],
        "OriginalQuery": "Python | List Initialization with alternate 0s and 1s",
        "Source": "Tutorial Websites"
    },
    "2797": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | List Inversions",
        "Source": "Tutorial Websites"
    },
    "2798": {
        "APIs": [
            "range()",
            "len()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | List consisting of all the alternate elements",
        "Source": "Tutorial Websites"
    },
    "2799": {
        "APIs": [
            "range()",
            "itertools.chain()",
            "itertools.tee()",
            "zip()"
        ],
        "APIClasses": [
            "itertools",
            "itertools"
        ],
        "OriginalQuery": "Python | List expansion by K",
        "Source": "Tutorial Websites"
    },
    "2800": {
        "APIs": [
            "Counter()",
            "set()",
            "itertools.chain.from_iterable()",
            "map()",
            "get()"
        ],
        "APIClasses": [
            "itertools.chain"
        ],
        "OriginalQuery": "Python | List frequency of elements",
        "Source": "Tutorial Websites"
    },
    "2801": {
        "APIs": [
            "join()",
            "str()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | List of float to string conversion",
        "Source": "Tutorial Websites"
    },
    "2802": {
        "APIs": [
            "zip()",
            "min()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | List of tuples Minimum",
        "Source": "Tutorial Websites"
    },
    "2803": {
        "APIs": [
            "str()",
            "strip()",
            "map()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | List of tuples to String",
        "Source": "Tutorial Websites"
    },
    "2804": {
        "APIs": [
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | List of tuples to dictionary conversion",
        "Source": "Tutorial Websites"
    },
    "2805": {
        "APIs": [
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | List value merge in dictionary",
        "Source": "Tutorial Websites"
    },
    "2806": {
        "APIs": [
            "max()",
            "re.findall()",
            "findall()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python | Longest Run of given Character in String",
        "Source": "Tutorial Websites"
    },
    "2807": {
        "APIs": [
            "len()",
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Longest String in list",
        "Source": "Tutorial Websites"
    },
    "2808": {
        "APIs": [
            "lower()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Lowercase first character of String",
        "Source": "Tutorial Websites"
    },
    "2809": {
        "APIs": [
            "sorted()",
            "set()",
            "list()",
            "interval_extract()",
            "itertools.groupby()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Make a list of intervals with sequential numbers",
        "Source": "Tutorial Websites"
    },
    "2810": {
        "APIs": [
            "list()",
            "product()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Make pair from two list such that elements are not same in pairs",
        "Source": "Tutorial Websites"
    },
    "2811": {
        "APIs": [
            "index()",
            "len()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Matching elements count",
        "Source": "Tutorial Websites"
    },
    "2812": {
        "APIs": [
            "append()",
            "sort()",
            "len()",
            "chain()",
            "statistics.median()"
        ],
        "APIClasses": [
            "statistics"
        ],
        "OriginalQuery": "Python | Mathematical Median of Cumulative Records",
        "Source": "Tutorial Websites"
    },
    "2813": {
        "APIs": [
            "prod()",
            "chain()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Matrix Product",
        "Source": "Tutorial Websites"
    },
    "2814": {
        "APIs": [
            "sum()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Matrix True Summation",
        "Source": "Tutorial Websites"
    },
    "2815": {
        "APIs": [
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Matrix Tuple pair Column product",
        "Source": "Tutorial Websites"
    },
    "2816": {
        "APIs": [
            "list()",
            "range()",
            "next()",
            "itertools.count()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Matrix creation of n*n",
        "Source": "Tutorial Websites"
    },
    "2817": {
        "APIs": [
            "tuple()",
            "min()",
            "zip()",
            "values()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Max/Min of tuple dictionary values",
        "Source": "Tutorial Websites"
    },
    "2818": {
        "APIs": [
            "max()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Max/Min value in Nth Column in Matrix",
        "Source": "Tutorial Websites"
    },
    "2819": {
        "APIs": [
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Maximize Column in Records List",
        "Source": "Tutorial Websites"
    },
    "2820": {
        "APIs": [
            "zip()",
            "max()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Maximize Record list",
        "Source": "Tutorial Websites"
    },
    "2821": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Maximize alternate element List",
        "Source": "Tutorial Websites"
    },
    "2822": {
        "APIs": [
            "max()",
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Maximum Difference in String",
        "Source": "Tutorial Websites"
    },
    "2823": {
        "APIs": [
            "reduce()",
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Maximum Sum Sublist",
        "Source": "Tutorial Websites"
    },
    "2824": {
        "APIs": [
            "max()",
            "abs()",
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Maximum absolute difference list of list",
        "Source": "Tutorial Websites"
    },
    "2825": {
        "APIs": [
            "max()",
            "min()",
            "chain()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Maximum and Minimum value from two lists",
        "Source": "Tutorial Websites"
    },
    "2826": {
        "APIs": [
            "range()",
            "len()",
            "min()",
            "index()",
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Maximum and minimum element\u2019s position in a list",
        "Source": "Tutorial Websites"
    },
    "2827": {
        "APIs": [
            "max()",
            "defaultdict()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Maximum distance between elements",
        "Source": "Tutorial Websites"
    },
    "2828": {
        "APIs": [
            "max()",
            "map()",
            "chain.from_iterable()",
            "from_iterable()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python | Maximum element in tuple list",
        "Source": "Tutorial Websites"
    },
    "2829": {
        "APIs": [
            "max()",
            "collections.Counter()"
        ],
        "APIClasses": [
            "collections"
        ],
        "OriginalQuery": "Python | Maximum frequency character in String",
        "Source": "Tutorial Websites"
    },
    "2830": {
        "APIs": [
            "max()",
            "combination()",
            "nlargest()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Maximum modulo pair",
        "Source": "Tutorial Websites"
    },
    "2831": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Maximum of Product Pairs in Tuple List",
        "Source": "Tutorial Websites"
    },
    "2832": {
        "APIs": [
            "sum()",
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Maximum sum of elements of list in a list of lists",
        "Source": "Tutorial Websites"
    },
    "2833": {
        "APIs": [
            "sum()",
            "itertools.islice()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Mean of consecutive Sublist",
        "Source": "Tutorial Websites"
    },
    "2834": {
        "APIs": [
            "len()",
            "chain()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Mean of tuple list",
        "Source": "Tutorial Websites"
    },
    "2835": {
        "APIs": [
            "groupby()",
            "isdigit()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Merge Consecutive digits Strings",
        "Source": "Tutorial Websites"
    },
    "2836": {
        "APIs": [
            "defaultdict()",
            "set()",
            "update()",
            "next_node()",
            "vis()",
            "sorted()",
            "comp()",
            "list()",
            "merge_common()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Merge List with common elements in a List of Lists",
        "Source": "Tutorial Websites"
    },
    "2837": {
        "APIs": [
            "setdefault()",
            "items()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Merge Python key values to list",
        "Source": "Tutorial Websites"
    },
    "2838": {
        "APIs": [
            "join()",
            "reduce()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Merge Range Characters in List",
        "Source": "Tutorial Websites"
    },
    "2839": {
        "APIs": [
            "join()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Merge Tuple String List values to String",
        "Source": "Tutorial Websites"
    },
    "2840": {
        "APIs": [
            "join()",
            "isalpha()",
            "itertools.chain.from_iterable()",
            "groupby()"
        ],
        "APIClasses": [
            "itertools.chain"
        ],
        "OriginalQuery": "Python | Merge adjacent Digit characters",
        "Source": "Tutorial Websites"
    },
    "2841": {
        "APIs": [
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Merge corresponding sublists from two different lists",
        "Source": "Tutorial Websites"
    },
    "2842": {
        "APIs": [
            "list()",
            "map()",
            "Zip()",
            "starmap()",
            "concat()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Merge elements of sublists",
        "Source": "Tutorial Websites"
    },
    "2843": {
        "APIs": [
            "list()",
            "zip()",
            "merge()",
            "array()",
            "tolist()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Merge first and last elements separately in a list",
        "Source": "Tutorial Websites"
    },
    "2844": {
        "APIs": [
            "zip()",
            "defaultdict()",
            "itemgetter()",
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Merge key value lists",
        "Source": "Tutorial Websites"
    },
    "2845": {
        "APIs": [
            "join()",
            "reduce()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Merge list elements",
        "Source": "Tutorial Websites"
    },
    "2846": {
        "APIs": [
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Merge list of tuple into list by joining the strings",
        "Source": "Tutorial Websites"
    },
    "2847": {
        "APIs": [
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Merge overlapping part of lists",
        "Source": "Tutorial Websites"
    },
    "2848": {
        "APIs": [
            "zip()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Merge two list of lists according to first element",
        "Source": "Tutorial Websites"
    },
    "2849": {
        "APIs": [
            "zip()",
            "itertools.cycle()",
            "reduce()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Merge two lists alternatively",
        "Source": "Tutorial Websites"
    },
    "2850": {
        "APIs": [
            "range()",
            "len()",
            "merge()",
            "zip()",
            "enumerate()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Merge two lists into list of tuples",
        "Source": "Tutorial Websites"
    },
    "2851": {
        "APIs": [
            "collections.Counter()",
            "itertools.groupby()"
        ],
        "APIClasses": [
            "collections",
            "itertools"
        ],
        "OriginalQuery": "Python | Merging duplicates to list of list",
        "Source": "Tutorial Websites"
    },
    "2852": {
        "APIs": [
            "functools.reduce()",
            "filter()"
        ],
        "APIClasses": [
            "functools"
        ],
        "OriginalQuery": "Python | Merging nested lists",
        "Source": "Tutorial Websites"
    },
    "2853": {
        "APIs": [
            "update()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Merging two Dictionaries",
        "Source": "Tutorial Websites"
    },
    "2854": {
        "APIs": [
            "defaultdict()",
            "extend()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Merging two list of dictionaries",
        "Source": "Tutorial Websites"
    },
    "2855": {
        "APIs": [
            "min()",
            "max()",
            "map()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Min and Max value in list of tuples",
        "Source": "Tutorial Websites"
    },
    "2856": {
        "APIs": [
            "min()",
            "float()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Min/Max value in float string list",
        "Source": "Tutorial Websites"
    },
    "2857": {
        "APIs": [
            "min()",
            "abs()",
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Minimum Difference in Matrix Columns",
        "Source": "Tutorial Websites"
    },
    "2858": {
        "APIs": [
            "filter()",
            "set()",
            "groupby()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Minimum K records of Nth index in tuple list",
        "Source": "Tutorial Websites"
    },
    "2859": {
        "APIs": [
            "min()",
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Minimum Sum of Consecutive Characters",
        "Source": "Tutorial Websites"
    },
    "2860": {
        "APIs": [
            "min()",
            "map()",
            "chain.from_iterable()",
            "from_iterable()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python | Minimum element in tuple list",
        "Source": "Tutorial Websites"
    },
    "2861": {
        "APIs": [
            "min()",
            "groupby()",
            "itemgetter()",
            "setdefault()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Minimum key equal pairs",
        "Source": "Tutorial Websites"
    },
    "2862": {
        "APIs": [
            "Counter()",
            "max()",
            "values()",
            "minSubsets()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Minimum number of subsets with distinct elements using Counter",
        "Source": "Tutorial Websites"
    },
    "2863": {
        "APIs": [
            "min()",
            "values()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Minimum value keys in Dictionary",
        "Source": "Tutorial Websites"
    },
    "2864": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Modify Equal Tuple Rows",
        "Source": "Tutorial Websites"
    },
    "2865": {
        "APIs": [
            "zip()",
            "map()",
            "operator.itemgetter()"
        ],
        "APIClasses": [
            "operator"
        ],
        "OriginalQuery": "Python | Modifying tuple contents with list",
        "Source": "Tutorial Websites"
    },
    "2866": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Modulo K List",
        "Source": "Tutorial Websites"
    },
    "2867": {
        "APIs": [
            "append()",
            "pop()",
            "index()",
            "sort()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Move element to end of the list",
        "Source": "Tutorial Websites"
    },
    "2868": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Move given element to List Start",
        "Source": "Tutorial Websites"
    },
    "2869": {
        "APIs": [
            "pop()",
            "insert()",
            "index()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Move one list element to another list",
        "Source": "Tutorial Websites"
    },
    "2870": {
        "APIs": [
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Multiple indices Replace in String",
        "Source": "Tutorial Websites"
    },
    "2871": {
        "APIs": [
            "range()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Multiplication till Null value",
        "Source": "Tutorial Websites"
    },
    "2872": {
        "APIs": [
            "zip()",
            "tuple()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Multiply Adjacent elements",
        "Source": "Tutorial Websites"
    },
    "2873": {
        "APIs": [
            "get()",
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Multiply Dictionary Value by Constant",
        "Source": "Tutorial Websites"
    },
    "2874": {
        "APIs": [
            "int()",
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Multiply Integer in Mixed List of string and numbers",
        "Source": "Tutorial Websites"
    },
    "2875": {
        "APIs": [
            "numpy.prod()",
            "reduce()"
        ],
        "APIClasses": [
            "numpy"
        ],
        "OriginalQuery": "Python | Multiply all numbers in the list (4 different ways)",
        "Source": "Tutorial Websites"
    },
    "2876": {
        "APIs": [
            "enumerate()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Multiply each element in a sublist by its index",
        "Source": "Tutorial Websites"
    },
    "2877": {
        "APIs": [
            "prod()",
            "range()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Multiplying Alternate elements in List",
        "Source": "Tutorial Websites"
    },
    "2878": {
        "APIs": [
            "prod()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Multiplying Selective Values",
        "Source": "Tutorial Websites"
    },
    "2879": {
        "APIs": [
            "combinations()",
            "zip()",
            "sub()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Mutual tuple subtraction in list",
        "Source": "Tutorial Websites"
    },
    "2880": {
        "APIs": [
            "set.symmetric_difference()",
            "symmetric_difference()"
        ],
        "APIClasses": [
            "set"
        ],
        "OriginalQuery": "Python | Mutually different Records",
        "Source": "Tutorial Websites"
    },
    "2881": {
        "APIs": [
            "sum()",
            "zip()",
            "any()",
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | N consecutive Odd or Even Numbers",
        "Source": "Tutorial Websites"
    },
    "2882": {
        "APIs": [
            "tuple()",
            "repeat()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | N element incremental tuples",
        "Source": "Tutorial Websites"
    },
    "2883": {
        "APIs": [
            "itemgetter()",
            "items()",
            "sorted()",
            "nlargest()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | N largest values in dictionary",
        "Source": "Tutorial Websites"
    },
    "2884": {
        "APIs": [
            "zip()",
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Nested Records Modulo",
        "Source": "Tutorial Websites"
    },
    "2885": {
        "APIs": [
            "zip()",
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Nested Tuples Subtraction",
        "Source": "Tutorial Websites"
    },
    "2886": {
        "APIs": [
            "set()",
            "sum()",
            "chain()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Non-Repeating value Summation in Matrix",
        "Source": "Tutorial Websites"
    },
    "2887": {
        "APIs": [
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Nth Column vertical string in Matrix",
        "Source": "Tutorial Websites"
    },
    "2888": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Nth column Matrix Product",
        "Source": "Tutorial Websites"
    },
    "2889": {
        "APIs": [
            "range()",
            "len()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Nth tuple index Subtraction by K",
        "Source": "Tutorial Websites"
    },
    "2890": {
        "APIs": [
            "len()",
            "sum()",
            "functools.reduce()",
            "reduce()",
            "bisect()",
            "sort()"
        ],
        "APIClasses": [
            "functools"
        ],
        "OriginalQuery": "Python | Number of values greater than K in list",
        "Source": "Tutorial Websites"
    },
    "2891": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Operate on every Kth element of list",
        "Source": "Tutorial Websites"
    },
    "2892": {
        "APIs": [
            "upper()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Operation to each element in list",
        "Source": "Tutorial Websites"
    },
    "2893": {
        "APIs": [
            "str.rjust()",
            "rjust()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python | Optional padding in list elements",
        "Source": "Tutorial Websites"
    },
    "2894": {
        "APIs": [
            "ljust()",
            "len()",
            "format()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Padding a string upto fixed length",
        "Source": "Tutorial Websites"
    },
    "2895": {
        "APIs": [
            "append()",
            "join()",
            "zip()",
            "cycle()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Pair Kth character with each element",
        "Source": "Tutorial Websites"
    },
    "2896": {
        "APIs": [
            "combinations()",
            "zip()",
            "mul()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Pair Product combinations",
        "Source": "Tutorial Websites"
    },
    "2897": {
        "APIs": [
            "zip()",
            "itertools.chain.from_iterable()"
        ],
        "APIClasses": [
            "itertools.chain"
        ],
        "OriginalQuery": "Python | Pair and combine nested list to tuple list",
        "Source": "Tutorial Websites"
    },
    "2898": {
        "APIs": [
            "len()",
            "range()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Pair iteration in list",
        "Source": "Tutorial Websites"
    },
    "2899": {
        "APIs": [
            "range()",
            "len()",
            "append()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Pair summation of list elements",
        "Source": "Tutorial Websites"
    },
    "2900": {
        "APIs": [
            "zip()",
            "map()",
            "concat()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Pair the consecutive character strings in a list",
        "Source": "Tutorial Websites"
    },
    "2901": {
        "APIs": [
            "test_func()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Passing dictionary as keyword arguments",
        "Source": "Tutorial Websites"
    },
    "2902": {
        "APIs": [
            "range()",
            "len()",
            "append()",
            "zip()",
            "count()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Percentage occurrence at index",
        "Source": "Tutorial Websites"
    },
    "2903": {
        "APIs": [
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Percentage similarity of lists",
        "Source": "Tutorial Websites"
    },
    "2904": {
        "APIs": [
            "insert()",
            "collections.deque.appendleft()",
            "appendleft()"
        ],
        "APIClasses": [
            "collections.deque"
        ],
        "OriginalQuery": "Python | Perform append at beginning of list",
        "Source": "Tutorial Websites"
    },
    "2905": {
        "APIs": [
            "update()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Perform operation on each key dictionary",
        "Source": "Tutorial Websites"
    },
    "2906": {
        "APIs": [
            "permutations()",
            "list()",
            "join()",
            "allPermutations()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Permutation of a given string using inbuilt function",
        "Source": "Tutorial Websites"
    },
    "2907": {
        "APIs": [
            "sum()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Position Summation in List of Tuples",
        "Source": "Tutorial Websites"
    },
    "2908": {
        "APIs": [
            "max()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Positions of maximum element in list",
        "Source": "Tutorial Websites"
    },
    "2909": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Preceding element tuples in list",
        "Source": "Tutorial Websites"
    },
    "2910": {
        "APIs": [
            "range()",
            "len()",
            "from_iterable()",
            "accumulate()",
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Prefix Sum Subarray till False value",
        "Source": "Tutorial Websites"
    },
    "2911": {
        "APIs": [
            "rsplit()",
            "rpartition()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Prefix extraction before specific character",
        "Source": "Tutorial Websites"
    },
    "2912": {
        "APIs": [
            "len()",
            "append()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Prefix extraction depending on size",
        "Source": "Tutorial Websites"
    },
    "2913": {
        "APIs": [
            "startswith()",
            "map()",
            "filter()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Prefix key match in dictionary",
        "Source": "Tutorial Websites"
    },
    "2914": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Prefix sum list",
        "Source": "Tutorial Websites"
    },
    "2915": {
        "APIs": [
            "chr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Print Alphabets till N",
        "Source": "Tutorial Websites"
    },
    "2916": {
        "APIs": [
            "range()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Print an Inverted Star Pattern",
        "Source": "Tutorial Websites"
    },
    "2917": {
        "APIs": [
            "xrange()",
            "range()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Print diagonals of 2D list",
        "Source": "Tutorial Websites"
    },
    "2918": {
        "APIs": [
            "pop()",
            "range()",
            "len()",
            "append()",
            "remove()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Print list after removing element at given index",
        "Source": "Tutorial Websites"
    },
    "2919": {
        "APIs": [
            "zip()",
            "range()",
            "cycle()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Print list elements in circular range",
        "Source": "Tutorial Websites"
    },
    "2920": {
        "APIs": [
            "checkYear()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Print number of leap years from given list of years",
        "Source": "Tutorial Websites"
    },
    "2921": {
        "APIs": [
            "set()",
            "list()",
            "reduce()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Print the common elements in all sublists",
        "Source": "Tutorial Websites"
    },
    "2922": {
        "APIs": [
            "upper()",
            "title()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Print the initials of a name with last name in full",
        "Source": "Tutorial Websites"
    },
    "2923": {
        "APIs": [
            "range()",
            "len()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Printing list vertically",
        "Source": "Tutorial Websites"
    },
    "2924": {
        "APIs": [
            "get()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Priority key assignment in dictionary",
        "Source": "Tutorial Websites"
    },
    "2925": {
        "APIs": [
            "prod()",
            "range()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Product of Prefix in list",
        "Source": "Tutorial Websites"
    },
    "2926": {
        "APIs": [
            "reduce()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Product of Squares in List",
        "Source": "Tutorial Websites"
    },
    "2927": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Product of kth column in List of Lists",
        "Source": "Tutorial Websites"
    },
    "2928": {
        "APIs": [
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Program to accept the strings which contains all vowels",
        "Source": "Tutorial Websites"
    },
    "2929": {
        "APIs": [
            "split()",
            "list()",
            "Convert()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Program to convert String to a List",
        "Source": "Tutorial Websites"
    },
    "2930": {
        "APIs": [
            "join()",
            "str.join()",
            "map()",
            "str()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python | Program to convert a tuple to a string",
        "Source": "Tutorial Websites"
    },
    "2931": {
        "APIs": [
            "append()",
            "count()",
            "Counter()",
            "list()",
            "set()",
            "get()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Program to count duplicates in a list of tuples",
        "Source": "Tutorial Websites"
    },
    "2932": {
        "APIs": [
            "len()",
            "type()",
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Program to count number of lists in a list of lists",
        "Source": "Tutorial Websites"
    },
    "2933": {
        "APIs": [
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Program to print duplicates from a list of integers",
        "Source": "Tutorial Websites"
    },
    "2934": {
        "APIs": [
            "insert()",
            "deque()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Rear Addition of Record",
        "Source": "Tutorial Websites"
    },
    "2935": {
        "APIs": [
            "list()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Rear elements from Tuple Strings",
        "Source": "Tutorial Websites"
    },
    "2936": {
        "APIs": [
            "split()",
            "rstrip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Rear stray character String split",
        "Source": "Tutorial Websites"
    },
    "2937": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Rearrange Positive and Negative Elements",
        "Source": "Tutorial Websites"
    },
    "2938": {
        "APIs": [
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Record Index Product",
        "Source": "Tutorial Websites"
    },
    "2939": {
        "APIs": [
            "min()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Record Point with Minimum difference",
        "Source": "Tutorial Websites"
    },
    "2940": {
        "APIs": [
            "map()",
            "Counter()",
            "frozenset()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Record Similar tuple occurrences",
        "Source": "Tutorial Websites"
    },
    "2941": {
        "APIs": [
            "set()",
            "intersection()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Records Intersection",
        "Source": "Tutorial Websites"
    },
    "2942": {
        "APIs": [
            "zip()",
            "join()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Records List Concatenation",
        "Source": "Tutorial Websites"
    },
    "2943": {
        "APIs": [
            "set.union()",
            "union()"
        ],
        "APIClasses": [
            "set"
        ],
        "OriginalQuery": "Python | Records Union",
        "Source": "Tutorial Websites"
    },
    "2944": {
        "APIs": [
            "reduce()",
            "chain()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Records list XOR",
        "Source": "Tutorial Websites"
    },
    "2945": {
        "APIs": [
            "append()",
            "list()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Records with Key\u2019s value greater than K",
        "Source": "Tutorial Websites"
    },
    "2946": {
        "APIs": [
            "enumerate()",
            "sort()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Relative sorted order in Matrix",
        "Source": "Tutorial Websites"
    },
    "2947": {
        "APIs": [
            "groupby()",
            "itemgetter()",
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove Consecutive tuple according to key",
        "Source": "Tutorial Websites"
    },
    "2948": {
        "APIs": [
            "count()",
            "len()",
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove False row from matrix",
        "Source": "Tutorial Websites"
    },
    "2949": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove Front K elements",
        "Source": "Tutorial Websites"
    },
    "2950": {
        "APIs": [
            "startswith()",
            "pop()",
            "dict()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove Keys from dictionary starting with K",
        "Source": "Tutorial Websites"
    },
    "2951": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove Kth character from strings list",
        "Source": "Tutorial Websites"
    },
    "2952": {
        "APIs": [
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove List elements containing given String character",
        "Source": "Tutorial Websites"
    },
    "2953": {
        "APIs": [
            "append()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove None values from list",
        "Source": "Tutorial Websites"
    },
    "2954": {
        "APIs": [
            "enumerate()",
            "join()",
            "sort()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove Reduntant Substrings from Strings List",
        "Source": "Tutorial Websites"
    },
    "2955": {
        "APIs": [
            "enumerate()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove additional spaces in list",
        "Source": "Tutorial Websites"
    },
    "2956": {
        "APIs": [
            "sub()",
            "isalpha()",
            "isnumeric()",
            "alnum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove all characters except letters and numbers",
        "Source": "Tutorial Websites"
    },
    "2957": {
        "APIs": [
            "str.maketrans()",
            "maketrans()",
            "str.isalpha()"
        ],
        "APIClasses": [
            "str",
            "str"
        ],
        "OriginalQuery": "Python | Remove all digits from a list of strings",
        "Source": "Tutorial Websites"
    },
    "2958": {
        "APIs": [
            "set()",
            "map()",
            "tuple()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove all duplicates and permutations in nested list",
        "Source": "Tutorial Websites"
    },
    "2959": {
        "APIs": [
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove all duplicates words from a given sentence",
        "Source": "Tutorial Websites"
    },
    "2960": {
        "APIs": [
            "filter()",
            "partial()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove all occurrences in nested list",
        "Source": "Tutorial Websites"
    },
    "2961": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove all strings from a list of tuples",
        "Source": "Tutorial Websites"
    },
    "2962": {
        "APIs": [
            "pop()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove all sublists outside the given range",
        "Source": "Tutorial Websites"
    },
    "2963": {
        "APIs": [
            "filter()",
            "remove()",
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove all values from a list present in other list",
        "Source": "Tutorial Websites"
    },
    "2964": {
        "APIs": [
            "len()",
            "pop()",
            "removeThirdNumber()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove and print every third from list until it becomes empty",
        "Source": "Tutorial Websites"
    },
    "2965": {
        "APIs": [
            "groupby()",
            "zip_longest()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove consecutive duplicates from list",
        "Source": "Tutorial Websites"
    },
    "2966": {
        "APIs": [
            "items()",
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove duplicate dictionaries from nested dictionary",
        "Source": "Tutorial Websites"
    },
    "2967": {
        "APIs": [
            "set()",
            "OrderedDict()",
            "tuple()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove duplicate lists in tuples (Preserving Order)",
        "Source": "Tutorial Websites"
    },
    "2968": {
        "APIs": [
            "set()",
            "tuple()",
            "removeDuplicates()",
            "list()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove duplicate tuples from list of tuples",
        "Source": "Tutorial Websites"
    },
    "2969": {
        "APIs": [
            "set()",
            "append()",
            "add()",
            "reduce()",
            "keys()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove duplicates based on Kth element tuple list",
        "Source": "Tutorial Websites"
    },
    "2970": {
        "APIs": [
            "sorted()",
            "set()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove duplicates from nested list",
        "Source": "Tutorial Websites"
    },
    "2971": {
        "APIs": [
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove duplicates in Matrix",
        "Source": "Tutorial Websites"
    },
    "2972": {
        "APIs": [
            "append()",
            "any()",
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove element from given list containing specific digits",
        "Source": "Tutorial Websites"
    },
    "2973": {
        "APIs": [
            "Counter()",
            "append()",
            "removeElements()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove elements of list that are repeated less than k times",
        "Source": "Tutorial Websites"
    },
    "2974": {
        "APIs": [
            "remove()",
            "join()",
            "split()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove empty strings from list of strings",
        "Source": "Tutorial Websites"
    },
    "2975": {
        "APIs": [
            "Remove()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove empty tuples from a list",
        "Source": "Tutorial Websites"
    },
    "2976": {
        "APIs": [
            "append()",
            "itertools.filterfalse()",
            "itertools.count()"
        ],
        "APIClasses": [
            "itertools",
            "itertools"
        ],
        "OriginalQuery": "Python | Remove first K elements matching some condition",
        "Source": "Tutorial Websites"
    },
    "2977": {
        "APIs": [
            "replace()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove given character from Strings list",
        "Source": "Tutorial Websites"
    },
    "2978": {
        "APIs": [
            "pop()",
            "remove()",
            "index()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove given element from the list",
        "Source": "Tutorial Websites"
    },
    "2979": {
        "APIs": [
            "items()",
            "pop()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove item from dictionary when key is unknown",
        "Source": "Tutorial Websites"
    },
    "2980": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove last K elements of list",
        "Source": "Tutorial Websites"
    },
    "2981": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove last character in list of strings",
        "Source": "Tutorial Websites"
    },
    "2982": {
        "APIs": [
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove matching tuples",
        "Source": "Tutorial Websites"
    },
    "2983": {
        "APIs": [
            "pop()",
            "items()",
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove multiple keys from dictionary",
        "Source": "Tutorial Websites"
    },
    "2984": {
        "APIs": [
            "tuple()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove particular element from tuple list",
        "Source": "Tutorial Websites"
    },
    "2985": {
        "APIs": [
            "remove()",
            "startswith()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove prefix strings from list",
        "Source": "Tutorial Websites"
    },
    "2986": {
        "APIs": [
            "randrange()",
            "pop()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove random element from list",
        "Source": "Tutorial Websites"
    },
    "2987": {
        "APIs": [
            "list()",
            "tuple()",
            "sorted()",
            "Remove()",
            "map()",
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove repeated sublists from given list",
        "Source": "Tutorial Websites"
    },
    "2988": {
        "APIs": [
            "all()",
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove similar element rows in tuple Matrix",
        "Source": "Tutorial Websites"
    },
    "2989": {
        "APIs": [
            "translate()",
            "replace()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove spaces from dictionary keys",
        "Source": "Tutorial Websites"
    },
    "2990": {
        "APIs": [
            "str()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove square brackets from list",
        "Source": "Tutorial Websites"
    },
    "2991": {
        "APIs": [
            "sorted()",
            "map()",
            "any()",
            "append()",
            "list()",
            "removeSublist()",
            "keys()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove sublists that are present in another sublist",
        "Source": "Tutorial Websites"
    },
    "2992": {
        "APIs": [
            "replace()",
            "join()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove substring list from String",
        "Source": "Tutorial Websites"
    },
    "2993": {
        "APIs": [
            "endswith()",
            "len()",
            "sub()",
            "replace()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove the given substring from end of string",
        "Source": "Tutorial Websites"
    },
    "2994": {
        "APIs": [
            "pop()",
            "itertools.dropwhile()",
            "itertools.takewhile()"
        ],
        "APIClasses": [
            "itertools",
            "itertools"
        ],
        "OriginalQuery": "Python | Remove trailing empty elements from given list",
        "Source": "Tutorial Websites"
    },
    "2995": {
        "APIs": [
            "map()",
            "str.strip()",
            "strip()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python | Remove trailing/leading special characters from strings list",
        "Source": "Tutorial Websites"
    },
    "2996": {
        "APIs": [
            "any()",
            "isalpha()",
            "search()",
            "filter()",
            "list()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove tuple from list of tuples if not containing any character",
        "Source": "Tutorial Websites"
    },
    "2997": {
        "APIs": [
            "list()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove tuples from list of tuples if greater than n",
        "Source": "Tutorial Websites"
    },
    "2998": {
        "APIs": [
            "set()",
            "add()",
            "append()",
            "next()",
            "groupby()",
            "items()",
            "OrderedDict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove tuples having duplicate first value from given list of tuples",
        "Source": "Tutorial Websites"
    },
    "2999": {
        "APIs": [
            "frozenset()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove unidentical lists",
        "Source": "Tutorial Websites"
    },
    "3000": {
        "APIs": [
            "set()",
            "tuple()",
            "items()",
            "Counter()",
            "sorted()",
            "add()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Remove unordered duplicate elements from a list",
        "Source": "Tutorial Websites"
    },
    "3001": {
        "APIs": [
            "re.sub()",
            "split()",
            "join()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python | Remove unwanted spaces from string",
        "Source": "Tutorial Websites"
    },
    "3002": {
        "APIs": [
            "split()",
            "partition()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Removing Initial word from string",
        "Source": "Tutorial Websites"
    },
    "3003": {
        "APIs": [
            "range()",
            "len()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Removing dictionary from list of dictionaries",
        "Source": "Tutorial Websites"
    },
    "3004": {
        "APIs": [
            "range()",
            "len()",
            "append()",
            "enumerate()",
            "values()",
            "frozenset()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Removing duplicate dicts in list",
        "Source": "Tutorial Websites"
    },
    "3005": {
        "APIs": [
            "set()",
            "tuple()",
            "OrderedDict()",
            "fromkeys()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Removing duplicates from tuple",
        "Source": "Tutorial Websites"
    },
    "3006": {
        "APIs": [
            "append()",
            "replace()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Removing newline character from string",
        "Source": "Tutorial Websites"
    },
    "3007": {
        "APIs": [
            "type()",
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Removing strings from tuple",
        "Source": "Tutorial Websites"
    },
    "3008": {
        "APIs": [
            "replace()",
            "join()",
            "translate()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Removing unwanted characters from string",
        "Source": "Tutorial Websites"
    },
    "3009": {
        "APIs": [
            "len()",
            "divmod()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Repeat String till K",
        "Source": "Tutorial Websites"
    },
    "3010": {
        "APIs": [
            "range()",
            "list()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Repeat and Multiply list extension",
        "Source": "Tutorial Websites"
    },
    "3011": {
        "APIs": [
            "range()",
            "itertools.chain.from_iterable()",
            "itertools.repeat()"
        ],
        "APIClasses": [
            "itertools.chain",
            "itertools"
        ],
        "OriginalQuery": "Python | Repeat each element K times in list",
        "Source": "Tutorial Websites"
    },
    "3012": {
        "APIs": [
            "repeat()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Repeating tuples N times",
        "Source": "Tutorial Websites"
    },
    "3013": {
        "APIs": [
            "set()",
            "range()",
            "len()",
            "join()",
            "count()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Replace characters after K occurrences",
        "Source": "Tutorial Websites"
    },
    "3014": {
        "APIs": [
            "set()",
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Replace duplicates in tuple",
        "Source": "Tutorial Websites"
    },
    "3015": {
        "APIs": [
            "append()",
            "index()",
            "enumerate()",
            "get()",
            "list()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Replace elements in second list with index of same element in first list",
        "Source": "Tutorial Websites"
    },
    "3016": {
        "APIs": [
            "range()",
            "len()",
            "replaceOrdinal()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Replace list elements with its ordinal number",
        "Source": "Tutorial Websites"
    },
    "3017": {
        "APIs": [
            "replace()",
            "translate()",
            "maketrans()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Replace multiple characters at once",
        "Source": "Tutorial Websites"
    },
    "3018": {
        "APIs": [
            "replace()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Replace punctuations with K",
        "Source": "Tutorial Websites"
    },
    "3019": {
        "APIs": [
            "split()",
            "join()",
            "rfind()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Replace rear word in String",
        "Source": "Tutorial Websites"
    },
    "3020": {
        "APIs": [
            "replace()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Replace substring in list of strings",
        "Source": "Tutorial Websites"
    },
    "3021": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Replace tuple according to Nth tuple element",
        "Source": "Tutorial Websites"
    },
    "3022": {
        "APIs": [
            "append()",
            "len()",
            "reshape()",
            "iter()",
            "list()",
            "islice()",
            "yieldSublist()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Reshape a list according to given multi list",
        "Source": "Tutorial Websites"
    },
    "3023": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Retain K Front and Rear elements",
        "Source": "Tutorial Websites"
    },
    "3024": {
        "APIs": [
            "groupby()",
            "slice()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Retain K consecutive elements",
        "Source": "Tutorial Websites"
    },
    "3025": {
        "APIs": [
            "len()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Retain records of specific length",
        "Source": "Tutorial Websites"
    },
    "3026": {
        "APIs": [
            "islower()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Return lowercase characters from given string",
        "Source": "Tutorial Websites"
    },
    "3027": {
        "APIs": [
            "array()",
            "argsort()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Returning index of a sorted list",
        "Source": "Tutorial Websites"
    },
    "3028": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Reverse All Strings in String List",
        "Source": "Tutorial Websites"
    },
    "3029": {
        "APIs": [
            "reversed()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Reverse Incremental String Slicing",
        "Source": "Tutorial Websites"
    },
    "3030": {
        "APIs": [
            "sorted()",
            "join()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Reverse Order Sort in String List",
        "Source": "Tutorial Websites"
    },
    "3031": {
        "APIs": [
            "join()",
            "reversed()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Reverse Slicing of given string",
        "Source": "Tutorial Websites"
    },
    "3032": {
        "APIs": [
            "sorted()",
            "zip()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Reverse Sort Row Matrix integration",
        "Source": "Tutorial Websites"
    },
    "3033": {
        "APIs": [
            "reverseArrayUptoK()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Reverse an array upto a given position",
        "Source": "Tutorial Websites"
    },
    "3034": {
        "APIs": [
            "reverseTuple()",
            "reversed()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Reverse each tuple in a list of tuples",
        "Source": "Tutorial Websites"
    },
    "3035": {
        "APIs": [
            "extend()",
            "append()",
            "reverseOrder()",
            "range()",
            "len()",
            "list()",
            "reversed()",
            "zip()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Reverse sequence of strictly increasing integers in a list",
        "Source": "Tutorial Websites"
    },
    "3036": {
        "APIs": [
            "Convert()",
            "array()",
            "list()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Reverse sign of each element in given list",
        "Source": "Tutorial Websites"
    },
    "3037": {
        "APIs": [
            "reversed()",
            "sorted()",
            "keys()",
            "list()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Reversed Order keys in dictionary",
        "Source": "Tutorial Websites"
    },
    "3038": {
        "APIs": [
            "join()",
            "reversed()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Reversed Split Strings",
        "Source": "Tutorial Websites"
    },
    "3039": {
        "APIs": [
            "max()",
            "map()",
            "sum()",
            "filter()",
            "zip_longest()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Row lengths in Matrix",
        "Source": "Tutorial Websites"
    },
    "3040": {
        "APIs": [
            "reduce()",
            "min()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Row with Minimum element in Matrix",
        "Source": "Tutorial Websites"
    },
    "3041": {
        "APIs": [
            "get()",
            "reduce()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Safe access nested dictionary keys",
        "Source": "Tutorial Websites"
    },
    "3042": {
        "APIs": [
            "join()",
            "ord()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Same and Different value space",
        "Source": "Tutorial Websites"
    },
    "3043": {
        "APIs": [
            "sample()",
            "join()",
            "shuffle()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Scramble strings in list",
        "Source": "Tutorial Websites"
    },
    "3044": {
        "APIs": [
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Search Key from Value",
        "Source": "Tutorial Websites"
    },
    "3045": {
        "APIs": [
            "any()",
            "set.issubset()",
            "itertools.chain()"
        ],
        "APIClasses": [
            "set",
            "itertools"
        ],
        "OriginalQuery": "Python | Search elements in a Matrix",
        "Source": "Tutorial Websites"
    },
    "3046": {
        "APIs": [
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Search in Nth Column of Matrix",
        "Source": "Tutorial Websites"
    },
    "3047": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Search in Nth column in list of tuples",
        "Source": "Tutorial Websites"
    },
    "3048": {
        "APIs": [
            "sum()",
            "itertools.islice()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Sectional subset sum in list",
        "Source": "Tutorial Websites"
    },
    "3049": {
        "APIs": [
            "findall()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Segregate Positive and Negative Integers from mixed string",
        "Source": "Tutorial Websites"
    },
    "3050": {
        "APIs": [
            "range()",
            "len()",
            "append()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Segregate True and False value indices",
        "Source": "Tutorial Websites"
    },
    "3051": {
        "APIs": [
            "endswith()",
            "filter()",
            "endwith()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Segregate list elements by Suffix",
        "Source": "Tutorial Websites"
    },
    "3052": {
        "APIs": [
            "tuple()",
            "map()",
            "zip()",
            "list()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Segregating Key\u2019s Values",
        "Source": "Tutorial Websites"
    },
    "3053": {
        "APIs": [
            "tuple()",
            "zip()",
            "map()",
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Segregating key\u2019s value in list of dictionaries",
        "Source": "Tutorial Websites"
    },
    "3054": {
        "APIs": [
            "list()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Select dictionary with condition given key greater than k",
        "Source": "Tutorial Websites"
    },
    "3055": {
        "APIs": [
            "random.choice()",
            "random.randrange()",
            "random.randint()",
            "random.random()"
        ],
        "APIClasses": [
            "random",
            "random",
            "random",
            "random"
        ],
        "OriginalQuery": "Python | Select random value from a list",
        "Source": "Tutorial Websites"
    },
    "3056": {
        "APIs": [
            "get()",
            "sum()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Selective Keys Summation",
        "Source": "Tutorial Websites"
    },
    "3057": {
        "APIs": [
            "join()",
            "zip()",
            "map()",
            "lambda()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Selective Merge in String list",
        "Source": "Tutorial Websites"
    },
    "3058": {
        "APIs": [
            "extend()",
            "iter()",
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Selective Merge list every Nth position",
        "Source": "Tutorial Websites"
    },
    "3059": {
        "APIs": [
            "dict()",
            "sum()",
            "get()",
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Selective Records Value Summation",
        "Source": "Tutorial Websites"
    },
    "3060": {
        "APIs": [
            "enumerate()",
            "upper()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Selective casing in String",
        "Source": "Tutorial Websites"
    },
    "3061": {
        "APIs": [
            "sum()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Selective indices Summation",
        "Source": "Tutorial Websites"
    },
    "3062": {
        "APIs": [
            "get()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Selective key values in dictionary",
        "Source": "Tutorial Websites"
    },
    "3063": {
        "APIs": [
            "dict()",
            "get()",
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Selective value selection in list of tuples",
        "Source": "Tutorial Websites"
    },
    "3064": {
        "APIs": [
            "sum()",
            "zip()",
            "any()",
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Series K divisible elements",
        "Source": "Tutorial Websites"
    },
    "3065": {
        "APIs": [
            "itertools.filterfalse()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Set Difference in list of dictionaries",
        "Source": "Tutorial Websites"
    },
    "3066": {
        "APIs": [
            "insert()",
            "pop()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Shift from Front to Rear in List",
        "Source": "Tutorial Websites"
    },
    "3067": {
        "APIs": [
            "insert()",
            "pop()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Shift last element to first position in list",
        "Source": "Tutorial Websites"
    },
    "3068": {
        "APIs": [
            "insert()",
            "pop()",
            "range()",
            "shift_sublist()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Shift sublist in list",
        "Source": "Tutorial Websites"
    },
    "3069": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Shift zeroes at end of list",
        "Source": "Tutorial Websites"
    },
    "3070": {
        "APIs": [
            "Itertools.groupby()",
            "itertools.groupby()"
        ],
        "APIClasses": [
            "Itertools",
            "itertools"
        ],
        "OriginalQuery": "Python | Shrink given list for repeating elements",
        "Source": "Tutorial Websites"
    },
    "3071": {
        "APIs": [
            "zip()",
            "shuffle()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Shuffle two lists with same order",
        "Source": "Tutorial Websites"
    },
    "3072": {
        "APIs": [
            "Approach()",
            "zip()",
            "SequenceMatcher.ratio()"
        ],
        "APIClasses": [
            "SequenceMatcher"
        ],
        "OriginalQuery": "Python | Similarity metrics of strings",
        "Source": "Tutorial Websites"
    },
    "3073": {
        "APIs": [
            "combinations()",
            "combination()",
            "extend()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Size Range Combinations in list",
        "Source": "Tutorial Websites"
    },
    "3074": {
        "APIs": [
            "range()",
            "list()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Size and element exponentiation of list",
        "Source": "Tutorial Websites"
    },
    "3075": {
        "APIs": [
            "len()",
            "encode()",
            "sys.getsizeof()"
        ],
        "APIClasses": [
            "sys"
        ],
        "OriginalQuery": "Python | Size of string in memory",
        "Source": "Tutorial Websites"
    },
    "3076": {
        "APIs": [
            "reversed()",
            "join()",
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Slice String from Tuple ranges",
        "Source": "Tutorial Websites"
    },
    "3077": {
        "APIs": [
            "prod()",
            "islice()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sliced Product in List",
        "Source": "Tutorial Websites"
    },
    "3078": {
        "APIs": [
            "float()",
            "option()",
            "find()",
            "eval()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Solve given list containing numbers and arithmetic operators",
        "Source": "Tutorial Websites"
    },
    "3079": {
        "APIs": [
            "sorted()",
            "itertools.chain()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Sort Flatten list of list",
        "Source": "Tutorial Websites"
    },
    "3080": {
        "APIs": [
            "join()",
            "split()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sort Numerical Records in String",
        "Source": "Tutorial Websites"
    },
    "3081": {
        "APIs": [
            "sorted()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sort a Dictionary",
        "Source": "Tutorial Websites"
    },
    "3082": {
        "APIs": [
            "sort()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sort a List according to the Length of the Elements",
        "Source": "Tutorial Websites"
    },
    "3083": {
        "APIs": [
            "sort()",
            "sorted()",
            "methodSorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sort a list according to the second element in sublist",
        "Source": "Tutorial Websites"
    },
    "3084": {
        "APIs": [
            "sort()",
            "float()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sort a list of percentage",
        "Source": "Tutorial Websites"
    },
    "3085": {
        "APIs": [
            "list()",
            "map()",
            "sorted()",
            "sort()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sort all sublists in given list of strings",
        "Source": "Tutorial Websites"
    },
    "3086": {
        "APIs": [
            "isalpha()",
            "isnumeric()",
            "zip_longest()",
            "sorted()",
            "ord()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sort alternate numeric and alphabet list",
        "Source": "Tutorial Websites"
    },
    "3087": {
        "APIs": [
            "defaultdict()",
            "range()",
            "append()",
            "abs()",
            "len()",
            "rearrange()",
            "sort()",
            "printsorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sort an array according to absolute difference",
        "Source": "Tutorial Websites"
    },
    "3088": {
        "APIs": [
            "sorted()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sort dictionary by value list length",
        "Source": "Tutorial Websites"
    },
    "3089": {
        "APIs": [
            "sum()",
            "sorted()",
            "items()",
            "chain()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sort dictionary keys to list",
        "Source": "Tutorial Websites"
    },
    "3090": {
        "APIs": [
            "sorted()",
            "join()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sort each String in String list",
        "Source": "Tutorial Websites"
    },
    "3091": {
        "APIs": [
            "count()",
            "set()",
            "sorted()",
            "Counter.most_common()"
        ],
        "APIClasses": [
            "Counter"
        ],
        "OriginalQuery": "Python | Sort given list by frequency and remove duplicates",
        "Source": "Tutorial Websites"
    },
    "3092": {
        "APIs": [
            "sort()",
            "strptime()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sort given list of dictionaries by date",
        "Source": "Tutorial Websites"
    },
    "3093": {
        "APIs": [
            "sort()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sort given list of strings by part of string",
        "Source": "Tutorial Websites"
    },
    "3094": {
        "APIs": [
            "sort()",
            "index()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sort list according to other list order",
        "Source": "Tutorial Websites"
    },
    "3095": {
        "APIs": [
            "sort()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sort list containing alphanumeric values",
        "Source": "Tutorial Websites"
    },
    "3096": {
        "APIs": [
            "sort()",
            "sorted()",
            "datetime.strptime()"
        ],
        "APIClasses": [
            "datetime"
        ],
        "OriginalQuery": "Python | Sort list of dates given as strings",
        "Source": "Tutorial Websites"
    },
    "3097": {
        "APIs": [
            "sort()",
            "lambdasort()",
            "sorted()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sort list of list by specified index",
        "Source": "Tutorial Websites"
    },
    "3098": {
        "APIs": [
            "sort()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sort list of lists by lexicographic value and then length",
        "Source": "Tutorial Websites"
    },
    "3099": {
        "APIs": [
            "sort()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sort list of lists by the size of sublists",
        "Source": "Tutorial Websites"
    },
    "3100": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sort list of numbers by sum of their digits",
        "Source": "Tutorial Websites"
    },
    "3101": {
        "APIs": [
            "filter()",
            "sorted()",
            "index()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sort list of tuples by specific ordering",
        "Source": "Tutorial Websites"
    },
    "3102": {
        "APIs": [
            "tuple()",
            "sorted()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sort lists in tuple",
        "Source": "Tutorial Websites"
    },
    "3103": {
        "APIs": [
            "OrderedDict()",
            "sorted()",
            "items()",
            "getitem()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sort nested dictionary by key",
        "Source": "Tutorial Websites"
    },
    "3104": {
        "APIs": [
            "dict.items()",
            "sorted()"
        ],
        "APIClasses": [
            "dict"
        ],
        "OriginalQuery": "Python | Sort the items alphabetically from given dictionary",
        "Source": "Tutorial Websites"
    },
    "3105": {
        "APIs": [
            "items()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sort the list alphabetically in a dictionary",
        "Source": "Tutorial Websites"
    },
    "3106": {
        "APIs": [
            "fromkeys()",
            "append()",
            "setdefault()",
            "len()",
            "items()",
            "sortOnOccurence()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sort tuple based on occurrence of first element",
        "Source": "Tutorial Websites"
    },
    "3107": {
        "APIs": [
            "sort()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sort tuple list by Nth element of tuple",
        "Source": "Tutorial Websites"
    },
    "3108": {
        "APIs": [
            "sorted()",
            "sort()",
            "cmp()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sort tuple list on basis of difference of elements",
        "Source": "Tutorial Websites"
    },
    "3109": {
        "APIs": [
            "sorted()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sorting list of lists with similar list elements",
        "Source": "Tutorial Websites"
    },
    "3110": {
        "APIs": [
            "list()",
            "range()",
            "len()",
            "sort()",
            "reverse()",
            "join()",
            "sortbyPattern()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sorting string using order defined by another string",
        "Source": "Tutorial Websites"
    },
    "3111": {
        "APIs": [
            "split()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Spilt a sentence into list of words",
        "Source": "Tutorial Websites"
    },
    "3112": {
        "APIs": [
            "islower()",
            "isupper()",
            "append()",
            "list()",
            "join()",
            "camel_case_split()",
            "zip()",
            "enumerate()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Split CamelCase string to individual strings",
        "Source": "Tutorial Websites"
    },
    "3113": {
        "APIs": [
            "split()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Split Sublist Strings",
        "Source": "Tutorial Websites"
    },
    "3114": {
        "APIs": [
            "split()",
            "rfind()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Split URL from Query Parameters",
        "Source": "Tutorial Websites"
    },
    "3115": {
        "APIs": [
            "list()",
            "map()",
            "isdigit()",
            "int()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Split a list having single integer",
        "Source": "Tutorial Websites"
    },
    "3116": {
        "APIs": [
            "tuple()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Split and Pass list as separate parameter",
        "Source": "Tutorial Websites"
    },
    "3117": {
        "APIs": [
            "len()",
            "re.findall()",
            "findall()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python | Split by repeating substring",
        "Source": "Tutorial Websites"
    },
    "3118": {
        "APIs": [
            "keys()",
            "values()",
            "zip()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Split dictionary keys and values into separate lists",
        "Source": "Tutorial Websites"
    },
    "3119": {
        "APIs": [
            "items()",
            "range()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Split dictionary of lists to list of dictionaries",
        "Source": "Tutorial Websites"
    },
    "3120": {
        "APIs": [
            "split()",
            "extend()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Split flatten String List",
        "Source": "Tutorial Websites"
    },
    "3121": {
        "APIs": [
            "items()",
            "len()",
            "slice()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Split given dictionary in half",
        "Source": "Tutorial Websites"
    },
    "3122": {
        "APIs": [
            "df.to_excel()"
        ],
        "APIClasses": [
            "df"
        ],
        "OriginalQuery": "Python | Split given list and insert in excel file",
        "Source": "Tutorial Websites"
    },
    "3123": {
        "APIs": [
            "itertools.islice()",
            "islice()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Split list in uneven groups",
        "Source": "Tutorial Websites"
    },
    "3124": {
        "APIs": [
            "zip()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Split list into lists by particular value",
        "Source": "Tutorial Websites"
    },
    "3125": {
        "APIs": [
            "defaultdict()",
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Split list of strings into sublists based on length",
        "Source": "Tutorial Websites"
    },
    "3126": {
        "APIs": [
            ".split()",
            ".findall()"
        ],
        "APIClasses": [
            "",
            ""
        ],
        "OriginalQuery": "Python | Split multiple characters from string",
        "Source": "Tutorial Websites"
    },
    "3127": {
        "APIs": [
            "zip()",
            "map()",
            "operator.itemgetter()"
        ],
        "APIClasses": [
            "operator"
        ],
        "OriginalQuery": "Python | Split nested list into two lists",
        "Source": "Tutorial Websites"
    },
    "3128": {
        "APIs": [
            "rsplit()",
            "rpartition()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Split on last occurrence of delimiter",
        "Source": "Tutorial Websites"
    },
    "3129": {
        "APIs": [
            "range()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Split string in groups of n consecutive characters",
        "Source": "Tutorial Websites"
    },
    "3130": {
        "APIs": [
            "list()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Split string into list of characters",
        "Source": "Tutorial Websites"
    },
    "3131": {
        "APIs": [
            "split()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Split string on Kth Occurrence of Character",
        "Source": "Tutorial Websites"
    },
    "3132": {
        "APIs": [
            "strip()",
            "isdigit()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Split strings and digits from string list",
        "Source": "Tutorial Websites"
    },
    "3133": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Split strings in list with same prefix in all elements",
        "Source": "Tutorial Websites"
    },
    "3134": {
        "APIs": [
            "re.compile()",
            "re.match()",
            "re.groups()",
            "re.findall()"
        ],
        "APIClasses": [
            "re",
            "re",
            "re",
            "re"
        ],
        "OriginalQuery": "Python | Splitting Text and Number in string",
        "Source": "Tutorial Websites"
    },
    "3135": {
        "APIs": [
            "index()",
            "itertools.groupby()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Splitting list on empty string",
        "Source": "Tutorial Websites"
    },
    "3136": {
        "APIs": [
            "re.split()",
            "re.findall()"
        ],
        "APIClasses": [
            "re",
            "re"
        ],
        "OriginalQuery": "Python | Splitting operators in String",
        "Source": "Tutorial Websites"
    },
    "3137": {
        "APIs": [
            "index()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Splitting string list by strings",
        "Source": "Tutorial Websites"
    },
    "3138": {
        "APIs": [
            "list()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Splitting string to list of characters",
        "Source": "Tutorial Websites"
    },
    "3139": {
        "APIs": [
            "sum()",
            "pstdev()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Standard deviation of list",
        "Source": "Tutorial Websites"
    },
    "3140": {
        "APIs": [
            "range()",
            "len()",
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | String List to Column Character Matrix",
        "Source": "Tutorial Websites"
    },
    "3141": {
        "APIs": [
            "split()",
            "zip()",
            "chain()",
            "cycle()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | String Split including spaces",
        "Source": "Tutorial Websites"
    },
    "3142": {
        "APIs": [
            "sum()",
            "join()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Strings length summation",
        "Source": "Tutorial Websites"
    },
    "3143": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Strings with similar front and rear character",
        "Source": "Tutorial Websites"
    },
    "3144": {
        "APIs": [
            "islice()",
            "itemgetter()",
            "takewhile()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Subgroups of i\u2019th index size in list",
        "Source": "Tutorial Websites"
    },
    "3145": {
        "APIs": [
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Substitute character with its occurrence",
        "Source": "Tutorial Websites"
    },
    "3146": {
        "APIs": [
            "groupby()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Substring Frequency between Uppercases",
        "Source": "Tutorial Websites"
    },
    "3147": {
        "APIs": [
            "items()",
            "dict()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Substring Key match in dictionary",
        "Source": "Tutorial Websites"
    },
    "3148": {
        "APIs": [
            "replace()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Substring removal in String list",
        "Source": "Tutorial Websites"
    },
    "3149": {
        "APIs": [
            "zip()",
            "numpy()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Subtract two list elements if element in first list is greater",
        "Source": "Tutorial Websites"
    },
    "3150": {
        "APIs": [
            "keys()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Subtraction of dictionaries",
        "Source": "Tutorial Websites"
    },
    "3151": {
        "APIs": [
            "reduce()",
            "Counter()",
            "update()",
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sum list of dictionaries with same key",
        "Source": "Tutorial Websites"
    },
    "3152": {
        "APIs": [
            "str()",
            "sum()",
            "reduce()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sum of number digits in List",
        "Source": "Tutorial Websites"
    },
    "3153": {
        "APIs": [
            "reduce()",
            "map()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sum of squares in list",
        "Source": "Tutorial Websites"
    },
    "3154": {
        "APIs": [
            "zip()",
            "cycle()",
            "list()",
            "starmap()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sum two unequal length lists in cyclic manner",
        "Source": "Tutorial Websites"
    },
    "3155": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Sum values for each key in nested dictionary",
        "Source": "Tutorial Websites"
    },
    "3156": {
        "APIs": [
            "sum()",
            "imap()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Summation of Kth Column of Tuple List",
        "Source": "Tutorial Websites"
    },
    "3157": {
        "APIs": [
            "append()",
            "itertools.groupby()",
            "sum()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Summation of Non-Zero groups",
        "Source": "Tutorial Websites"
    },
    "3158": {
        "APIs": [
            "sum()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Summation of dictionary list values",
        "Source": "Tutorial Websites"
    },
    "3159": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Summation of first N matching condition",
        "Source": "Tutorial Websites"
    },
    "3160": {
        "APIs": [
            "int()",
            "sum()",
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Summation of integers in heterogenous list",
        "Source": "Tutorial Websites"
    },
    "3161": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Summation of list as tuple attribute",
        "Source": "Tutorial Websites"
    },
    "3162": {
        "APIs": [
            "sum()",
            "map()",
            "izip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Summation of tuples in list",
        "Source": "Tutorial Websites"
    },
    "3163": {
        "APIs": [
            "zip()",
            "sum()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Summation of two list of tuples",
        "Source": "Tutorial Websites"
    },
    "3164": {
        "APIs": [
            "translate()",
            "str.translate()",
            "replace()"
        ],
        "APIClasses": [
            "str"
        ],
        "OriginalQuery": "Python | Swap commas and dots in a String",
        "Source": "Tutorial Websites"
    },
    "3165": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Swap tuple elements in list of tuples",
        "Source": "Tutorial Websites"
    },
    "3166": {
        "APIs": [
            "slice()",
            "itertools.chain.from_iterable()"
        ],
        "APIClasses": [
            "itertools.chain"
        ],
        "OriginalQuery": "Python | Swapping sublists over given range",
        "Source": "Tutorial Websites"
    },
    "3167": {
        "APIs": [
            "len()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Tail Sliced List Summation",
        "Source": "Tutorial Websites"
    },
    "3168": {
        "APIs": [
            "bool()",
            "all()",
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Test for False list",
        "Source": "Tutorial Websites"
    },
    "3169": {
        "APIs": [
            "any()",
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Test for nested list",
        "Source": "Tutorial Websites"
    },
    "3170": {
        "APIs": [
            "all()",
            "isspace()",
            "isalpha()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Test if String contains Alphabets and Spaces",
        "Source": "Tutorial Websites"
    },
    "3171": {
        "APIs": [
            "map()",
            "split()",
            "zip()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Test if String is Monotonous",
        "Source": "Tutorial Websites"
    },
    "3172": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Test if all elements are present in list",
        "Source": "Tutorial Websites"
    },
    "3173": {
        "APIs": [
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Test if any list element returns true for condition",
        "Source": "Tutorial Websites"
    },
    "3174": {
        "APIs": [
            "dict()",
            "len()",
            "set()",
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Test if dictionary contains unique keys and values",
        "Source": "Tutorial Websites"
    },
    "3175": {
        "APIs": [
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Test if element is dictionary value",
        "Source": "Tutorial Websites"
    },
    "3176": {
        "APIs": [
            "any()",
            "from_iterable()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Test if key exists in tuple keys dictionary",
        "Source": "Tutorial Websites"
    },
    "3177": {
        "APIs": [
            "re.match()",
            "group()",
            "match()",
            "groupby()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python | Test if number is valid Excel column",
        "Source": "Tutorial Websites"
    },
    "3178": {
        "APIs": [
            "bool()",
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Test if string contains element from list",
        "Source": "Tutorial Websites"
    },
    "3179": {
        "APIs": [
            "all()",
            "issubset()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Test if string is subset of another",
        "Source": "Tutorial Websites"
    },
    "3180": {
        "APIs": [
            "set()",
            "add()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Test if tuple is distinct",
        "Source": "Tutorial Websites"
    },
    "3181": {
        "APIs": [
            "most_common()",
            "Counter()",
            "len()",
            "defaultdict()",
            "values()",
            "max()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Test list element similarity",
        "Source": "Tutorial Websites"
    },
    "3182": {
        "APIs": [
            "range()",
            "len()",
            "append()",
            "tuple()",
            "itertools.combination()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Three element sum in list",
        "Source": "Tutorial Websites"
    },
    "3183": {
        "APIs": [
            "len()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Threshold Size Greater Strings Frequency",
        "Source": "Tutorial Websites"
    },
    "3184": {
        "APIs": [
            "split()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Tokenizing strings in list of strings",
        "Source": "Tutorial Websites"
    },
    "3185": {
        "APIs": [
            "filter()",
            "set()",
            "groupby()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Top N pairs by Kth element from list",
        "Source": "Tutorial Websites"
    },
    "3186": {
        "APIs": [
            "items()",
            "get()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Transcribing dictionary key",
        "Source": "Tutorial Websites"
    },
    "3187": {
        "APIs": [
            "sum()",
            "itertools.chain()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Triple List Summation",
        "Source": "Tutorial Websites"
    },
    "3188": {
        "APIs": [
            "range()",
            "len()",
            "append()",
            "tuple()",
            "itertools.combination()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Triple Product to K",
        "Source": "Tutorial Websites"
    },
    "3189": {
        "APIs": [
            "map()",
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Triple list difference",
        "Source": "Tutorial Websites"
    },
    "3190": {
        "APIs": [
            "len()",
            "range()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Triplet iteration in List",
        "Source": "Tutorial Websites"
    },
    "3191": {
        "APIs": [
            "any()",
            "map()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | True Record",
        "Source": "Tutorial Websites"
    },
    "3192": {
        "APIs": [
            "pop()",
            "len()",
            "range()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Truncate a list",
        "Source": "Tutorial Websites"
    },
    "3193": {
        "APIs": [
            "map()",
            "count()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Tuple Column element frequency",
        "Source": "Tutorial Websites"
    },
    "3194": {
        "APIs": [
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Tuple XOR operation",
        "Source": "Tutorial Websites"
    },
    "3195": {
        "APIs": [
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Tuple key dictionary conversion",
        "Source": "Tutorial Websites"
    },
    "3196": {
        "APIs": [
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Tuple list cross multiplication",
        "Source": "Tutorial Websites"
    },
    "3197": {
        "APIs": [
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Tuple multiplication",
        "Source": "Tutorial Websites"
    },
    "3198": {
        "APIs": [
            "max()",
            "groupby()",
            "itemgetter()",
            "setdefault()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Tuples with maximum key of similar values",
        "Source": "Tutorial Websites"
    },
    "3199": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Type casting whole List and Matrix",
        "Source": "Tutorial Websites"
    },
    "3200": {
        "APIs": [
            "int()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Type conversion in dictionary values",
        "Source": "Tutorial Websites"
    },
    "3201": {
        "APIs": [
            "items()",
            "int()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Type conversion of dictionary items",
        "Source": "Tutorial Websites"
    },
    "3202": {
        "APIs": [
            "append()",
            "set()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Uncommon elements in Lists of List",
        "Source": "Tutorial Websites"
    },
    "3203": {
        "APIs": [
            "filter()",
            "map()",
            "zip_longest()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Uneven Sized Matrix Column product",
        "Source": "Tutorial Websites"
    },
    "3204": {
        "APIs": [
            "set()",
            "union()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Union Operation in two Strings",
        "Source": "Tutorial Websites"
    },
    "3205": {
        "APIs": [
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Union of Value Lists",
        "Source": "Tutorial Websites"
    },
    "3206": {
        "APIs": [
            "Union()",
            "sorted()",
            "set()",
            "union()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Union of two or more Lists",
        "Source": "Tutorial Websites"
    },
    "3207": {
        "APIs": [
            "map()",
            "set()",
            "items()",
            "sorted()",
            "tuple()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Unique dictionary filter in list",
        "Source": "Tutorial Websites"
    },
    "3208": {
        "APIs": [
            "frozenset()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Unique pairs in list",
        "Source": "Tutorial Websites"
    },
    "3209": {
        "APIs": [
            "set()",
            "chain()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Unique values in Matrix",
        "Source": "Tutorial Websites"
    },
    "3210": {
        "APIs": [
            "tuple()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Unpacking dictionary keys into tuple",
        "Source": "Tutorial Websites"
    },
    "3211": {
        "APIs": [
            "reduce()",
            "unpackTuple()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Unpacking tuple of lists",
        "Source": "Tutorial Websites"
    },
    "3212": {
        "APIs": [
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Unzip a list of tuples",
        "Source": "Tutorial Websites"
    },
    "3213": {
        "APIs": [
            "dict()",
            "update()",
            "list()",
            "items()",
            "merge()",
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Update a list of tuples using another list",
        "Source": "Tutorial Websites"
    },
    "3214": {
        "APIs": [
            "tuple()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Update each element in tuple list",
        "Source": "Tutorial Websites"
    },
    "3215": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Updating value list in dictionary",
        "Source": "Tutorial Websites"
    },
    "3216": {
        "APIs": [
            "append()",
            "itertools.groupby()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Valid Ranges Product",
        "Source": "Tutorial Websites"
    },
    "3217": {
        "APIs": [
            "sum()",
            "itemgetter()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Value summation of key in dictionary",
        "Source": "Tutorial Websites"
    },
    "3218": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Values Frequency till Maximum K",
        "Source": "Tutorial Websites"
    },
    "3219": {
        "APIs": [
            "next()",
            "enumerate()",
            "filter()",
            "index()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Values till False element",
        "Source": "Tutorial Websites"
    },
    "3220": {
        "APIs": [
            "itertools.islice()",
            "zip()",
            "accumulate()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Variable list slicing",
        "Source": "Tutorial Websites"
    },
    "3221": {
        "APIs": [
            "sum()",
            "len()",
            "statistics.variance()",
            "variance()"
        ],
        "APIClasses": [
            "statistics"
        ],
        "OriginalQuery": "Python | Variance of List",
        "Source": "Tutorial Websites"
    },
    "3222": {
        "APIs": [
            "range()",
            "len()",
            "append()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Vowel indices in String",
        "Source": "Tutorial Websites"
    },
    "3223": {
        "APIs": [
            "index()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Ways to Spilt the list by some value",
        "Source": "Tutorial Websites"
    },
    "3224": {
        "APIs": [
            "pop()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Ways to change keys in dictionary",
        "Source": "Tutorial Websites"
    },
    "3225": {
        "APIs": [
            "isalpha()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Ways to check if given string contains only letter",
        "Source": "Tutorial Websites"
    },
    "3226": {
        "APIs": [
            "range()",
            "len()",
            "format()",
            "count()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Ways to check string contain all same characters",
        "Source": "Tutorial Websites"
    },
    "3227": {
        "APIs": [
            "format()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Ways to concatenate boolean to string",
        "Source": "Tutorial Websites"
    },
    "3228": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Ways to concatenate tuples",
        "Source": "Tutorial Websites"
    },
    "3229": {
        "APIs": [
            "chr()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Ways to convert list of ASCII value to string",
        "Source": "Tutorial Websites"
    },
    "3230": {
        "APIs": [
            "dumps()",
            "type()",
            "loads()",
            "eval()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Ways to convert string to json object",
        "Source": "Tutorial Websites"
    },
    "3231": {
        "APIs": [
            "re.findall()",
            "re.finditer()",
            "startswith()"
        ],
        "APIClasses": [
            "re",
            "re"
        ],
        "OriginalQuery": "Python | Ways to count number of substring in string",
        "Source": "Tutorial Websites"
    },
    "3232": {
        "APIs": [
            "append()",
            "setdefault()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Ways to create a dictionary of Lists",
        "Source": "Tutorial Websites"
    },
    "3233": {
        "APIs": [
            "len()",
            "range()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Ways to create triplets from given list",
        "Source": "Tutorial Websites"
    },
    "3234": {
        "APIs": [
            "index()",
            "range()",
            "len()",
            "append()",
            "enumerate()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Ways to find indices of value in list",
        "Source": "Tutorial Websites"
    },
    "3235": {
        "APIs": [
            "len()",
            "length_hint()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Ways to find length of list",
        "Source": "Tutorial Websites"
    },
    "3236": {
        "APIs": [
            "start()",
            "finditer()",
            "len()",
            "format()",
            "find()",
            "startswith()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Ways to find nth occurrence of substring in a string",
        "Source": "Tutorial Websites"
    },
    "3237": {
        "APIs": [
            "chain.iterable()",
            "list()",
            "from_iterable()",
            "reduce()",
            "sum()",
            "type()",
            "flatten_list()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python | Ways to flatten a 2D list",
        "Source": "Tutorial Websites"
    },
    "3238": {
        "APIs": [
            "map()",
            "list()",
            "format()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Ways to format elements of given list",
        "Source": "Tutorial Websites"
    },
    "3239": {
        "APIs": [
            "range()",
            "append()",
            "chr()",
            "ord()",
            "map()",
            "list()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Ways to initialize list with alphabets",
        "Source": "Tutorial Websites"
    },
    "3240": {
        "APIs": [
            "items()",
            "dict.keys()",
            "dict.values()",
            "map()"
        ],
        "APIClasses": [
            "dict",
            "dict"
        ],
        "OriginalQuery": "Python | Ways to invert mapping of dictionary",
        "Source": "Tutorial Websites"
    },
    "3241": {
        "APIs": [
            "list()",
            "filter()",
            "chain()",
            "zip_longest()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Ways to iterate tuple list of lists",
        "Source": "Tutorial Websites"
    },
    "3242": {
        "APIs": [
            "zip()",
            "iter()",
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Ways to join pair of elements in list",
        "Source": "Tutorial Websites"
    },
    "3243": {
        "APIs": [
            "extend()",
            "literal_eval()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Ways to merge strings into list",
        "Source": "Tutorial Websites"
    },
    "3244": {
        "APIs": [
            "map()",
            "join()",
            ".format()"
        ],
        "APIClasses": [
            ""
        ],
        "OriginalQuery": "Python | Ways to print list without quotes",
        "Source": "Tutorial Websites"
    },
    "3245": {
        "APIs": [
            "pop()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Ways to remove a key from dictionary",
        "Source": "Tutorial Websites"
    },
    "3246": {
        "APIs": [
            "range()",
            "len()",
            "replace()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Ways to remove n characters from start of given string",
        "Source": "Tutorial Websites"
    },
    "3247": {
        "APIs": [
            "isdigit()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Ways to remove numeric digits from given string",
        "Source": "Tutorial Websites"
    },
    "3248": {
        "APIs": [
            "collections.deque.rotate()",
            "rotate()"
        ],
        "APIClasses": [
            "collections.deque"
        ],
        "OriginalQuery": "Python | Ways to rotate a list",
        "Source": "Tutorial Websites"
    },
    "3249": {
        "APIs": [
            "random.shuffle()",
            "random.sample()"
        ],
        "APIClasses": [
            "random",
            "random"
        ],
        "OriginalQuery": "Python | Ways to shuffle a list",
        "Source": "Tutorial Websites"
    },
    "3250": {
        "APIs": [
            "Zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Ways to sort a zipped list by values",
        "Source": "Tutorial Websites"
    },
    "3251": {
        "APIs": [
            "sorted()",
            "float()",
            "sort()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Ways to sort list of float values",
        "Source": "Tutorial Websites"
    },
    "3252": {
        "APIs": [
            "casefold()",
            "lower()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Ways to sort list of strings in case-insensitive manner",
        "Source": "Tutorial Websites"
    },
    "3253": {
        "APIs": [
            "split()",
            "range()",
            "len()",
            "join()",
            "append()",
            "accumulate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Ways to split a string in different ways",
        "Source": "Tutorial Websites"
    },
    "3254": {
        "APIs": [
            "re.findall()",
            "re.split()"
        ],
        "APIClasses": [
            "re",
            "re"
        ],
        "OriginalQuery": "Python | Ways to split strings on Uppercase characters",
        "Source": "Tutorial Websites"
    },
    "3255": {
        "APIs": [
            "splitlines()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Ways to split strings using newline delimiter",
        "Source": "Tutorial Websites"
    },
    "3256": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Ways to sum list of lists and return sum list",
        "Source": "Tutorial Websites"
    },
    "3257": {
        "APIs": [
            "re.findall()",
            "index()",
            "findall()",
            "re.sub()"
        ],
        "APIClasses": [
            "re",
            "re"
        ],
        "OriginalQuery": "Python | Word location in String",
        "Source": "Tutorial Websites"
    },
    "3258": {
        "APIs": [
            "enchant()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Words extraction from set of characters using dictionary",
        "Source": "Tutorial Websites"
    },
    "3259": {
        "APIs": [
            "split()",
            "len()",
            "findall()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Words lengths in String",
        "Source": "Tutorial Websites"
    },
    "3260": {
        "APIs": [
            "enumerate()",
            "itertools.cycle()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Zip Uneven Tuple",
        "Source": "Tutorial Websites"
    },
    "3261": {
        "APIs": [
            "enumerate()",
            "itertools.cycle()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python | Zip different sized list",
        "Source": "Tutorial Websites"
    },
    "3262": {
        "APIs": [
            "itertools()",
            "deque()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | Zipping two unequal length list in dictionary",
        "Source": "Tutorial Websites"
    },
    "3263": {
        "APIs": [
            "reduce()",
            "pow()",
            "map()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python | i^k Summation in list",
        "Source": "Tutorial Websites"
    },
    "3264": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 3D Matrix to Coordinate List",
        "Source": "Tutorial Websites"
    },
    "3265": {
        "APIs": [
            "map()",
            "iand()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 AND operation between Tuples",
        "Source": "Tutorial Websites"
    },
    "3266": {
        "APIs": [
            "sum()",
            "abs()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Absolute Tuple Summation",
        "Source": "Tutorial Websites"
    },
    "3267": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Access element at Kth index in given String",
        "Source": "Tutorial Websites"
    },
    "3268": {
        "APIs": [
            "sorted()",
            "index()",
            "map()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Actual order index distance",
        "Source": "Tutorial Websites"
    },
    "3269": {
        "APIs": [
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Add Custom Column to Tuple list",
        "Source": "Tutorial Websites"
    },
    "3270": {
        "APIs": [
            "isupper()",
            "islower()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Add K between case shifts",
        "Source": "Tutorial Websites"
    },
    "3271": {
        "APIs": [
            "min()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Add K to Minimum element in Column Tuple List",
        "Source": "Tutorial Websites"
    },
    "3272": {
        "APIs": [
            "split()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Add Phrase in middle of String",
        "Source": "Tutorial Websites"
    },
    "3273": {
        "APIs": [
            "join()",
            "isupper()",
            "regex()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Add Space between Potential Words",
        "Source": "Tutorial Websites"
    },
    "3274": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Add custom dimension in Matrix",
        "Source": "Tutorial Websites"
    },
    "3275": {
        "APIs": [
            "enumerate()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Add custom values key in List of dictionaries",
        "Source": "Tutorial Websites"
    },
    "3276": {
        "APIs": [
            "update()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Add item after given Key in dictionary",
        "Source": "Tutorial Websites"
    },
    "3277": {
        "APIs": [
            "tuple()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Add list elements to tuples list",
        "Source": "Tutorial Websites"
    },
    "3278": {
        "APIs": [
            "sub()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Add space between Numbers and Alphabets in String",
        "Source": "Tutorial Websites"
    },
    "3279": {
        "APIs": [
            "list.extend()",
            "tuple()"
        ],
        "APIClasses": [
            "list"
        ],
        "OriginalQuery": "Python \u2013 Adding Tuple to List and vice \u2013 versa",
        "Source": "Tutorial Websites"
    },
    "3280": {
        "APIs": [
            "range()",
            "adjac()",
            "list()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Adjacent Coordinates in N dimension",
        "Source": "Tutorial Websites"
    },
    "3281": {
        "APIs": [
            "zip()",
            "join()",
            "product()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 All Position Character Combination",
        "Source": "Tutorial Websites"
    },
    "3282": {
        "APIs": [
            "product()",
            "setdefault()",
            "combinations_with_replacement()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 All Possible unique K size combinations till N",
        "Source": "Tutorial Websites"
    },
    "3283": {
        "APIs": [
            "product()",
            "permutations()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 All combination Dictionary List",
        "Source": "Tutorial Websites"
    },
    "3284": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 All occurrences of Substring from the list of strings",
        "Source": "Tutorial Websites"
    },
    "3285": {
        "APIs": [
            "chain()",
            "product()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 All pair combinations of 2 tuples",
        "Source": "Tutorial Websites"
    },
    "3286": {
        "APIs": [
            "permutations()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 All possible concatenations in String List",
        "Source": "Tutorial Websites"
    },
    "3287": {
        "APIs": [
            "set()",
            "remove()",
            "update()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 All possible items combination dictionary",
        "Source": "Tutorial Websites"
    },
    "3288": {
        "APIs": [
            "enumerate()",
            "combinations()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 All possible pairs in List",
        "Source": "Tutorial Websites"
    },
    "3289": {
        "APIs": [
            "join()",
            "enumerate()",
            "combinations()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 All possible space joins in String",
        "Source": "Tutorial Websites"
    },
    "3290": {
        "APIs": [
            "combinations()",
            "len()",
            "extend()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 All replacement combination from other list",
        "Source": "Tutorial Websites"
    },
    "3291": {
        "APIs": [
            "get()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Alternate Default Key Value",
        "Source": "Tutorial Websites"
    },
    "3292": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Alternate Elements operation on Tuple",
        "Source": "Tutorial Websites"
    },
    "3293": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Alternate List elements",
        "Source": "Tutorial Websites"
    },
    "3294": {
        "APIs": [
            "min()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Alternate Minimum element in list",
        "Source": "Tutorial Websites"
    },
    "3295": {
        "APIs": [
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Alternate Strings Concatenation",
        "Source": "Tutorial Websites"
    },
    "3296": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Alternate elements Similarity",
        "Source": "Tutorial Websites"
    },
    "3297": {
        "APIs": [
            "list()",
            "keys()",
            "values()",
            "chain()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Append Dictionary Keys and Values ( In order ) in dictionary",
        "Source": "Tutorial Websites"
    },
    "3298": {
        "APIs": [
            "extend()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Append List every Nth index",
        "Source": "Tutorial Websites"
    },
    "3299": {
        "APIs": [
            "set()",
            "extend()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Append Missing elements from other List",
        "Source": "Tutorial Websites"
    },
    "3300": {
        "APIs": [
            "isinstance()",
            "update()",
            "extend()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Append Multitype Values in Dictionary",
        "Source": "Tutorial Websites"
    },
    "3301": {
        "APIs": [
            "dict()",
            "append()",
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Append Similar Values as Key",
        "Source": "Tutorial Websites"
    },
    "3302": {
        "APIs": [
            "update()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Append items at beginning of dictionary",
        "Source": "Tutorial Websites"
    },
    "3303": {
        "APIs": [
            "ascii_lowecase()",
            "lowercase()",
            "defaultdict()",
            "ascii_lowercase()",
            "iter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Assign Alphabet to each element",
        "Source": "Tutorial Websites"
    },
    "3304": {
        "APIs": [
            "Counter()",
            "items()",
            "most_common()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Assign Frequency to Tuples",
        "Source": "Tutorial Websites"
    },
    "3305": {
        "APIs": [
            "max()",
            "min()",
            "tuple()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Assign K to Non Max-Min elements in Tuple",
        "Source": "Tutorial Websites"
    },
    "3306": {
        "APIs": [
            "values()",
            "reversed()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Assign Reversed Values in Dictionary",
        "Source": "Tutorial Websites"
    },
    "3307": {
        "APIs": [
            "max()",
            "index()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Assign keys with Maximum element index",
        "Source": "Tutorial Websites"
    },
    "3308": {
        "APIs": [
            "zip()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Assign list items to Dictionary",
        "Source": "Tutorial Websites"
    },
    "3309": {
        "APIs": [
            "setdefault()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Assign pair elements from Tuple Lists",
        "Source": "Tutorial Websites"
    },
    "3310": {
        "APIs": [
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Assign values to Values List",
        "Source": "Tutorial Websites"
    },
    "3311": {
        "APIs": [
            "dict()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Assign values to initialized dictionary keys",
        "Source": "Tutorial Websites"
    },
    "3312": {
        "APIs": [
            "zip()",
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Assigning Subsequent Rows to Matrix first row elements",
        "Source": "Tutorial Websites"
    },
    "3313": {
        "APIs": [
            "defaultdict()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Associated Values Frequencies in Dictionary",
        "Source": "Tutorial Websites"
    },
    "3314": {
        "APIs": [
            "len()",
            "str()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Average digits count in a List",
        "Source": "Tutorial Websites"
    },
    "3315": {
        "APIs": [
            "sum()",
            "len()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Average of digit greater than K",
        "Source": "Tutorial Websites"
    },
    "3316": {
        "APIs": [
            "map()",
            "join()",
            "str()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Avoid Last occurrence of delimitter",
        "Source": "Tutorial Websites"
    },
    "3317": {
        "APIs": [
            "isspace()",
            "sum()",
            "space()",
            "len()",
            "map()",
            "split()",
            "length()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Avoid Spaces in string length",
        "Source": "Tutorial Websites"
    },
    "3318": {
        "APIs": [
            "Counter()",
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Bigrams Frequency in String",
        "Source": "Tutorial Websites"
    },
    "3319": {
        "APIs": [
            "enumerate()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Binary operation on specific keys in Dictionary List",
        "Source": "Tutorial Websites"
    },
    "3320": {
        "APIs": [
            "reduce()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Bitwise AND of List",
        "Source": "Tutorial Websites"
    },
    "3321": {
        "APIs": [
            "join()",
            "chain.from_iterable()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python \u2013 Breaking Up String Variables",
        "Source": "Tutorial Websites"
    },
    "3322": {
        "APIs": [
            "len()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Calculate the percentage of positive elements of the list",
        "Source": "Tutorial Websites"
    },
    "3323": {
        "APIs": [
            "next()",
            "sorted()",
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Case Insensitive Strings Grouping",
        "Source": "Tutorial Websites"
    },
    "3324": {
        "APIs": [
            "defaultdict()",
            "lower()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Case Insensitive string counter",
        "Source": "Tutorial Websites"
    },
    "3325": {
        "APIs": [
            "re.escape()",
            "re.sub()",
            "sub()",
            "escape()"
        ],
        "APIClasses": [
            "re",
            "re"
        ],
        "OriginalQuery": "Python \u2013 Case insensitive string replacement",
        "Source": "Tutorial Websites"
    },
    "3326": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Change Datatype of Tuple Values",
        "Source": "Tutorial Websites"
    },
    "3327": {
        "APIs": [
            "isinstance()",
            "toupper()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Change Keys Case in Dictionary",
        "Source": "Tutorial Websites"
    },
    "3328": {
        "APIs": [
            "abs()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Change the signs of elements of tuples in a list",
        "Source": "Tutorial Websites"
    },
    "3329": {
        "APIs": [
            "int()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Change type of key in Dictionary list",
        "Source": "Tutorial Websites"
    },
    "3330": {
        "APIs": [
            "zip()",
            "replace()",
            "product()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Character Replacement Combination",
        "Source": "Tutorial Websites"
    },
    "3331": {
        "APIs": [
            "enumerate()",
            "isalpha()",
            "regex()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Character coordinates in Matrix",
        "Source": "Tutorial Websites"
    },
    "3332": {
        "APIs": [
            "defaultdict()",
            "enumerate()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Character indices Mapping in String List",
        "Source": "Tutorial Websites"
    },
    "3333": {
        "APIs": [
            "join()",
            "product()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Character repetition string combinations",
        "Source": "Tutorial Websites"
    },
    "3334": {
        "APIs": [
            "set()",
            "replace()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Characters Index occurrences in String",
        "Source": "Tutorial Websites"
    },
    "3335": {
        "APIs": [
            "Counter()",
            "set()",
            "from_iterable()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Characters occurring in multiple Strings",
        "Source": "Tutorial Websites"
    },
    "3336": {
        "APIs": [
            "set()",
            "Counter()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Characters which Occur in More than K Strings",
        "Source": "Tutorial Websites"
    },
    "3337": {
        "APIs": [
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Check List elements from Dictionary List",
        "Source": "Tutorial Websites"
    },
    "3338": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Check Similar elements in Matrix rows",
        "Source": "Tutorial Websites"
    },
    "3339": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Check alternate peak elements in List",
        "Source": "Tutorial Websites"
    },
    "3340": {
        "APIs": [
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Check for Key in Dictionary Value list",
        "Source": "Tutorial Websites"
    },
    "3341": {
        "APIs": [
            "any()",
            "set.issubset()",
            "itertools.chain()"
        ],
        "APIClasses": [
            "set",
            "itertools"
        ],
        "OriginalQuery": "Python \u2013 Check for None value in Matrix",
        "Source": "Tutorial Websites"
    },
    "3342": {
        "APIs": [
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Check for Sublist in List",
        "Source": "Tutorial Websites"
    },
    "3343": {
        "APIs": [
            "isdigit()",
            "isalpha()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Check if Elements delimited by K",
        "Source": "Tutorial Websites"
    },
    "3344": {
        "APIs": [
            "Counter()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Check if Kth index elements are unique",
        "Source": "Tutorial Websites"
    },
    "3345": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Check if List is K increasing",
        "Source": "Tutorial Websites"
    },
    "3346": {
        "APIs": [
            "set()",
            "len()",
            "split()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Check if Splits are equal",
        "Source": "Tutorial Websites"
    },
    "3347": {
        "APIs": [
            "all()",
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Check if Tuple contains only K elements",
        "Source": "Tutorial Websites"
    },
    "3348": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Check if all tuples have element difference less than K",
        "Source": "Tutorial Websites"
    },
    "3349": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Check if all values are K in dictionary",
        "Source": "Tutorial Websites"
    },
    "3350": {
        "APIs": [
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Check if any list element is present in Tuple",
        "Source": "Tutorial Websites"
    },
    "3351": {
        "APIs": [
            "zip()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Check if elements index are equal for list elements",
        "Source": "Tutorial Websites"
    },
    "3352": {
        "APIs": [
            "str()",
            "join()",
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Check if list contain particular digits",
        "Source": "Tutorial Websites"
    },
    "3353": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Check if particular value is present corresponding to K key",
        "Source": "Tutorial Websites"
    },
    "3354": {
        "APIs": [
            "range()",
            "len()",
            "append()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Check if previous element is smaller in List",
        "Source": "Tutorial Websites"
    },
    "3355": {
        "APIs": [
            "any()",
            "isdigit()",
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Check if string contains any number",
        "Source": "Tutorial Websites"
    },
    "3356": {
        "APIs": [
            "filter()",
            "startswith()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Check if string starts with any element in list",
        "Source": "Tutorial Websites"
    },
    "3357": {
        "APIs": [
            "all()",
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Check if tuple list has all K",
        "Source": "Tutorial Websites"
    },
    "3358": {
        "APIs": [
            "range()",
            "len()",
            "any()",
            "join()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Check if two strings are Rotationally Equivalent",
        "Source": "Tutorial Websites"
    },
    "3359": {
        "APIs": [
            "search()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Check whether a string starts and ends with the same character or not (using Regular Expression)",
        "Source": "Tutorial Websites"
    },
    "3360": {
        "APIs": [
            "min()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Check whether the extracted element from each row of matrix can be in ascending order",
        "Source": "Tutorial Websites"
    },
    "3361": {
        "APIs": [
            "extend()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Chunked interleave of Lists",
        "Source": "Tutorial Websites"
    },
    "3362": {
        "APIs": [
            "list()",
            "clear()",
            "tuple()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Clearing a tuple",
        "Source": "Tutorial Websites"
    },
    "3363": {
        "APIs": [
            "enumerate()",
            "abs()",
            "min()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Closest Pair to Kth index element in Tuple",
        "Source": "Tutorial Websites"
    },
    "3364": {
        "APIs": [
            "max()",
            "combinations()",
            "min()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Closest Sum Pair in List",
        "Source": "Tutorial Websites"
    },
    "3365": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Column Mapped Tuples to dictionary items",
        "Source": "Tutorial Websites"
    },
    "3366": {
        "APIs": [
            "sorted()",
            "items()",
            "max()",
            "map()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Column Maximum in Dictionary Value Matrix",
        "Source": "Tutorial Websites"
    },
    "3367": {
        "APIs": [
            "min()",
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Column Minimum in Tuple list",
        "Source": "Tutorial Websites"
    },
    "3368": {
        "APIs": [
            "zip()",
            "chain.from_iterable()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python \u2013 Column-wise elements in Dictionary value list",
        "Source": "Tutorial Websites"
    },
    "3369": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Columns to Dictionary Conversion in Matrix",
        "Source": "Tutorial Websites"
    },
    "3370": {
        "APIs": [
            "combinations()",
            "zip()",
            "add()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Combinations of sum with tuples in tuple list",
        "Source": "Tutorial Websites"
    },
    "3371": {
        "APIs": [
            "split()",
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Combine Strings to Matrix",
        "Source": "Tutorial Websites"
    },
    "3372": {
        "APIs": [
            "copy()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Combine dictionary with priority",
        "Source": "Tutorial Websites"
    },
    "3373": {
        "APIs": [
            "zip()",
            "len()",
            "list()",
            "product()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Combine list with other list elements",
        "Source": "Tutorial Websites"
    },
    "3374": {
        "APIs": [
            "keys()",
            "zip()",
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Combine two dictionaries having key of the first dictionary and value of the second dictionary",
        "Source": "Tutorial Websites"
    },
    "3375": {
        "APIs": [
            "dict()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Common items Dictionary Value List",
        "Source": "Tutorial Websites"
    },
    "3376": {
        "APIs": [
            "set()",
            "intersection()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Common keys in list and dictionary",
        "Source": "Tutorial Websites"
    },
    "3377": {
        "APIs": [
            "values()",
            "set()",
            "intersection()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Common list elements and dictionary values",
        "Source": "Tutorial Websites"
    },
    "3378": {
        "APIs": [
            "get()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Compare Dictionaries on certain Keys",
        "Source": "Tutorial Websites"
    },
    "3379": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Compare Unordered Dictionary List",
        "Source": "Tutorial Websites"
    },
    "3380": {
        "APIs": [
            "keys()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Concatenate Dictionary string values",
        "Source": "Tutorial Websites"
    },
    "3381": {
        "APIs": [
            "defaultdict()",
            "str()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Concatenate Dynamic Frequency",
        "Source": "Tutorial Websites"
    },
    "3382": {
        "APIs": [
            "join()",
            "map()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Concatenate Kth element in Tuple List",
        "Source": "Tutorial Websites"
    },
    "3383": {
        "APIs": [
            "max()",
            "itemgetter()",
            "join()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Concatenate Maximum Tuples",
        "Source": "Tutorial Websites"
    },
    "3384": {
        "APIs": [
            "random.choice()",
            "choice()",
            "join()"
        ],
        "APIClasses": [
            "random"
        ],
        "OriginalQuery": "Python \u2013 Concatenate Random characters in String List",
        "Source": "Tutorial Websites"
    },
    "3385": {
        "APIs": [
            "join()",
            "map()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Concatenate Rear elements in Tuple List",
        "Source": "Tutorial Websites"
    },
    "3386": {
        "APIs": [
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Concatenate String values in Dictionary List",
        "Source": "Tutorial Websites"
    },
    "3387": {
        "APIs": [
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Concatenate Strings in the Given Order",
        "Source": "Tutorial Websites"
    },
    "3388": {
        "APIs": [
            "join()",
            "map()",
            "str()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Concatenate Tuple elements by delimiter",
        "Source": "Tutorial Websites"
    },
    "3389": {
        "APIs": [
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Concatenate Tuple to Dictionary Key",
        "Source": "Tutorial Websites"
    },
    "3390": {
        "APIs": [
            "defaultdict()",
            "join()",
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Concatenate all keys which have similar values",
        "Source": "Tutorial Websites"
    },
    "3391": {
        "APIs": [
            "zip()",
            "tuple()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Concatenate consecutive elements in Tuple",
        "Source": "Tutorial Websites"
    },
    "3392": {
        "APIs": [
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Concatenate string rows in Matrix",
        "Source": "Tutorial Websites"
    },
    "3393": {
        "APIs": [
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Concatenate values with same keys in a list of dictionaries",
        "Source": "Tutorial Websites"
    },
    "3394": {
        "APIs": [
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Concatenation of two String Tuples",
        "Source": "Tutorial Websites"
    },
    "3395": {
        "APIs": [
            "next()",
            "update()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Conditional Join Dictionary List",
        "Source": "Tutorial Websites"
    },
    "3396": {
        "APIs": [
            "len()",
            "append_str()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Conditional String Append",
        "Source": "Tutorial Websites"
    },
    "3397": {
        "APIs": [
            "zip()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Consecutive Alphabetic Occurrence",
        "Source": "Tutorial Websites"
    },
    "3398": {
        "APIs": [
            "join()",
            "range()",
            "len()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Consecutive K elements join in List",
        "Source": "Tutorial Websites"
    },
    "3399": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Consecutive Kth column Difference in Tuple List",
        "Source": "Tutorial Websites"
    },
    "3400": {
        "APIs": [
            "sum()",
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Consecutive Missing elements Sum",
        "Source": "Tutorial Websites"
    },
    "3401": {
        "APIs": [
            "zip()",
            "replace()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Consecutive Pairs comma removal",
        "Source": "Tutorial Websites"
    },
    "3402": {
        "APIs": [
            "enumerate()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Consecutive Ranges of K greater than N",
        "Source": "Tutorial Websites"
    },
    "3403": {
        "APIs": [
            "chain()",
            "repeat()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Consecutive Repetition of Characters",
        "Source": "Tutorial Websites"
    },
    "3404": {
        "APIs": [
            "sum()",
            "abs()",
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Consecutive Row summation in Matrix",
        "Source": "Tutorial Websites"
    },
    "3405": {
        "APIs": [
            "range()",
            "len()",
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Consecutive Triple element pairing",
        "Source": "Tutorial Websites"
    },
    "3406": {
        "APIs": [
            "tuple()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Consecutive Tuple difference",
        "Source": "Tutorial Websites"
    },
    "3407": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Consecutive element deletion strings",
        "Source": "Tutorial Websites"
    },
    "3408": {
        "APIs": [
            "groupby()",
            "max()",
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Consecutive elements maximum frequencies",
        "Source": "Tutorial Websites"
    },
    "3409": {
        "APIs": [
            "set()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Consecutive identical elements count",
        "Source": "Tutorial Websites"
    },
    "3410": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Constant Multiplication over List",
        "Source": "Tutorial Websites"
    },
    "3411": {
        "APIs": [
            "range()",
            "len()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Constant Multiplication to Nth Column",
        "Source": "Tutorial Websites"
    },
    "3412": {
        "APIs": [
            "ord()",
            "join()",
            "map()",
            "product()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Construct Grades List",
        "Source": "Tutorial Websites"
    },
    "3413": {
        "APIs": [
            "sum()",
            "combinations()",
            "combination()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Construct Sum pairs equal to K",
        "Source": "Tutorial Websites"
    },
    "3414": {
        "APIs": [
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Construct dictionary Key-Value pairs separated by delimiter",
        "Source": "Tutorial Websites"
    },
    "3415": {
        "APIs": [
            "dict()",
            "zip()",
            "global()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Construct variables of list elements",
        "Source": "Tutorial Websites"
    },
    "3416": {
        "APIs": [
            "append()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert 2D list to 3D at K slicing",
        "Source": "Tutorial Websites"
    },
    "3417": {
        "APIs": [
            "range()",
            "len()",
            "int()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Alternate String Character to Integer",
        "Source": "Tutorial Websites"
    },
    "3418": {
        "APIs": [
            "join()",
            "int()",
            "str()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Binary tuple to Integer",
        "Source": "Tutorial Websites"
    },
    "3419": {
        "APIs": [
            "max()",
            "keys()",
            "range()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Coordinate Dictionary to Matrix",
        "Source": "Tutorial Websites"
    },
    "3420": {
        "APIs": [
            "split()",
            "int()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Delimiter separated list to Number",
        "Source": "Tutorial Websites"
    },
    "3421": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Dictionaries List to Order Key Nested dictionaries",
        "Source": "Tutorial Websites"
    },
    "3422": {
        "APIs": [
            "range()",
            "len()",
            "items()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Dictionary Value list to Dictionary List",
        "Source": "Tutorial Websites"
    },
    "3423": {
        "APIs": [
            "join()",
            "items()",
            "reduce()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Dictionary to Concatenated String",
        "Source": "Tutorial Websites"
    },
    "3424": {
        "APIs": [
            "abs()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Dictionary values to Absolute Magnitude",
        "Source": "Tutorial Websites"
    },
    "3425": {
        "APIs": [
            "dict()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Flat dictionaries to Nested dictionary",
        "Source": "Tutorial Websites"
    },
    "3426": {
        "APIs": [
            "float()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Float String List to Float Values",
        "Source": "Tutorial Websites"
    },
    "3427": {
        "APIs": [
            "isdigit()",
            "map()",
            "findall()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Float to digit list",
        "Source": "Tutorial Websites"
    },
    "3428": {
        "APIs": [
            "range()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Frequency dictionary to list",
        "Source": "Tutorial Websites"
    },
    "3429": {
        "APIs": [
            "html.escape()",
            "HTMLParser.unescape()"
        ],
        "APIClasses": [
            "html",
            "HTMLParser"
        ],
        "OriginalQuery": "Python \u2013 Convert HTML Characters To Strings",
        "Source": "Tutorial Websites"
    },
    "3430": {
        "APIs": [
            "keys()",
            "get()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Index Dictionary to List",
        "Source": "Tutorial Websites"
    },
    "3431": {
        "APIs": [
            "str()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Integer Matrix to String Matrix",
        "Source": "Tutorial Websites"
    },
    "3432": {
        "APIs": [
            "items()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Key-Value list Dictionary to List of Lists",
        "Source": "Tutorial Websites"
    },
    "3433": {
        "APIs": [
            "enumerate()",
            "keys()",
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert List of Dictionaries to List of Lists",
        "Source": "Tutorial Websites"
    },
    "3434": {
        "APIs": [
            "tuple()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert List of Lists to Tuple of Tuples",
        "Source": "Tutorial Websites"
    },
    "3435": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert List of lists to list of Sets",
        "Source": "Tutorial Websites"
    },
    "3436": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert List to Index and Value dictionary",
        "Source": "Tutorial Websites"
    },
    "3437": {
        "APIs": [
            "tuple()",
            "map()",
            "list()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert List to Single valued Lists in Tuple",
        "Source": "Tutorial Websites"
    },
    "3438": {
        "APIs": [
            "range()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert List to custom overlapping nested list",
        "Source": "Tutorial Websites"
    },
    "3439": {
        "APIs": [
            "str()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert List to delimiter separated String",
        "Source": "Tutorial Websites"
    },
    "3440": {
        "APIs": [
            "groupby()",
            "startswith()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert List to key-value list by prefix grouping",
        "Source": "Tutorial Websites"
    },
    "3441": {
        "APIs": [
            "zip()",
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Lists into Similar key value lists",
        "Source": "Tutorial Websites"
    },
    "3442": {
        "APIs": [
            "dict()",
            "tuple()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Lists of List to Dictionary",
        "Source": "Tutorial Websites"
    },
    "3443": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Lists to Nested Dictionary",
        "Source": "Tutorial Websites"
    },
    "3444": {
        "APIs": [
            "enumerate()",
            "setdefault()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Matrix to Coordinate Dictionary",
        "Source": "Tutorial Websites"
    },
    "3445": {
        "APIs": [
            "zip()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Matrix to Custom Tuple Matrix",
        "Source": "Tutorial Websites"
    },
    "3446": {
        "APIs": [
            "range()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Matrix to dictionary",
        "Source": "Tutorial Websites"
    },
    "3447": {
        "APIs": [
            "append()",
            "range()",
            "len()",
            "tuple()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Matrix to overlapping Tuple Pairs",
        "Source": "Tutorial Websites"
    },
    "3448": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Nested Tuple to Custom Key Dictionary",
        "Source": "Tutorial Websites"
    },
    "3449": {
        "APIs": [
            "values()",
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Nested dictionary to Mapped Tuple",
        "Source": "Tutorial Websites"
    },
    "3450": {
        "APIs": [
            "dict()",
            "zip()",
            "chain()",
            "cycle()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Records List to Segregated Dictionary",
        "Source": "Tutorial Websites"
    },
    "3451": {
        "APIs": [
            "split()",
            "join()",
            "title()",
            "\u00a0split()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Snake Case String to Camel Case",
        "Source": "Tutorial Websites"
    },
    "3452": {
        "APIs": [
            "title()",
            "replace()",
            "capwords()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Snake case to Pascal case",
        "Source": "Tutorial Websites"
    },
    "3453": {
        "APIs": [
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert String List to Key-Value List dictionary",
        "Source": "Tutorial Websites"
    },
    "3454": {
        "APIs": [
            "eval()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert String Records to Tuples Lists",
        "Source": "Tutorial Websites"
    },
    "3455": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert String Truth values to Boolean",
        "Source": "Tutorial Websites"
    },
    "3456": {
        "APIs": [
            "json.loads()",
            "replace()",
            "loads()",
            "eval()"
        ],
        "APIClasses": [
            "json"
        ],
        "OriginalQuery": "Python \u2013 Convert String to List of dictionaries",
        "Source": "Tutorial Websites"
    },
    "3457": {
        "APIs": [
            "split()",
            "helper_fnc()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert String to Nested Dictionaries",
        "Source": "Tutorial Websites"
    },
    "3458": {
        "APIs": [
            "list()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert String to matrix having K characters per row",
        "Source": "Tutorial Websites"
    },
    "3459": {
        "APIs": [
            "re.sub()",
            "ord()",
            "join()",
            "format()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python \u2013 Convert String to unicode characters",
        "Source": "Tutorial Websites"
    },
    "3460": {
        "APIs": [
            "list()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Strings to Character Matrix",
        "Source": "Tutorial Websites"
    },
    "3461": {
        "APIs": [
            "upper()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Strings to Uppercase in Dictionary value lists",
        "Source": "Tutorial Websites"
    },
    "3462": {
        "APIs": [
            "float()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Suffix denomination to Values",
        "Source": "Tutorial Websites"
    },
    "3463": {
        "APIs": [
            "zip()",
            "chain.from_iterable()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python \u2013 Convert Tuple Matrix to Tuple List",
        "Source": "Tutorial Websites"
    },
    "3464": {
        "APIs": [
            "tuple()",
            "int()",
            "replace()",
            "split()",
            "eval()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Tuple String to Integer Tuple",
        "Source": "Tutorial Websites"
    },
    "3465": {
        "APIs": [
            "product()",
            "next()",
            "nex()",
            "repeat()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Tuple to Tuple Pair",
        "Source": "Tutorial Websites"
    },
    "3466": {
        "APIs": [
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Tuple value list to List of tuples",
        "Source": "Tutorial Websites"
    },
    "3467": {
        "APIs": [
            "enumerate()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Uneven Lists into Records",
        "Source": "Tutorial Websites"
    },
    "3468": {
        "APIs": [
            "enumerate()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Value list elements to List records",
        "Source": "Tutorial Websites"
    },
    "3469": {
        "APIs": [
            "sum()",
            "values()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert Values into proportions",
        "Source": "Tutorial Websites"
    },
    "3470": {
        "APIs": [
            "eval()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert delimiter separated Mixed String to valid List",
        "Source": "Tutorial Websites"
    },
    "3471": {
        "APIs": [
            "items()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert dictionary items to values",
        "Source": "Tutorial Websites"
    },
    "3472": {
        "APIs": [
            "map()",
            "split()",
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert key-value String to dictionary",
        "Source": "Tutorial Websites"
    },
    "3473": {
        "APIs": [
            "zip()",
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert key-values list to flat dictionary",
        "Source": "Tutorial Websites"
    },
    "3474": {
        "APIs": [
            "range()",
            "len()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert list to Single Dictionary Key Value list",
        "Source": "Tutorial Websites"
    },
    "3475": {
        "APIs": [
            "dict()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Convert tuple list to dictionary with key from a given start value",
        "Source": "Tutorial Websites"
    },
    "3476": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Cost computation using Frequency and Price dictionary",
        "Source": "Tutorial Websites"
    },
    "3477": {
        "APIs": [
            "sum()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Count % K elements",
        "Source": "Tutorial Websites"
    },
    "3478": {
        "APIs": [
            "groupby()",
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Count Maximum consecution of K in N consecutive batches",
        "Source": "Tutorial Websites"
    },
    "3479": {
        "APIs": [
            "len()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Count Strings with substring String List",
        "Source": "Tutorial Websites"
    },
    "3480": {
        "APIs": [
            "len()",
            "map()",
            "chain.from_iterable()",
            "from_iterable()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python \u2013 Count elements in record tuple",
        "Source": "Tutorial Websites"
    },
    "3481": {
        "APIs": [
            "len()",
            "map()",
            "chain.from_iterable()",
            "from_iterable()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python \u2013 Count elements in tuple list",
        "Source": "Tutorial Websites"
    },
    "3482": {
        "APIs": [
            "len()",
            "zip_longest()",
            "islice()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Count frequency of Sublist in given list",
        "Source": "Tutorial Websites"
    },
    "3483": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Count if dictionary position equals key or value",
        "Source": "Tutorial Websites"
    },
    "3484": {
        "APIs": [
            "len()",
            "split()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Count of Words with specific letter",
        "Source": "Tutorial Websites"
    },
    "3485": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Count of matching elements among lists (Including duplicates)",
        "Source": "Tutorial Websites"
    },
    "3486": {
        "APIs": [
            "Counter()",
            "map()",
            "sorted()",
            "items()",
            "sum()",
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Count similar pair in Dual List",
        "Source": "Tutorial Websites"
    },
    "3487": {
        "APIs": [
            "Counter()",
            "map()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Count the frequency of matrix row length",
        "Source": "Tutorial Websites"
    },
    "3488": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Create Nested Dictionary using given List",
        "Source": "Tutorial Websites"
    },
    "3489": {
        "APIs": [
            "lower()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Create a Dictionary with Key as First Character and Value as Words Starting with that Character",
        "Source": "Tutorial Websites"
    },
    "3490": {
        "APIs": [
            "zip()",
            "dict()",
            "len()",
            "fromkeys()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Create a dictionary using list with none values",
        "Source": "Tutorial Websites"
    },
    "3491": {
        "APIs": [
            "zip_longest()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Cross Join every Kth segment",
        "Source": "Tutorial Websites"
    },
    "3492": {
        "APIs": [
            "dict()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Cross List Sync on duplicate elements removal",
        "Source": "Tutorial Websites"
    },
    "3493": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Cross Pairing in Tuple List",
        "Source": "Tutorial Websites"
    },
    "3494": {
        "APIs": [
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Cross list exponentiation",
        "Source": "Tutorial Websites"
    },
    "3495": {
        "APIs": [
            "setdefault()",
            "extend()",
            "get()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Cross mapping of Two dictionary value lists",
        "Source": "Tutorial Websites"
    },
    "3496": {
        "APIs": [
            "dict()",
            "get()",
            "items()",
            "groupby()",
            "sum()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Cross tuple summation grouping",
        "Source": "Tutorial Websites"
    },
    "3497": {
        "APIs": [
            "reduce()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Cubes Product in list",
        "Source": "Tutorial Websites"
    },
    "3498": {
        "APIs": [
            "Counter()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Cummulative Row Frequencies in List",
        "Source": "Tutorial Websites"
    },
    "3499": {
        "APIs": [
            "range()",
            "len()",
            "append()",
            "accumulate()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Cumulative List Split",
        "Source": "Tutorial Websites"
    },
    "3500": {
        "APIs": [
            "mean()",
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Cumulative Mean of Dictionary keys",
        "Source": "Tutorial Websites"
    },
    "3501": {
        "APIs": [
            "prod()",
            "int()",
            "map()",
            "chain.from_iterable()",
            "from_iterable()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python \u2013 Cumulative Records Product",
        "Source": "Tutorial Websites"
    },
    "3502": {
        "APIs": [
            "sum()",
            "prod()",
            "values()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Cumulative product of dictionary value lists",
        "Source": "Tutorial Websites"
    },
    "3503": {
        "APIs": [
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Custom Columns Matrix",
        "Source": "Tutorial Websites"
    },
    "3504": {
        "APIs": [
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Custom Consecutive character repetition in String",
        "Source": "Tutorial Websites"
    },
    "3505": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Custom Lower bound a List",
        "Source": "Tutorial Websites"
    },
    "3506": {
        "APIs": [
            "sort()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Custom Pool Sorting",
        "Source": "Tutorial Websites"
    },
    "3507": {
        "APIs": [
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Custom Rows Removal depending on Kth Column",
        "Source": "Tutorial Websites"
    },
    "3508": {
        "APIs": [
            "replace()",
            "re.findall()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python \u2013 Custom Split Comma Separated Words",
        "Source": "Tutorial Websites"
    },
    "3509": {
        "APIs": [
            "sum()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Custom Tuple Key Summation in Dictionary",
        "Source": "Tutorial Websites"
    },
    "3510": {
        "APIs": [
            "extend()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Custom element repetition",
        "Source": "Tutorial Websites"
    },
    "3511": {
        "APIs": [
            "int()",
            "tuple()",
            "split()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Custom length tuples from String",
        "Source": "Tutorial Websites"
    },
    "3512": {
        "APIs": [
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Custom order dictionary",
        "Source": "Tutorial Websites"
    },
    "3513": {
        "APIs": [
            "get()",
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Decrement Dictionary value by K",
        "Source": "Tutorial Websites"
    },
    "3514": {
        "APIs": [
            "range()",
            "len()",
            "int()",
            "sort()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Descending Sort String Numbers",
        "Source": "Tutorial Websites"
    },
    "3515": {
        "APIs": [
            "values()",
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Detect loop in Dictionaries",
        "Source": "Tutorial Websites"
    },
    "3516": {
        "APIs": [
            "range()",
            "len()",
            "append()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Diagonal element addition among lists",
        "Source": "Tutorial Websites"
    },
    "3517": {
        "APIs": [
            "product()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Dictionary Key Value lists combinations",
        "Source": "Tutorial Websites"
    },
    "3518": {
        "APIs": [
            "prod()",
            "itemgetter()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Dictionary Key\u2019s Product in list",
        "Source": "Tutorial Websites"
    },
    "3519": {
        "APIs": [
            "defaultdict()",
            "chain.from_iterables()",
            "Counter()",
            "from_iterables()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python \u2013 Dictionary List Values Frequency",
        "Source": "Tutorial Websites"
    },
    "3520": {
        "APIs": [
            "tuple()",
            "items()",
            "map()",
            "lambda()",
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Dictionary Tuple values update",
        "Source": "Tutorial Websites"
    },
    "3521": {
        "APIs": [
            "keys()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Dictionary Values Division",
        "Source": "Tutorial Websites"
    },
    "3522": {
        "APIs": [
            "items()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Dictionary Values Mapped Summation",
        "Source": "Tutorial Websites"
    },
    "3523": {
        "APIs": [
            "len()",
            "sum()",
            "values()",
            "size()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Dictionary Values Mean",
        "Source": "Tutorial Websites"
    },
    "3524": {
        "APIs": [
            "zip()",
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Dictionary construction from front-rear key values",
        "Source": "Tutorial Websites"
    },
    "3525": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Dictionary items in value range",
        "Source": "Tutorial Websites"
    },
    "3526": {
        "APIs": [
            "len()",
            "map()",
            "reduce()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Dictionary value lists lengths product",
        "Source": "Tutorial Websites"
    },
    "3527": {
        "APIs": [
            "sum()",
            "len()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Dictionary values String Length Summation",
        "Source": "Tutorial Websites"
    },
    "3528": {
        "APIs": [
            "len()",
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Dictionary with maximum count of pairs",
        "Source": "Tutorial Websites"
    },
    "3529": {
        "APIs": [
            "remove()",
            "pop()",
            "index()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Difference of List keeping duplicates",
        "Source": "Tutorial Websites"
    },
    "3530": {
        "APIs": [
            "isnumeric()",
            "sorted()",
            "sort()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Differential Sort String Numbers and Alphabets",
        "Source": "Tutorial Websites"
    },
    "3531": {
        "APIs": [
            "set()",
            "reduce()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Disjoint Strings across Lists",
        "Source": "Tutorial Websites"
    },
    "3532": {
        "APIs": [
            "index()",
            "find()",
            "rfind()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Distance between occurrences",
        "Source": "Tutorial Websites"
    },
    "3533": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Distinct Flatten dictionaries",
        "Source": "Tutorial Websites"
    },
    "3534": {
        "APIs": [
            "combinations()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Distinct Positive Integers Sum to K",
        "Source": "Tutorial Websites"
    },
    "3535": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Divide String into Equal K chunks",
        "Source": "Tutorial Websites"
    },
    "3536": {
        "APIs": [
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Double Split String to Matrix",
        "Source": "Tutorial Websites"
    },
    "3537": {
        "APIs": [
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Double each List element",
        "Source": "Tutorial Websites"
    },
    "3538": {
        "APIs": [
            "get()",
            "append()",
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Double each consecutive duplicate",
        "Source": "Tutorial Websites"
    },
    "3539": {
        "APIs": [
            "float()",
            "abs()",
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Dual Element row with Maximum difference",
        "Source": "Tutorial Websites"
    },
    "3540": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Dual Tuple Alternate summation",
        "Source": "Tutorial Websites"
    },
    "3541": {
        "APIs": [
            "enumerate()",
            "map()",
            "combinations()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Dual element Rows Combinations",
        "Source": "Tutorial Websites"
    },
    "3542": {
        "APIs": [
            "pop()",
            "index()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Edit objects inside tuple",
        "Source": "Tutorial Websites"
    },
    "3543": {
        "APIs": [
            "startswith()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Element Frequency starting with K in dictionary value List",
        "Source": "Tutorial Websites"
    },
    "3544": {
        "APIs": [
            "Counter()",
            "set()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Element frequencies in percent range",
        "Source": "Tutorial Websites"
    },
    "3545": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Element wise Matrix Difference",
        "Source": "Tutorial Websites"
    },
    "3546": {
        "APIs": [
            "isinstance()",
            "flatten()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Elements Frequency in Mixed Nested Tuple",
        "Source": "Tutorial Websites"
    },
    "3547": {
        "APIs": [
            "type()",
            "append()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Elements Lengths in List",
        "Source": "Tutorial Websites"
    },
    "3548": {
        "APIs": [
            "set()",
            "count()",
            "Counter()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Elements frequency count in multiple lists",
        "Source": "Tutorial Websites"
    },
    "3549": {
        "APIs": [
            "defaultdict()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Elements frequency in Tuple",
        "Source": "Tutorial Websites"
    },
    "3550": {
        "APIs": [
            "chain()",
            "Counter()",
            "chain.from_iterables()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python \u2013 Elements frequency in Tuple Matrix",
        "Source": "Tutorial Websites"
    },
    "3551": {
        "APIs": [
            "zip()",
            "set()",
            "count()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Elements with K lists similar index value",
        "Source": "Tutorial Websites"
    },
    "3552": {
        "APIs": [
            "filter()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Elements with factors count less than K",
        "Source": "Tutorial Websites"
    },
    "3553": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Elements with same index",
        "Source": "Tutorial Websites"
    },
    "3554": {
        "APIs": [
            "join()",
            "split()",
            "isupper()",
            "regex()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Eliminate Capital Letter Starting words from String",
        "Source": "Tutorial Websites"
    },
    "3555": {
        "APIs": [
            "min()",
            "groupby()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Equable Minimial Records",
        "Source": "Tutorial Websites"
    },
    "3556": {
        "APIs": [
            "all()",
            "filter()",
            "ord()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Equidistant consecutive characters Strings",
        "Source": "Tutorial Websites"
    },
    "3557": {
        "APIs": [
            "join()",
            "maketrans()",
            "translate()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Escape reserved characters in Strings List",
        "Source": "Tutorial Websites"
    },
    "3558": {
        "APIs": [
            "map()",
            "sum()",
            "eval()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Evaluate Expression given in String",
        "Source": "Tutorial Websites"
    },
    "3559": {
        "APIs": [
            "upper()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Every Kth Strings Uppercase",
        "Source": "Tutorial Websites"
    },
    "3560": {
        "APIs": [
            "enumerate()",
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Every Kth index Maximum in List",
        "Source": "Tutorial Websites"
    },
    "3561": {
        "APIs": [
            "zip()",
            "join()",
            "regex()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Expand Character Frequency String",
        "Source": "Tutorial Websites"
    },
    "3562": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extend consecutive tuples",
        "Source": "Tutorial Websites"
    },
    "3563": {
        "APIs": [
            "sum()",
            "filter()",
            "lambda()",
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Dictionary Items with Summation Greater than K",
        "Source": "Tutorial Websites"
    },
    "3564": {
        "APIs": [
            "map()",
            "list()",
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Dictionary values list to List",
        "Source": "Tutorial Websites"
    },
    "3565": {
        "APIs": [
            "dict()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Equal Pair Dictionary",
        "Source": "Tutorial Websites"
    },
    "3566": {
        "APIs": [
            "isinstance()",
            "tuple()",
            "even_ele()",
            "even_fnc()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Even elements in Nested Mixed Tuple",
        "Source": "Tutorial Websites"
    },
    "3567": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Indices of substring matches",
        "Source": "Tutorial Websites"
    },
    "3568": {
        "APIs": [
            "max()",
            "map()",
            "itemgetter()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Item with Maximum Tuple Value",
        "Source": "Tutorial Websites"
    },
    "3569": {
        "APIs": [
            "range()",
            "len()",
            "itertools.combinations()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python \u2013 Extract K length substrings",
        "Source": "Tutorial Websites"
    },
    "3570": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Keys with specific Value Type",
        "Source": "Tutorial Websites"
    },
    "3571": {
        "APIs": [
            "all()",
            "set()",
            "intersection()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Key\u2019s Value, if Key Present in List and Dictionary",
        "Source": "Tutorial Websites"
    },
    "3572": {
        "APIs": [
            "update()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Key\u2019s value from Mixed Dictionaries List",
        "Source": "Tutorial Websites"
    },
    "3573": {
        "APIs": [
            "range()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Kth element of every Nth tuple in List",
        "Source": "Tutorial Websites"
    },
    "3574": {
        "APIs": [
            "values()",
            "map()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Kth index elements from Dictionary Value list",
        "Source": "Tutorial Websites"
    },
    "3575": {
        "APIs": [
            "max()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Maximum Keys\u2019 value dictionaries",
        "Source": "Tutorial Websites"
    },
    "3576": {
        "APIs": [
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Missing Ranges",
        "Source": "Tutorial Websites"
    },
    "3577": {
        "APIs": [
            "all()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Monodigit elements",
        "Source": "Tutorial Websites"
    },
    "3578": {
        "APIs": [
            "zip()",
            "isdigit()",
            "values()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Numerical Dictionary values",
        "Source": "Tutorial Websites"
    },
    "3579": {
        "APIs": [
            "all()",
            "count()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Paired Rows",
        "Source": "Tutorial Websites"
    },
    "3580": {
        "APIs": [
            "isinstance()",
            "all()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Particular data type rows",
        "Source": "Tutorial Websites"
    },
    "3581": {
        "APIs": [
            "findall()",
            "re.sub()",
            "split()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python \u2013 Extract Percentages from String",
        "Source": "Tutorial Websites"
    },
    "3582": {
        "APIs": [
            "zip()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Preceding Record from list values",
        "Source": "Tutorial Websites"
    },
    "3583": {
        "APIs": [
            "str()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Rear K digits from Numbers",
        "Source": "Tutorial Websites"
    },
    "3584": {
        "APIs": [
            "any()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Row with any Boolean True",
        "Source": "Tutorial Websites"
    },
    "3585": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Similar Key Values",
        "Source": "Tutorial Websites"
    },
    "3586": {
        "APIs": [
            "Counter()",
            "fromkeys()",
            "get()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Similar pairs from List",
        "Source": "Tutorial Websites"
    },
    "3587": {
        "APIs": [
            "sorted()",
            "filter()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Sorted Strings",
        "Source": "Tutorial Websites"
    },
    "3588": {
        "APIs": [
            "split()",
            "re.split()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python \u2013 Extract String after Nth occurrence of K character",
        "Source": "Tutorial Websites"
    },
    "3589": {
        "APIs": [
            "isinstance()",
            "chain.from_iterables()",
            "isintance()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python \u2013 Extract String elements from Mixed Matrix",
        "Source": "Tutorial Websites"
    },
    "3590": {
        "APIs": [
            "isdigit()",
            "index()",
            "regex()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract String till Numeric",
        "Source": "Tutorial Websites"
    },
    "3591": {
        "APIs": [
            "all()",
            "find()",
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract String till all occurrence of characters from other string",
        "Source": "Tutorial Websites"
    },
    "3592": {
        "APIs": [
            "ord()",
            "any()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Strings with Successive Alphabets in Alphabetical Order",
        "Source": "Tutorial Websites"
    },
    "3593": {
        "APIs": [
            "any()",
            "isdigit()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Strings with a digit",
        "Source": "Tutorial Websites"
    },
    "3594": {
        "APIs": [
            "set()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Symmetric Tuples",
        "Source": "Tutorial Websites"
    },
    "3595": {
        "APIs": [
            "all()",
            "isdigit()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Tuples with all Numeric Strings",
        "Source": "Tutorial Websites"
    },
    "3596": {
        "APIs": [
            "tuple()",
            "map()",
            "zip()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Unique value key pairs",
        "Source": "Tutorial Websites"
    },
    "3597": {
        "APIs": [
            "sorted()",
            "values()",
            "chain()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Unique values dictionary values",
        "Source": "Tutorial Websites"
    },
    "3598": {
        "APIs": [
            "isupper()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract Upper Case Characters",
        "Source": "Tutorial Websites"
    },
    "3599": {
        "APIs": [
            "re.search()",
            "strptime()",
            "search()",
            "python-dateutil()",
            "parse()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python \u2013 Extract date in String",
        "Source": "Tutorial Websites"
    },
    "3600": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract dictionaries with Empty String value in K key",
        "Source": "Tutorial Websites"
    },
    "3601": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract dictionaries with values sum greater than K",
        "Source": "Tutorial Websites"
    },
    "3602": {
        "APIs": [
            "set()",
            "items()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract dictionary items with List elements",
        "Source": "Tutorial Websites"
    },
    "3603": {
        "APIs": [
            "map()",
            "chain.from_iterable()",
            "set()",
            "from_iterable()",
            "add()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python \u2013 Extract digits from Tuple list",
        "Source": "Tutorial Websites"
    },
    "3604": {
        "APIs": [
            "index()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract domain name from Email address",
        "Source": "Tutorial Websites"
    },
    "3605": {
        "APIs": [
            "count()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract elements with Frequency greater than K",
        "Source": "Tutorial Websites"
    },
    "3606": {
        "APIs": [
            "groupby()",
            "slice()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract elements with Range consecutive occurrences",
        "Source": "Tutorial Websites"
    },
    "3607": {
        "APIs": [
            "count()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract elements with equal frequency as value",
        "Source": "Tutorial Websites"
    },
    "3608": {
        "APIs": [
            "enumerate()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract indices of Present, Non Index matching Strings",
        "Source": "Tutorial Websites"
    },
    "3609": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract ith Key\u2019s Value of K\u2019s Maximum value dictionary",
        "Source": "Tutorial Websites"
    },
    "3610": {
        "APIs": [
            "append()",
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract ith column values from jth column values",
        "Source": "Tutorial Websites"
    },
    "3611": {
        "APIs": [
            "get()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract ith element of K key\u2019s value",
        "Source": "Tutorial Websites"
    },
    "3612": {
        "APIs": [
            "min()",
            "max()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract list with difference in extreme values greater than K",
        "Source": "Tutorial Websites"
    },
    "3613": {
        "APIs": [
            "join()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract range characters from String",
        "Source": "Tutorial Websites"
    },
    "3614": {
        "APIs": [
            "len()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract range sized strings",
        "Source": "Tutorial Websites"
    },
    "3615": {
        "APIs": [
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract records if Kth elements not in List",
        "Source": "Tutorial Websites"
    },
    "3616": {
        "APIs": [
            "isinstance()",
            "any()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract rows with Complex data types",
        "Source": "Tutorial Websites"
    },
    "3617": {
        "APIs": [
            "all()",
            "len()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract rows with Even length strings",
        "Source": "Tutorial Websites"
    },
    "3618": {
        "APIs": [
            "items()",
            "isinstance()",
            "get_vals()",
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract selective keys\u2019 values Including Nested Keys",
        "Source": "Tutorial Websites"
    },
    "3619": {
        "APIs": [
            "index()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract string between two substrings",
        "Source": "Tutorial Websites"
    },
    "3620": {
        "APIs": [
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract target key from other key values",
        "Source": "Tutorial Websites"
    },
    "3621": {
        "APIs": [
            "Counter()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract tuple supersets from List",
        "Source": "Tutorial Websites"
    },
    "3622": {
        "APIs": [
            "all()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract tuples having K digit elements",
        "Source": "Tutorial Websites"
    },
    "3623": {
        "APIs": [
            "all()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract tuples with elements in Range",
        "Source": "Tutorial Websites"
    },
    "3624": {
        "APIs": [
            "items()",
            "values()",
            "keys()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract values of Particular Key in Nested Values",
        "Source": "Tutorial Websites"
    },
    "3625": {
        "APIs": [
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extract words starting with K in String List",
        "Source": "Tutorial Websites"
    },
    "3626": {
        "APIs": [
            "items()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extracting Key from Value Substring",
        "Source": "Tutorial Websites"
    },
    "3627": {
        "APIs": [
            "list()",
            "keys()",
            "next()",
            "iter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extracting Kth Key in Dictionary",
        "Source": "Tutorial Websites"
    },
    "3628": {
        "APIs": [
            "append()",
            "index()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extracting Priority Elements in Tuple List",
        "Source": "Tutorial Websites"
    },
    "3629": {
        "APIs": [
            "set()",
            "values()",
            "keys()",
            "update()",
            "list()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Extracting keys not in values",
        "Source": "Tutorial Websites"
    },
    "3630": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Factors Frequency Dictionary",
        "Source": "Tutorial Websites"
    },
    "3631": {
        "APIs": [
            "enumerate()",
            "comprehensionenumerate()",
            "filter()",
            "range()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 False indices in a boolean list",
        "Source": "Tutorial Websites"
    },
    "3632": {
        "APIs": [
            "sum()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 False values Frequency",
        "Source": "Tutorial Websites"
    },
    "3633": {
        "APIs": [
            "len()",
            "ljust()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Fill Strings for size K in Tuple List",
        "Source": "Tutorial Websites"
    },
    "3634": {
        "APIs": [
            "range()",
            "append()",
            "min()",
            "max()",
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Fill gaps in consecutive Records",
        "Source": "Tutorial Websites"
    },
    "3635": {
        "APIs": [
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Fill list characters in String",
        "Source": "Tutorial Websites"
    },
    "3636": {
        "APIs": [
            "items()",
            "__contains__()",
            "append()",
            "get()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter Key from Nested item",
        "Source": "Tutorial Websites"
    },
    "3637": {
        "APIs": [
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter Non-None dictionary Keys",
        "Source": "Tutorial Websites"
    },
    "3638": {
        "APIs": [
            "len()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter Range Length Tuples",
        "Source": "Tutorial Websites"
    },
    "3639": {
        "APIs": [
            "all()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter Rows with Range Elements",
        "Source": "Tutorial Websites"
    },
    "3640": {
        "APIs": [
            "islower()",
            "isupper()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter Similar Case Strings",
        "Source": "Tutorial Websites"
    },
    "3641": {
        "APIs": [
            "sorted()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter Sorted Rows",
        "Source": "Tutorial Websites"
    },
    "3642": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter String Tuples if String lengths equals K",
        "Source": "Tutorial Websites"
    },
    "3643": {
        "APIs": [
            "permutations()",
            "map()",
            "join()",
            "set()",
            "intersection()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter Strings combination of K substrings",
        "Source": "Tutorial Websites"
    },
    "3644": {
        "APIs": [
            "all()",
            "ord()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter Strings within ASCII range",
        "Source": "Tutorial Websites"
    },
    "3645": {
        "APIs": [
            "all()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter Supersequence Strings",
        "Source": "Tutorial Websites"
    },
    "3646": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter Tuple with Elements capped on K",
        "Source": "Tutorial Websites"
    },
    "3647": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter Tuples Product greater than K",
        "Source": "Tutorial Websites"
    },
    "3648": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter Tuples by Kth element from List",
        "Source": "Tutorial Websites"
    },
    "3649": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter Tuples with All Even Elements",
        "Source": "Tutorial Websites"
    },
    "3650": {
        "APIs": [
            "isinstance()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter Tuples with Integers",
        "Source": "Tutorial Websites"
    },
    "3651": {
        "APIs": [
            "all()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter Tuples with Strings of specific characters",
        "Source": "Tutorial Websites"
    },
    "3652": {
        "APIs": [
            "len()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter above Threshold size Strings",
        "Source": "Tutorial Websites"
    },
    "3653": {
        "APIs": [
            "all()",
            "isupper()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter all uppercase characters Tuples from given list of tuples",
        "Source": "Tutorial Websites"
    },
    "3654": {
        "APIs": [
            "dict()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter and Double keys greater than K",
        "Source": "Tutorial Websites"
    },
    "3655": {
        "APIs": [
            "sorted()",
            "values()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter dictionaries with ordered values",
        "Source": "Tutorial Websites"
    },
    "3656": {
        "APIs": [
            "type()",
            "isinstance()",
            "isintance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter dictionary values in heterogenous dictionary",
        "Source": "Tutorial Websites"
    },
    "3657": {
        "APIs": [
            "float()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter float strings from String list",
        "Source": "Tutorial Websites"
    },
    "3658": {
        "APIs": [
            "all()",
            "isinstance()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter immutable rows representing Dictionary Keys from Matrix",
        "Source": "Tutorial Websites"
    },
    "3659": {
        "APIs": [
            "zip()",
            "defaultdict()",
            "append()",
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter index similar values",
        "Source": "Tutorial Websites"
    },
    "3660": {
        "APIs": [
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter key\u2019s value from other key",
        "Source": "Tutorial Websites"
    },
    "3661": {
        "APIs": [
            "startswith()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter list elements starting with given Prefix",
        "Source": "Tutorial Websites"
    },
    "3662": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter odd elements from value lists in dictionary",
        "Source": "Tutorial Websites"
    },
    "3663": {
        "APIs": [
            "all()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter rows with Elements as Multiple of K",
        "Source": "Tutorial Websites"
    },
    "3664": {
        "APIs": [
            "isalpha()",
            "all()",
            "filter()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter rows with only Alphabets from List of Lists",
        "Source": "Tutorial Websites"
    },
    "3665": {
        "APIs": [
            "all()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter rows with required elements",
        "Source": "Tutorial Websites"
    },
    "3666": {
        "APIs": [
            "any()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter rows without Space Strings",
        "Source": "Tutorial Websites"
    },
    "3667": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter the List of String whose index in second List contaons the given Substring",
        "Source": "Tutorial Websites"
    },
    "3668": {
        "APIs": [
            "set()",
            "len()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter tuple with all same elements",
        "Source": "Tutorial Websites"
    },
    "3669": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter unequal elements of two lists corresponding same index",
        "Source": "Tutorial Websites"
    },
    "3670": {
        "APIs": [
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Filter unique valued tuples",
        "Source": "Tutorial Websites"
    },
    "3671": {
        "APIs": [
            "endswith()",
            "map()",
            "filter()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Find Keys with specific suffix in Dictionary",
        "Source": "Tutorial Websites"
    },
    "3672": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Find Kth Even Element",
        "Source": "Tutorial Websites"
    },
    "3673": {
        "APIs": [
            "min()",
            "combination()",
            "nsmallest()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Find Minimum Pair Sum in list",
        "Source": "Tutorial Websites"
    },
    "3674": {
        "APIs": [
            "enumerate()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Find Product of Index Value and find the Summation",
        "Source": "Tutorial Websites"
    },
    "3675": {
        "APIs": [
            "any()",
            "isdigit()",
            "isalpha()",
            "findall()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Find Words with both alphabets and numbers",
        "Source": "Tutorial Websites"
    },
    "3676": {
        "APIs": [
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Find all duplicate characters in string",
        "Source": "Tutorial Websites"
    },
    "3677": {
        "APIs": [
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Find all the strings that are substrings to the given list of strings",
        "Source": "Tutorial Websites"
    },
    "3678": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Find dictionary keys present in a Strings List",
        "Source": "Tutorial Websites"
    },
    "3679": {
        "APIs": [
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Find first element by second in tuple List",
        "Source": "Tutorial Websites"
    },
    "3680": {
        "APIs": [
            "isinstance()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Find frequency of given Datatype in tuple",
        "Source": "Tutorial Websites"
    },
    "3681": {
        "APIs": [
            "sorted()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Find minimum k records from tuple list",
        "Source": "Tutorial Websites"
    },
    "3682": {
        "APIs": [
            "append()",
            "min()",
            "itertools.groupby()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python \u2013 Find minimum of non zero groups",
        "Source": "Tutorial Websites"
    },
    "3683": {
        "APIs": [
            "groupby()",
            "len()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Find occurrences for each value of a particular key",
        "Source": "Tutorial Websites"
    },
    "3684": {
        "APIs": [
            "len()",
            "accumulate()",
            "map()",
            "type()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Find starting index of all Nested Lists",
        "Source": "Tutorial Websites"
    },
    "3685": {
        "APIs": [
            "zip()",
            "max()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Find the Maximum of Similar Indices in two list of Tuples",
        "Source": "Tutorial Websites"
    },
    "3686": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Find the distance betwewn first and last even elements in a List",
        "Source": "Tutorial Websites"
    },
    "3687": {
        "APIs": [
            "sum()",
            "sorted()",
            "bisect_left()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Find the frequency of numbers greater than each element in a list",
        "Source": "Tutorial Websites"
    },
    "3688": {
        "APIs": [
            "min()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Find the index of Minimum element in list",
        "Source": "Tutorial Websites"
    },
    "3689": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Find the indices for k Smallest elements",
        "Source": "Tutorial Websites"
    },
    "3690": {
        "APIs": [
            "len()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Find the sum of Length of Strings at given indices",
        "Source": "Tutorial Websites"
    },
    "3691": {
        "APIs": [
            "regex()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 First K consecutive digits in String",
        "Source": "Tutorial Websites"
    },
    "3692": {
        "APIs": [
            "append()",
            "set()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 First K unique elements",
        "Source": "Tutorial Websites"
    },
    "3693": {
        "APIs": [
            "set()",
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 First occurrence of one list in another",
        "Source": "Tutorial Websites"
    },
    "3694": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Flag None Element Rows in Matrix",
        "Source": "Tutorial Websites"
    },
    "3695": {
        "APIs": [
            "get()",
            "chain.from_iterable()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python \u2013 Flatten Dictionary with List",
        "Source": "Tutorial Websites"
    },
    "3696": {
        "APIs": [
            "isinstance()",
            "chain()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Flatten List to individual elements",
        "Source": "Tutorial Websites"
    },
    "3697": {
        "APIs": [
            "zip()",
            "map()",
            "union()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Flatten Nested Dictionary to Matrix",
        "Source": "Tutorial Websites"
    },
    "3698": {
        "APIs": [
            "zip()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Flatten Nested Keys",
        "Source": "Tutorial Websites"
    },
    "3699": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Flatten Nested Tuples",
        "Source": "Tutorial Websites"
    },
    "3700": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Flatten and remove keys from Dictionary",
        "Source": "Tutorial Websites"
    },
    "3701": {
        "APIs": [
            "sum()",
            "tuple()",
            "chain.from_iterable()",
            "from_iterable()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python \u2013 Flatten tuple of List to tuple",
        "Source": "Tutorial Websites"
    },
    "3702": {
        "APIs": [
            "all()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Formable Strings Count in Matrix",
        "Source": "Tutorial Websites"
    },
    "3703": {
        "APIs": [
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Fractional Frequency of elements in List",
        "Source": "Tutorial Websites"
    },
    "3704": {
        "APIs": [
            "defaultdict()",
            "Counter()",
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Frequencies of Values in a Dictionary",
        "Source": "Tutorial Websites"
    },
    "3705": {
        "APIs": [
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Frequency Grouping Dictionary",
        "Source": "Tutorial Websites"
    },
    "3706": {
        "APIs": [
            "count()",
            "coun()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Frequency of K in sliced String",
        "Source": "Tutorial Websites"
    },
    "3707": {
        "APIs": [
            "count()",
            "Counter()",
            "setdefault()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Frequency of elements from other list",
        "Source": "Tutorial Websites"
    },
    "3708": {
        "APIs": [
            "len()",
            "set()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Frequency of unequal items in Dictionary",
        "Source": "Tutorial Websites"
    },
    "3709": {
        "APIs": [
            "choice()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Generate random number except K in list",
        "Source": "Tutorial Websites"
    },
    "3710": {
        "APIs": [
            "tuple()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Get Even indexed elements in Tuple",
        "Source": "Tutorial Websites"
    },
    "3711": {
        "APIs": [
            "enumerate()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Get Indices of Even Elements from list",
        "Source": "Tutorial Websites"
    },
    "3712": {
        "APIs": [
            "sum()",
            "len()",
            "zip()",
            "mean()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Get Matrix Mean",
        "Source": "Tutorial Websites"
    },
    "3713": {
        "APIs": [
            "list()",
            "next()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Get Nth column elements in Tuple Strings",
        "Source": "Tutorial Websites"
    },
    "3714": {
        "APIs": [
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Get Nth word in given String",
        "Source": "Tutorial Websites"
    },
    "3715": {
        "APIs": [
            "randint()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Get a sorted list of random integers with unique elements",
        "Source": "Tutorial Websites"
    },
    "3716": {
        "APIs": [
            "combination()",
            "str()",
            "int()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Get all numbers combinations in list",
        "Source": "Tutorial Websites"
    },
    "3717": {
        "APIs": [
            "max()",
            "imap()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Get maximum of Nth column from tuple list",
        "Source": "Tutorial Websites"
    },
    "3718": {
        "APIs": [
            "min()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Get minimum difference in Tuple pair",
        "Source": "Tutorial Websites"
    },
    "3719": {
        "APIs": [
            "index()",
            "iter()",
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Get next key in Dictionary",
        "Source": "Tutorial Websites"
    },
    "3720": {
        "APIs": [
            "os.linesep()",
            "strip()",
            "split()"
        ],
        "APIClasses": [
            "os"
        ],
        "OriginalQuery": "Python \u2013 Get number of characters, words, spaces and lines in a file",
        "Source": "Tutorial Websites"
    },
    "3721": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Get particular Nested level Items from Dictionary",
        "Source": "Tutorial Websites"
    },
    "3722": {
        "APIs": [
            "sum()",
            "islice()",
            "reversed()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Get sum of last K list items using slice",
        "Source": "Tutorial Websites"
    },
    "3723": {
        "APIs": [
            "int()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Get summation of numbers in string list",
        "Source": "Tutorial Websites"
    },
    "3724": {
        "APIs": [
            "range()",
            "isupper()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Get the indices of Uppercase characters in given string",
        "Source": "Tutorial Websites"
    },
    "3725": {
        "APIs": [
            "sum()",
            "Counter()",
            "join()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Get word frequency in percentage",
        "Source": "Tutorial Websites"
    },
    "3726": {
        "APIs": [
            "product()",
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Group Adjacent Coordinates",
        "Source": "Tutorial Websites"
    },
    "3727": {
        "APIs": [
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Group Consecutive elements by Sign",
        "Source": "Tutorial Websites"
    },
    "3728": {
        "APIs": [
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Group Elements in Matrix",
        "Source": "Tutorial Websites"
    },
    "3729": {
        "APIs": [
            "split()",
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Group Hierarachy Splits of keys in Dictionary",
        "Source": "Tutorial Websites"
    },
    "3730": {
        "APIs": [
            "defaultdict()",
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Group Records on Similar index elements",
        "Source": "Tutorial Websites"
    },
    "3731": {
        "APIs": [
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Group Similar Start and End character words",
        "Source": "Tutorial Websites"
    },
    "3732": {
        "APIs": [
            "defaultdict()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Group Similar items to Dictionary Values List",
        "Source": "Tutorial Websites"
    },
    "3733": {
        "APIs": [
            "items()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Group Similar keys in dictionary",
        "Source": "Tutorial Websites"
    },
    "3734": {
        "APIs": [
            "append()",
            "list()",
            "grp_ele()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Group Sublists by another List",
        "Source": "Tutorial Websites"
    },
    "3735": {
        "APIs": [
            "groupby()",
            "itemegetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Group Tuples by Kth Index Element",
        "Source": "Tutorial Websites"
    },
    "3736": {
        "APIs": [
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Group concatenate Till K",
        "Source": "Tutorial Websites"
    },
    "3737": {
        "APIs": [
            "isinstance()",
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Group contiguous strings in List",
        "Source": "Tutorial Websites"
    },
    "3738": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Group each increasing and decreasing run in list",
        "Source": "Tutorial Websites"
    },
    "3739": {
        "APIs": [
            "groupby()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Group first elements by second elements in Tuple list",
        "Source": "Tutorial Websites"
    },
    "3740": {
        "APIs": [
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Group keys to values list",
        "Source": "Tutorial Websites"
    },
    "3741": {
        "APIs": [
            "next()",
            "sorted()",
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Group list by first character of string",
        "Source": "Tutorial Websites"
    },
    "3742": {
        "APIs": [
            "defaultdict()",
            "itemgetter()",
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Group records by Kth column in List",
        "Source": "Tutorial Websites"
    },
    "3743": {
        "APIs": [
            "groupby()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Group similar elements into Matrix",
        "Source": "Tutorial Websites"
    },
    "3744": {
        "APIs": [
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Group similar value list to dictionary",
        "Source": "Tutorial Websites"
    },
    "3745": {
        "APIs": [
            "setdefault()",
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Group single item dictionaries into List values",
        "Source": "Tutorial Websites"
    },
    "3746": {
        "APIs": [
            "groupby()",
            "defaultdict()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Grouped Consecutive Range Indices of Elements",
        "Source": "Tutorial Websites"
    },
    "3747": {
        "APIs": [
            "defaultdict()",
            "append()",
            "dict()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Groups Strings on Kth character",
        "Source": "Tutorial Websites"
    },
    "3748": {
        "APIs": [
            "zip()",
            "split()",
            "join()",
            "map()",
            "add()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Horizontal Concatenation of Multiline Strings",
        "Source": "Tutorial Websites"
    },
    "3749": {
        "APIs": [
            "reversed()",
            "list()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 How to Check if two lists are reverse equal",
        "Source": "Tutorial Websites"
    },
    "3750": {
        "APIs": [
            "list()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 How to Multiply all items in Tuple",
        "Source": "Tutorial Websites"
    },
    "3751": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 How to Sort a Dictionary by Kth Index Value",
        "Source": "Tutorial Websites"
    },
    "3752": {
        "APIs": [
            "range()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Incremental K sized Row Matrix Initialization",
        "Source": "Tutorial Websites"
    },
    "3753": {
        "APIs": [
            "range()",
            "list()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Incremental List Extension",
        "Source": "Tutorial Websites"
    },
    "3754": {
        "APIs": [
            "range()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Incremental Range Initialization in Matrix",
        "Source": "Tutorial Websites"
    },
    "3755": {
        "APIs": [
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Incremental Slice concatenation in String list",
        "Source": "Tutorial Websites"
    },
    "3756": {
        "APIs": [
            "islice()",
            "sum()",
            "itemgetter()",
            "takewhile()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Incremental Sublist Sum",
        "Source": "Tutorial Websites"
    },
    "3757": {
        "APIs": [
            "enumerate()",
            "cycle()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Incremental and Cyclic Repetition of List Elements",
        "Source": "Tutorial Websites"
    },
    "3758": {
        "APIs": [
            "enumerate()",
            "dict()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Incremental value initialization in Dictionary",
        "Source": "Tutorial Websites"
    },
    "3759": {
        "APIs": [
            "enumerate()",
            "set()",
            "groupby()",
            "sorted()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Index Directory of Elements",
        "Source": "Tutorial Websites"
    },
    "3760": {
        "APIs": [
            "ord()",
            "lowecase()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Index Frequency Alphabet List",
        "Source": "Tutorial Websites"
    },
    "3761": {
        "APIs": [
            "int()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Index Mapping Cypher",
        "Source": "Tutorial Websites"
    },
    "3762": {
        "APIs": [
            "filter()",
            "set()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Index Ranks of Elements",
        "Source": "Tutorial Websites"
    },
    "3763": {
        "APIs": [
            "range()",
            "len()",
            "append()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Index Value Summation List",
        "Source": "Tutorial Websites"
    },
    "3764": {
        "APIs": [
            "enumerate()",
            "chain.from_iterable()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python \u2013 Index Value repetition in List",
        "Source": "Tutorial Websites"
    },
    "3765": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Index match element Product",
        "Source": "Tutorial Websites"
    },
    "3766": {
        "APIs": [
            "range()",
            "len()",
            "append()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Indices of atmost K elements in list",
        "Source": "Tutorial Websites"
    },
    "3767": {
        "APIs": [
            "range()",
            "deepcopy()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Initialize dictionary keys with Matrix",
        "Source": "Tutorial Websites"
    },
    "3768": {
        "APIs": [
            "range()",
            "fromkeys()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Initialize dictionary with custom value list",
        "Source": "Tutorial Websites"
    },
    "3769": {
        "APIs": [
            "mean()",
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Inner Nested Value List Mean in Dictionary",
        "Source": "Tutorial Websites"
    },
    "3770": {
        "APIs": [
            "join()",
            "enumerate()",
            "itertools.chain()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python \u2013 Insert after every Nth element in a list",
        "Source": "Tutorial Websites"
    },
    "3771": {
        "APIs": [
            "OrderedDict.move_to_end()"
        ],
        "APIClasses": [
            "OrderedDict"
        ],
        "OriginalQuery": "Python \u2013 Insertion at the beginning in OrderedDict",
        "Source": "Tutorial Websites"
    },
    "3772": {
        "APIs": [
            "int()",
            "split()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Integers String to Integer List",
        "Source": "Tutorial Websites"
    },
    "3773": {
        "APIs": [
            "defaultdict()",
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Inter Matrix Grouping",
        "Source": "Tutorial Websites"
    },
    "3774": {
        "APIs": [
            "replace()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Interconvert Horizontal and Vertical String",
        "Source": "Tutorial Websites"
    },
    "3775": {
        "APIs": [
            "int.from_bytes()",
            "from_bytes()",
            "tuple.to_bytes()",
            "to_bytes()"
        ],
        "APIClasses": [
            "int",
            "tuple"
        ],
        "OriginalQuery": "Python \u2013 Interconvert Tuple to Byte Integer",
        "Source": "Tutorial Websites"
    },
    "3776": {
        "APIs": [
            "zip()",
            "cycle()",
            "chain()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Interleave two lists of different length",
        "Source": "Tutorial Websites"
    },
    "3777": {
        "APIs": [
            "len()",
            "int()",
            "append()",
            "Counter()",
            "set()",
            "product()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Interlist Perfect Square Pairs",
        "Source": "Tutorial Websites"
    },
    "3778": {
        "APIs": [
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Inverse Dictionary Values List",
        "Source": "Tutorial Websites"
    },
    "3779": {
        "APIs": [
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Iterative Pair Pattern",
        "Source": "Tutorial Websites"
    },
    "3780": {
        "APIs": [
            "extend()",
            "append()",
            "list()",
            "map()",
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Join Tuples if similar initial element",
        "Source": "Tutorial Websites"
    },
    "3781": {
        "APIs": [
            "join_tup()",
            "map()",
            "join()",
            "int()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Join Tuples to Integers in Tuple List",
        "Source": "Tutorial Websites"
    },
    "3782": {
        "APIs": [
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Join strings by multiple delimiters",
        "Source": "Tutorial Websites"
    },
    "3783": {
        "APIs": [
            "product()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 K Dice Combinations",
        "Source": "Tutorial Websites"
    },
    "3784": {
        "APIs": [
            "range()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 K Matrix Initialization",
        "Source": "Tutorial Websites"
    },
    "3785": {
        "APIs": [
            "sorted()",
            "index()",
            "enumerate()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 K Maximum elements with Index in List",
        "Source": "Tutorial Websites"
    },
    "3786": {
        "APIs": [
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 K Summation from Two lists",
        "Source": "Tutorial Websites"
    },
    "3787": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 K consecutive Maximum",
        "Source": "Tutorial Websites"
    },
    "3788": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 K difference Consecutive elements",
        "Source": "Tutorial Websites"
    },
    "3789": {
        "APIs": [
            "zip()",
            "map()",
            "concat()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 K difference index pairing in list",
        "Source": "Tutorial Websites"
    },
    "3790": {
        "APIs": [
            "islice()",
            "reversed()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 K elements Reversed Slice",
        "Source": "Tutorial Websites"
    },
    "3791": {
        "APIs": [
            "itertools.product()",
            "join()",
            "map()",
            "product()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python \u2013 K length Combinations from given characters",
        "Source": "Tutorial Websites"
    },
    "3792": {
        "APIs": [
            "zip()",
            "zip_longest()",
            "chain.from_iterables()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python \u2013 K length Concatenate Single Valued Tuple",
        "Source": "Tutorial Websites"
    },
    "3793": {
        "APIs": [
            "split()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 K length consecutive characters",
        "Source": "Tutorial Websites"
    },
    "3794": {
        "APIs": [
            "zip()",
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Key Columns Dictionary from Matrix",
        "Source": "Tutorial Websites"
    },
    "3795": {
        "APIs": [
            "sum()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Key Lists Summations",
        "Source": "Tutorial Websites"
    },
    "3796": {
        "APIs": [
            "dict()",
            "zip()",
            "product()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Key Value list pairings in Dictionary",
        "Source": "Tutorial Websites"
    },
    "3797": {
        "APIs": [
            "sorted()",
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Key with Maximum element at Kth index in Dictionary Value List",
        "Source": "Tutorial Websites"
    },
    "3798": {
        "APIs": [
            "all()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Key with all Characters in String",
        "Source": "Tutorial Websites"
    },
    "3799": {
        "APIs": [
            "sorted()",
            "lambda()",
            "set()",
            "values()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Key with maximum unique values",
        "Source": "Tutorial Websites"
    },
    "3800": {
        "APIs": [
            "sum()",
            "values()",
            "value()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Keys Frequency with Value atmost K",
        "Source": "Tutorial Websites"
    },
    "3801": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Keys Values equal frequency",
        "Source": "Tutorial Websites"
    },
    "3802": {
        "APIs": [
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Keys associated with Values in Dictionary",
        "Source": "Tutorial Websites"
    },
    "3803": {
        "APIs": [
            "items()",
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Keys associated with value list in dictionary",
        "Source": "Tutorial Websites"
    },
    "3804": {
        "APIs": [
            "len()",
            "items()",
            "min()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Keys with shortest length lists in dictionary",
        "Source": "Tutorial Websites"
    },
    "3805": {
        "APIs": [
            "prod()",
            "imap()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Kth Column Product in Tuple List",
        "Source": "Tutorial Websites"
    },
    "3806": {
        "APIs": [
            "mean()",
            "sum()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Kth Index Tuple List Mean",
        "Source": "Tutorial Websites"
    },
    "3807": {
        "APIs": [
            "next()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Kth Valid String",
        "Source": "Tutorial Websites"
    },
    "3808": {
        "APIs": [
            "str()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Kth digit Sum",
        "Source": "Tutorial Websites"
    },
    "3809": {
        "APIs": [
            "split()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Kth word replace in String",
        "Source": "Tutorial Websites"
    },
    "3810": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Leaf and Non-Leaf Nodes Dictionary",
        "Source": "Tutorial Websites"
    },
    "3811": {
        "APIs": [
            "min()",
            "collections.Counter()"
        ],
        "APIClasses": [
            "collections"
        ],
        "OriginalQuery": "Python \u2013 Least Frequent Character in String",
        "Source": "Tutorial Websites"
    },
    "3812": {
        "APIs": [
            "len()",
            "join()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Length Conditional Concatenation",
        "Source": "Tutorial Websites"
    },
    "3813": {
        "APIs": [
            "min()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Length of shortest string in string list",
        "Source": "Tutorial Websites"
    },
    "3814": {
        "APIs": [
            "zip()",
            "intersection()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Like Index Common characters",
        "Source": "Tutorial Websites"
    },
    "3815": {
        "APIs": [
            "str()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 List Elements with given digit",
        "Source": "Tutorial Websites"
    },
    "3816": {
        "APIs": [
            "count()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 List Strings frequency in Matrix",
        "Source": "Tutorial Websites"
    },
    "3817": {
        "APIs": [
            "defaultdict()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 List Words Frequency in String",
        "Source": "Tutorial Websites"
    },
    "3818": {
        "APIs": [
            "reduce()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 List XOR",
        "Source": "Tutorial Websites"
    },
    "3819": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 List lengths as record attribute",
        "Source": "Tutorial Websites"
    },
    "3820": {
        "APIs": [
            "combinations()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 List of N size increasing lists",
        "Source": "Tutorial Websites"
    },
    "3821": {
        "APIs": [
            "sum()",
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 List of dictionaries all values Summation",
        "Source": "Tutorial Websites"
    },
    "3822": {
        "APIs": [
            "append()",
            "prod()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 List product excluding duplicates",
        "Source": "Tutorial Websites"
    },
    "3823": {
        "APIs": [
            "max()",
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 List with most unique elements",
        "Source": "Tutorial Websites"
    },
    "3824": {
        "APIs": [
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Lists Modulo",
        "Source": "Tutorial Websites"
    },
    "3825": {
        "APIs": [
            "filter()",
            "zip()",
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Longest Consecution without K in String",
        "Source": "Tutorial Websites"
    },
    "3826": {
        "APIs": [
            "findall()",
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Longest Substring Length of K",
        "Source": "Tutorial Websites"
    },
    "3827": {
        "APIs": [
            "lower()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Lowercase Kth Character in string",
        "Source": "Tutorial Websites"
    },
    "3828": {
        "APIs": [
            "dict()",
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Mapping key values to Dictionary",
        "Source": "Tutorial Websites"
    },
    "3829": {
        "APIs": [
            "map()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Match Kth number digit in list elements",
        "Source": "Tutorial Websites"
    },
    "3830": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Matrix Custom Multiplier",
        "Source": "Tutorial Websites"
    },
    "3831": {
        "APIs": [
            "isdigit()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Matrix Data Type Rectification",
        "Source": "Tutorial Websites"
    },
    "3832": {
        "APIs": [
            "any()",
            "all()",
            "product()",
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Matrix Row subset",
        "Source": "Tutorial Websites"
    },
    "3833": {
        "APIs": [
            "Counter()",
            "sum()",
            "map()",
            "chain()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Matrix elements Frequencies Counter",
        "Source": "Tutorial Websites"
    },
    "3834": {
        "APIs": [
            "zip()",
            "max()",
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximize Nested Tuples",
        "Source": "Tutorial Websites"
    },
    "3835": {
        "APIs": [
            "max()",
            "combination()",
            "nlargest()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximum Aggregation Pair in List",
        "Source": "Tutorial Websites"
    },
    "3836": {
        "APIs": [
            "max()",
            "re.findall()",
            "findall()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python \u2013 Maximum Consecutive Substring Occurrence",
        "Source": "Tutorial Websites"
    },
    "3837": {
        "APIs": [
            "count()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximum N repeated Elements",
        "Source": "Tutorial Websites"
    },
    "3838": {
        "APIs": [
            "max()",
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximum Pair Summation in numeric String",
        "Source": "Tutorial Websites"
    },
    "3839": {
        "APIs": [
            "max()",
            "combination()",
            "nlargest()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximum Quotient Pair in List",
        "Source": "Tutorial Websites"
    },
    "3840": {
        "APIs": [
            "split()",
            "ord()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximum Scoring word",
        "Source": "Tutorial Websites"
    },
    "3841": {
        "APIs": [
            "max()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximum String value length of Key",
        "Source": "Tutorial Websites"
    },
    "3842": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximum Sum Record",
        "Source": "Tutorial Websites"
    },
    "3843": {
        "APIs": [
            "items()",
            "values()",
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximum Value in Nested Dictionary",
        "Source": "Tutorial Websites"
    },
    "3844": {
        "APIs": [
            "sorted()",
            "list()",
            "enumerate()",
            "len()",
            "append()",
            "tuple()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximum and Minimum K elements in Tuple",
        "Source": "Tutorial Websites"
    },
    "3845": {
        "APIs": [
            "max()",
            "filter()",
            "map()",
            "zip_longest()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximum column values in mixed length 2D List",
        "Source": "Tutorial Websites"
    },
    "3846": {
        "APIs": [
            "zip()",
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximum consecutive elements percentage change",
        "Source": "Tutorial Websites"
    },
    "3847": {
        "APIs": [
            "max()",
            "abs()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximum difference across lists",
        "Source": "Tutorial Websites"
    },
    "3848": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximum element in Cropped List",
        "Source": "Tutorial Websites"
    },
    "3849": {
        "APIs": [
            "max()",
            "itertools.islice()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python \u2013 Maximum element in consecutive subsets",
        "Source": "Tutorial Websites"
    },
    "3850": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximum element till K value",
        "Source": "Tutorial Websites"
    },
    "3851": {
        "APIs": [
            "count()",
            "max()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximum frequency in Tuple",
        "Source": "Tutorial Websites"
    },
    "3852": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximum in Row Range",
        "Source": "Tutorial Websites"
    },
    "3853": {
        "APIs": [
            "max()",
            "groupby()",
            "defaultDict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximum length consecutive positive elements",
        "Source": "Tutorial Websites"
    },
    "3854": {
        "APIs": [
            "regex()",
            "groupby()",
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximum occurring Substring from list",
        "Source": "Tutorial Websites"
    },
    "3855": {
        "APIs": [
            "max()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximum of Consecutive Pair in integer list",
        "Source": "Tutorial Websites"
    },
    "3856": {
        "APIs": [
            "max()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximum of K element in other list",
        "Source": "Tutorial Websites"
    },
    "3857": {
        "APIs": [
            "max()",
            "groupby()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximum of Similar Keys in Tuples",
        "Source": "Tutorial Websites"
    },
    "3858": {
        "APIs": [
            "int()",
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximum of Sting Integer list",
        "Source": "Tutorial Websites"
    },
    "3859": {
        "APIs": [
            "max()",
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximum of each Column",
        "Source": "Tutorial Websites"
    },
    "3860": {
        "APIs": [
            "get()",
            "max()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximum of filtered Keys in dictionary",
        "Source": "Tutorial Websites"
    },
    "3861": {
        "APIs": [
            "max()",
            "sort()",
            "reduce()",
            "combination()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximum product using K elements",
        "Source": "Tutorial Websites"
    },
    "3862": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximum record value key in dictionary",
        "Source": "Tutorial Websites"
    },
    "3863": {
        "APIs": [
            "Counter()",
            "items()",
            "most_common()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximum value assignment in Nested Dictionary",
        "Source": "Tutorial Websites"
    },
    "3864": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Maximum value in record list as tuple attribute",
        "Source": "Tutorial Websites"
    },
    "3865": {
        "APIs": [
            "mean()",
            "abs()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Mean deviation of Elements",
        "Source": "Tutorial Websites"
    },
    "3866": {
        "APIs": [
            "keys()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Merge Dictionaries List with duplicate Keys",
        "Source": "Tutorial Websites"
    },
    "3867": {
        "APIs": [
            "pop()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Merge List value Keys to Matrix",
        "Source": "Tutorial Websites"
    },
    "3868": {
        "APIs": [
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Merge consecutive empty Strings",
        "Source": "Tutorial Websites"
    },
    "3869": {
        "APIs": [
            "defauldict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Merge keys by values",
        "Source": "Tutorial Websites"
    },
    "3870": {
        "APIs": [
            "enumerate()",
            "finditer()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Mid occurrence of K in string",
        "Source": "Tutorial Websites"
    },
    "3871": {
        "APIs": [
            "min()",
            "combination()",
            "nsmallest()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Minimum Product Pair in List",
        "Source": "Tutorial Websites"
    },
    "3872": {
        "APIs": [
            "min()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Minimum element indices",
        "Source": "Tutorial Websites"
    },
    "3873": {
        "APIs": [
            "groupby()",
            "min()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Minimum identical consecutive Subarray",
        "Source": "Tutorial Websites"
    },
    "3874": {
        "APIs": [
            "min()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Minimum in each record value list",
        "Source": "Tutorial Websites"
    },
    "3875": {
        "APIs": [
            "min()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Minimum in tuple list value",
        "Source": "Tutorial Websites"
    },
    "3876": {
        "APIs": [
            "min()",
            "items()",
            "dict()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Minimum value key assignment",
        "Source": "Tutorial Websites"
    },
    "3877": {
        "APIs": [
            "dict()",
            "sorted()",
            "zip()",
            "groupby()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Minimum value pairing for dictionary keys",
        "Source": "Tutorial Websites"
    },
    "3878": {
        "APIs": [
            "enumerate()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Modify Equal Tuple Rows",
        "Source": "Tutorial Websites"
    },
    "3879": {
        "APIs": [
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Modulo K elements removal",
        "Source": "Tutorial Websites"
    },
    "3880": {
        "APIs": [
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Modulo of tuple elements",
        "Source": "Tutorial Websites"
    },
    "3881": {
        "APIs": [
            "combinations()",
            "Counter()",
            "most_common()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Most common Combination in Matrix",
        "Source": "Tutorial Websites"
    },
    "3882": {
        "APIs": [
            "replace()",
            "find()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Move Word to Rear end",
        "Source": "Tutorial Websites"
    },
    "3883": {
        "APIs": [
            "Counter()",
            "most_common()",
            "count()",
            "append()",
            "list()",
            "set()",
            "statistics.multimode()",
            "mulimode()"
        ],
        "APIClasses": [
            "statistics"
        ],
        "OriginalQuery": "Python \u2013 Multimode of List",
        "Source": "Tutorial Websites"
    },
    "3884": {
        "APIs": [
            "sorted()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Multiple Column Sort in Tuples",
        "Source": "Tutorial Websites"
    },
    "3885": {
        "APIs": [
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Multiple Keys Grouped Summation",
        "Source": "Tutorial Websites"
    },
    "3886": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Multiplication across Like Keys Value list elements",
        "Source": "Tutorial Websites"
    },
    "3887": {
        "APIs": [
            "range()",
            "len()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Multiply Consecutive elements in list",
        "Source": "Tutorial Websites"
    },
    "3888": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Multiply K to every Nth element",
        "Source": "Tutorial Websites"
    },
    "3889": {
        "APIs": [
            "product()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Multiply all cross list element pairs",
        "Source": "Tutorial Websites"
    },
    "3890": {
        "APIs": [
            "range()",
            "len()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Multiply two list",
        "Source": "Tutorial Websites"
    },
    "3891": {
        "APIs": [
            "sample()",
            "product()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 N Random Tuples list",
        "Source": "Tutorial Websites"
    },
    "3892": {
        "APIs": [
            "set()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 N sized substrings with K distinct characters",
        "Source": "Tutorial Websites"
    },
    "3893": {
        "APIs": [
            "sort()",
            "abs()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Nearest K Sort",
        "Source": "Tutorial Websites"
    },
    "3894": {
        "APIs": [
            "index()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Nearest occurrence between two elements in a List",
        "Source": "Tutorial Websites"
    },
    "3895": {
        "APIs": [
            "index()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Negative index of Element in List",
        "Source": "Tutorial Websites"
    },
    "3896": {
        "APIs": [
            "all()",
            "any()",
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Nested Dictionary Subset",
        "Source": "Tutorial Websites"
    },
    "3897": {
        "APIs": [
            "items()",
            "values()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Nested Dictionary values summation",
        "Source": "Tutorial Websites"
    },
    "3898": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Nested List to single value Tuple",
        "Source": "Tutorial Websites"
    },
    "3899": {
        "APIs": [
            "zip()",
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Nested Records List from Lists",
        "Source": "Tutorial Websites"
    },
    "3900": {
        "APIs": [
            "product()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Nested dictionary Combinations",
        "Source": "Tutorial Websites"
    },
    "3901": {
        "APIs": [
            "dict()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Nested record values summation",
        "Source": "Tutorial Websites"
    },
    "3902": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Next N elements from K value",
        "Source": "Tutorial Websites"
    },
    "3903": {
        "APIs": [
            "range()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Non-None elements indices",
        "Source": "Tutorial Websites"
    },
    "3904": {
        "APIs": [
            "sum()",
            "split()",
            "re.findall()",
            "regex()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python \u2013 Non-Overlapping occurrences of N Repeated K character",
        "Source": "Tutorial Websites"
    },
    "3905": {
        "APIs": [
            "any()",
            "randint()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Non-overlapping Random Ranges",
        "Source": "Tutorial Websites"
    },
    "3906": {
        "APIs": [
            "sort()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Nth smallest Greater than K",
        "Source": "Tutorial Websites"
    },
    "3907": {
        "APIs": [
            "min()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Number of positions where Substrings Match of Length K",
        "Source": "Tutorial Websites"
    },
    "3908": {
        "APIs": [
            "split()",
            "sort()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Numeric Sort in Mixed Pair String List",
        "Source": "Tutorial Websites"
    },
    "3909": {
        "APIs": [
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Occurrence counter in List of Records",
        "Source": "Tutorial Websites"
    },
    "3910": {
        "APIs": [
            "defaultdict()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Odd Frequency Characters",
        "Source": "Tutorial Websites"
    },
    "3911": {
        "APIs": [
            "enumerate()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Odd elements indices",
        "Source": "Tutorial Websites"
    },
    "3912": {
        "APIs": [
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Odd elements removal in List",
        "Source": "Tutorial Websites"
    },
    "3913": {
        "APIs": [
            "sum()",
            "map()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Odd or Even elements combinations Summations in Matrix",
        "Source": "Tutorial Websites"
    },
    "3914": {
        "APIs": [
            "dict()",
            "setdefault()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Order Tuples by List",
        "Source": "Tutorial Websites"
    },
    "3915": {
        "APIs": [
            "sorted()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Ordered tuples extraction",
        "Source": "Tutorial Websites"
    },
    "3916": {
        "APIs": [
            "append()",
            "product()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Pair elements with Rear element in Matrix Row",
        "Source": "Tutorial Websites"
    },
    "3917": {
        "APIs": [
            "extend()",
            "enumerate()",
            "defaultdict()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Pair lists elements to Dictionary",
        "Source": "Tutorial Websites"
    },
    "3918": {
        "APIs": [
            "max()",
            "combination()",
            "nlargest()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Pair with Maximum product",
        "Source": "Tutorial Websites"
    },
    "3919": {
        "APIs": [
            "append()",
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Paired Neighbors to Adjacency Dictionary",
        "Source": "Tutorial Websites"
    },
    "3920": {
        "APIs": [
            "set()",
            "intersection()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Paired elements grouping",
        "Source": "Tutorial Websites"
    },
    "3921": {
        "APIs": [
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Pairs with Sum equal to K in tuple list",
        "Source": "Tutorial Websites"
    },
    "3922": {
        "APIs": [
            "len()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Pairs with multiple similar values in dictionary",
        "Source": "Tutorial Websites"
    },
    "3923": {
        "APIs": [
            "zip()",
            "tuple()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Pairwise Addition in Tuples",
        "Source": "Tutorial Websites"
    },
    "3924": {
        "APIs": [
            "enumerate()",
            "join()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Phrase extraction in String",
        "Source": "Tutorial Websites"
    },
    "3925": {
        "APIs": [
            "count()",
            "min()",
            "set()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Possible Substring count from String",
        "Source": "Tutorial Websites"
    },
    "3926": {
        "APIs": [
            "startswith()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Prefix frequency in string List",
        "Source": "Tutorial Websites"
    },
    "3927": {
        "APIs": [
            "zip()",
            "all()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Prefix tuple records",
        "Source": "Tutorial Websites"
    },
    "3928": {
        "APIs": [
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Print the last word in a sentence",
        "Source": "Tutorial Websites"
    },
    "3929": {
        "APIs": [
            "zip()",
            "map()",
            "sum()",
            "reduce()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Product and Inter Summation dictionary values",
        "Source": "Tutorial Websites"
    },
    "3930": {
        "APIs": [
            "dict()",
            "get()",
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Product of Selective Tuple Keys",
        "Source": "Tutorial Websites"
    },
    "3931": {
        "APIs": [
            "range()",
            "len()",
            "append()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Product of consecutive pairs in list",
        "Source": "Tutorial Websites"
    },
    "3932": {
        "APIs": [
            "prod()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Product of elements using Index list",
        "Source": "Tutorial Websites"
    },
    "3933": {
        "APIs": [
            "reduce()",
            "pow()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Product of i^k in List",
        "Source": "Tutorial Websites"
    },
    "3934": {
        "APIs": [
            "keys()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Product of two Dictionary Keys",
        "Source": "Tutorial Websites"
    },
    "3935": {
        "APIs": [
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Raise elements of tuple as power to another tuple",
        "Source": "Tutorial Websites"
    },
    "3936": {
        "APIs": [
            "randrange()",
            "sum()",
            "random.sample()"
        ],
        "APIClasses": [
            "random"
        ],
        "OriginalQuery": "Python \u2013 Random Numbers Summation",
        "Source": "Tutorial Websites"
    },
    "3937": {
        "APIs": [
            "shuffle()",
            "replace()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Random Replacement of Word in String",
        "Source": "Tutorial Websites"
    },
    "3938": {
        "APIs": [
            "keys()",
            "random.randint()",
            "randint()"
        ],
        "APIClasses": [
            "random"
        ],
        "OriginalQuery": "Python \u2013 Random Sample Training and Test Data from dictionary",
        "Source": "Tutorial Websites"
    },
    "3939": {
        "APIs": [
            "randint()",
            "choice()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Random insertion of elements K times",
        "Source": "Tutorial Websites"
    },
    "3940": {
        "APIs": [
            "randrange()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Random range in list",
        "Source": "Tutorial Websites"
    },
    "3941": {
        "APIs": [
            "join()",
            "choice()",
            "upper()",
            "lower()",
            "map()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Random uppercase in Strings",
        "Source": "Tutorial Websites"
    },
    "3942": {
        "APIs": [
            "max()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Ranged Maximum Element in String List",
        "Source": "Tutorial Websites"
    },
    "3943": {
        "APIs": [
            "reverse()",
            "enumerate()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Rear Kth elements",
        "Source": "Tutorial Websites"
    },
    "3944": {
        "APIs": [
            "next()",
            "sorted()",
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Rear character String categorization",
        "Source": "Tutorial Websites"
    },
    "3945": {
        "APIs": [
            "map()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Rear element extraction from list of tuples records",
        "Source": "Tutorial Websites"
    },
    "3946": {
        "APIs": [
            "sum()",
            "mean()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Rear elements Average in List",
        "Source": "Tutorial Websites"
    },
    "3947": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Rear shift K in List",
        "Source": "Tutorial Websites"
    },
    "3948": {
        "APIs": [
            "keys()",
            "accumulate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Rearrange dictionary for consective value-keys",
        "Source": "Tutorial Websites"
    },
    "3949": {
        "APIs": [
            "len()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Rearrange elements second index greater than first",
        "Source": "Tutorial Websites"
    },
    "3950": {
        "APIs": [
            "index()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Rearrange list by other list order",
        "Source": "Tutorial Websites"
    },
    "3951": {
        "APIs": [
            "max()",
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Records Maxima in List of Tuples",
        "Source": "Tutorial Websites"
    },
    "3952": {
        "APIs": [
            "append()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Records with Value at K index",
        "Source": "Tutorial Websites"
    },
    "3953": {
        "APIs": [
            "slice()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Redistribute Trimmed Values",
        "Source": "Tutorial Websites"
    },
    "3954": {
        "APIs": [
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Reform K digit elements",
        "Source": "Tutorial Websites"
    },
    "3955": {
        "APIs": [
            "type()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Reinitialize Value lists to K in Dictionary",
        "Source": "Tutorial Websites"
    },
    "3956": {
        "APIs": [
            "set()",
            "chain.from_iterable()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python \u2013 Remove Columns of Duplicate Elements",
        "Source": "Tutorial Websites"
    },
    "3957": {
        "APIs": [
            "zip()",
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove Consecutive K element records",
        "Source": "Tutorial Websites"
    },
    "3958": {
        "APIs": [
            "split()",
            "replace()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove Dictionary Key Words",
        "Source": "Tutorial Websites"
    },
    "3959": {
        "APIs": [
            "dict()",
            "set()",
            "isdisjoint()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove Disjoint Tuple keys from Dictionary",
        "Source": "Tutorial Websites"
    },
    "3960": {
        "APIs": [
            "setdefault()",
            "all()",
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove Duplicate subset Tuples",
        "Source": "Tutorial Websites"
    },
    "3961": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove Elements in K distance with N",
        "Source": "Tutorial Websites"
    },
    "3962": {
        "APIs": [
            "dict()",
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove Equilength and Equisum Tuple Duplicates",
        "Source": "Tutorial Websites"
    },
    "3963": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove Initial character in String List",
        "Source": "Tutorial Websites"
    },
    "3964": {
        "APIs": [
            "tuple()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove K from Records",
        "Source": "Tutorial Websites"
    },
    "3965": {
        "APIs": [
            "isinstance()",
            "filter()",
            "dict()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove K valued key from Nested Dictionary",
        "Source": "Tutorial Websites"
    },
    "3966": {
        "APIs": [
            "dict()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove Keys with K value",
        "Source": "Tutorial Websites"
    },
    "3967": {
        "APIs": [
            "set()",
            "append()",
            "add()",
            "groupby()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove Kth Index Duplicates in Tuple",
        "Source": "Tutorial Websites"
    },
    "3968": {
        "APIs": [
            "keys()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove Kth key from dictionary",
        "Source": "Tutorial Websites"
    },
    "3969": {
        "APIs": [
            "re.sub()",
            "sub()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python \u2013 Remove N characters after K",
        "Source": "Tutorial Websites"
    },
    "3970": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove Negative Elements in List",
        "Source": "Tutorial Websites"
    },
    "3971": {
        "APIs": [
            "findall()",
            "search()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove Non-English characters Strings from List",
        "Source": "Tutorial Websites"
    },
    "3972": {
        "APIs": [
            "all()",
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove None Nested Records",
        "Source": "Tutorial Websites"
    },
    "3973": {
        "APIs": [
            "any()",
            "regex()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove Punctuation Tuples",
        "Source": "Tutorial Websites"
    },
    "3974": {
        "APIs": [
            "len()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove Rear K characters from String List",
        "Source": "Tutorial Websites"
    },
    "3975": {
        "APIs": [
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove Record if Nth Column is K",
        "Source": "Tutorial Websites"
    },
    "3976": {
        "APIs": [
            "set()",
            "tuple()",
            "sorted()",
            "frozenset()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove Similar Rows from Tuple Matrix",
        "Source": "Tutorial Websites"
    },
    "3977": {
        "APIs": [
            "remove()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove String from String List",
        "Source": "Tutorial Websites"
    },
    "3978": {
        "APIs": [
            "values()",
            "ChainMap()",
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove Top level from Dictionary",
        "Source": "Tutorial Websites"
    },
    "3979": {
        "APIs": [
            "all()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove Tuples from the List having every element as None",
        "Source": "Tutorial Websites"
    },
    "3980": {
        "APIs": [
            "filter()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove Tuples of Length K",
        "Source": "Tutorial Websites"
    },
    "3981": {
        "APIs": [
            "abs()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove Tuples with difference greater than K",
        "Source": "Tutorial Websites"
    },
    "3982": {
        "APIs": [
            "regex()",
            "replace()",
            "strip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove Units from Value List",
        "Source": "Tutorial Websites"
    },
    "3983": {
        "APIs": [
            "index()",
            "len()",
            "regex()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove after substring in String",
        "Source": "Tutorial Websites"
    },
    "3984": {
        "APIs": [
            "extend()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove all consonants from string",
        "Source": "Tutorial Websites"
    },
    "3985": {
        "APIs": [
            "split()",
            "enumerate()",
            "index()",
            "regex()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove all digits before given Number",
        "Source": "Tutorial Websites"
    },
    "3986": {
        "APIs": [
            "set()",
            "count()",
            "Counter()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove all duplicate occurring tuple records",
        "Source": "Tutorial Websites"
    },
    "3987": {
        "APIs": [
            "remove()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove alternate consecutive duplicates",
        "Source": "Tutorial Websites"
    },
    "3988": {
        "APIs": [
            "ord()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove characters greater than K",
        "Source": "Tutorial Websites"
    },
    "3989": {
        "APIs": [
            "append()",
            "index()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove characters till K element",
        "Source": "Tutorial Websites"
    },
    "3990": {
        "APIs": [
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove dictionary from a list of dictionaries if a particular value is not present",
        "Source": "Tutorial Websites"
    },
    "3991": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove dictionary if given key\u2019s value is N",
        "Source": "Tutorial Websites"
    },
    "3992": {
        "APIs": [
            "replace()",
            "re.sub()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python \u2013 Remove double quotes from dictionary keys",
        "Source": "Tutorial Websites"
    },
    "3993": {
        "APIs": [
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove duplicate values across Dictionary Values",
        "Source": "Tutorial Websites"
    },
    "3994": {
        "APIs": [
            "dict()",
            "items()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove duplicate values in dictionary",
        "Source": "Tutorial Websites"
    },
    "3995": {
        "APIs": [
            "set()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove duplicate words from Strings in List",
        "Source": "Tutorial Websites"
    },
    "3996": {
        "APIs": [
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove elements at Indices in List",
        "Source": "Tutorial Websites"
    },
    "3997": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove empty List from List",
        "Source": "Tutorial Websites"
    },
    "3998": {
        "APIs": [
            "items()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove empty value types in dictionaries list",
        "Source": "Tutorial Websites"
    },
    "3999": {
        "APIs": [
            "pop()",
            "deque()",
            "popleft()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove first element of list",
        "Source": "Tutorial Websites"
    },
    "4000": {
        "APIs": [
            "index()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove first occurrence of K in Tuple",
        "Source": "Tutorial Websites"
    },
    "4001": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove front K characters from each string in String List",
        "Source": "Tutorial Websites"
    },
    "4002": {
        "APIs": [
            "replace()",
            "translate()",
            "ord()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove given character from first element of Tuple",
        "Source": "Tutorial Websites"
    },
    "4003": {
        "APIs": [
            "any()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove index ranges from String",
        "Source": "Tutorial Websites"
    },
    "4004": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove keys with Values Greater than K ( Including mixed values )",
        "Source": "Tutorial Websites"
    },
    "4005": {
        "APIs": [
            "any()",
            "dict()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove keys with substring values",
        "Source": "Tutorial Websites"
    },
    "4006": {
        "APIs": [
            "lstrip()",
            "startswith()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove leading 0 from Strings List",
        "Source": "Tutorial Websites"
    },
    "4007": {
        "APIs": [
            "isintance()",
            "enumerate()",
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove nested records from tuple",
        "Source": "Tutorial Websites"
    },
    "4008": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove non-increasing elements",
        "Source": "Tutorial Websites"
    },
    "4009": {
        "APIs": [
            "set()",
            "len()",
            "regex()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove numbers with repeating digits",
        "Source": "Tutorial Websites"
    },
    "4010": {
        "APIs": [
            "isinstance()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove particular data type Elements from Tuple",
        "Source": "Tutorial Websites"
    },
    "4011": {
        "APIs": [
            "pop()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove positional rows",
        "Source": "Tutorial Websites"
    },
    "4012": {
        "APIs": [
            "pop()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove rear element from list",
        "Source": "Tutorial Websites"
    },
    "4013": {
        "APIs": [
            "keys()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove records if Key not present",
        "Source": "Tutorial Websites"
    },
    "4014": {
        "APIs": [
            "any()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove rows with Numbers",
        "Source": "Tutorial Websites"
    },
    "4015": {
        "APIs": [
            "zip()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove similar index elements in Strings",
        "Source": "Tutorial Websites"
    },
    "4016": {
        "APIs": [
            "str()",
            "replace()",
            "join()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove space between tuple elements",
        "Source": "Tutorial Websites"
    },
    "4017": {
        "APIs": [
            "any()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove strings with any non-required character",
        "Source": "Tutorial Websites"
    },
    "4018": {
        "APIs": [
            "remove()",
            "endswith()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove suffix from string list",
        "Source": "Tutorial Websites"
    },
    "4019": {
        "APIs": [
            "count()",
            "len()",
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove the row if all elements equal to N",
        "Source": "Tutorial Websites"
    },
    "4020": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove unwanted Keys associations",
        "Source": "Tutorial Websites"
    },
    "4021": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Remove words containing list characters",
        "Source": "Tutorial Websites"
    },
    "4022": {
        "APIs": [
            "dict()",
            "filter()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Removing Nested None Dictionaries",
        "Source": "Tutorial Websites"
    },
    "4023": {
        "APIs": [
            "Counter()",
            "items()",
            "elements()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Reorder for consecutive elements",
        "Source": "Tutorial Websites"
    },
    "4024": {
        "APIs": [
            "enumerate()",
            "range()",
            "itertools.chain.from_iterable()",
            "itertools.repeat()"
        ],
        "APIClasses": [
            "itertools.chain",
            "itertools"
        ],
        "OriginalQuery": "Python \u2013 Repeat Alternate Elements in list",
        "Source": "Tutorial Websites"
    },
    "4025": {
        "APIs": [
            "sub()",
            "maketrans()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Replace Consonents by i, Vowels by j",
        "Source": "Tutorial Websites"
    },
    "4026": {
        "APIs": [
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Replace Different characters in String at Once",
        "Source": "Tutorial Websites"
    },
    "4027": {
        "APIs": [
            "replace()",
            "split()",
            "join()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Replace K with Multiple values",
        "Source": "Tutorial Websites"
    },
    "4028": {
        "APIs": [
            "map()",
            "filter()",
            "list()",
            "max()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Replace Non-Maximum Records",
        "Source": "Tutorial Websites"
    },
    "4029": {
        "APIs": [
            "map()",
            "lambda()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Replace Non-None with K",
        "Source": "Tutorial Websites"
    },
    "4030": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Replace None with Empty Dictionary",
        "Source": "Tutorial Websites"
    },
    "4031": {
        "APIs": [
            "get()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Replace String by Kth Dictionary value",
        "Source": "Tutorial Websites"
    },
    "4032": {
        "APIs": [
            "replace()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Replace Substrings from String List",
        "Source": "Tutorial Websites"
    },
    "4033": {
        "APIs": [
            "replace()",
            "isdigit()",
            "regex()",
            "sub()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Replace all numbers by K in given String",
        "Source": "Tutorial Websites"
    },
    "4034": {
        "APIs": [
            "maketrans()",
            "translate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Replace all occurrences of a substring in a string",
        "Source": "Tutorial Websites"
    },
    "4035": {
        "APIs": [
            "enumerate()",
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Replace all repeated occurrences with N",
        "Source": "Tutorial Websites"
    },
    "4036": {
        "APIs": [
            "split()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Replace all words except the given word",
        "Source": "Tutorial Websites"
    },
    "4037": {
        "APIs": [
            "replace()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Replace delimiter",
        "Source": "Tutorial Websites"
    },
    "4038": {
        "APIs": [
            "split()",
            "enumerate()",
            "keys()",
            "index()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Replace duplicate Occurrence in String",
        "Source": "Tutorial Websites"
    },
    "4039": {
        "APIs": [
            "groupby()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Replace identical consecutive elements in list with product of the frequency and Item",
        "Source": "Tutorial Websites"
    },
    "4040": {
        "APIs": [
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Replace index elements with elements in Other List",
        "Source": "Tutorial Websites"
    },
    "4041": {
        "APIs": [
            "join()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Replace multiple words with K",
        "Source": "Tutorial Websites"
    },
    "4042": {
        "APIs": [
            "replace()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Replace occurrences by K except first character",
        "Source": "Tutorial Websites"
    },
    "4043": {
        "APIs": [
            "index()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Replace sublist from Initial element",
        "Source": "Tutorial Websites"
    },
    "4044": {
        "APIs": [
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Replace to K at ith Index in String",
        "Source": "Tutorial Websites"
    },
    "4045": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Replace value by Kth index value in Dictionary List",
        "Source": "Tutorial Websites"
    },
    "4046": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Replace vowels by next vowel",
        "Source": "Tutorial Websites"
    },
    "4047": {
        "APIs": [
            "replace()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Replace vowels in a string with a specific character K",
        "Source": "Tutorial Websites"
    },
    "4048": {
        "APIs": [
            "split()",
            "get()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Replace words from Dictionary",
        "Source": "Tutorial Websites"
    },
    "4049": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Replacing by Greatest Neighbour in list",
        "Source": "Tutorial Websites"
    },
    "4050": {
        "APIs": [
            "float()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Resolve Float Keys in Dictionary",
        "Source": "Tutorial Websites"
    },
    "4051": {
        "APIs": [
            "items()",
            "pop()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Resolve Transitivity in Dictionary",
        "Source": "Tutorial Websites"
    },
    "4052": {
        "APIs": [
            "defaultdict()",
            "defauldict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Restrict Elements Frequency in List",
        "Source": "Tutorial Websites"
    },
    "4053": {
        "APIs": [
            "keys()",
            "defaultdict()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Restrict Tuples by frequency of first element\u2019s value",
        "Source": "Tutorial Websites"
    },
    "4054": {
        "APIs": [
            "zip()",
            "compress()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Retain K match index values from other list",
        "Source": "Tutorial Websites"
    },
    "4055": {
        "APIs": [
            "join()",
            "isdigit()",
            "regex()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Retain Numbers in String",
        "Source": "Tutorial Websites"
    },
    "4056": {
        "APIs": [
            "any()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Retain all K elements Rows",
        "Source": "Tutorial Websites"
    },
    "4057": {
        "APIs": [
            "len()",
            "ljust()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Retain first N Elements of a String and Replace the Remaining by K",
        "Source": "Tutorial Websites"
    },
    "4058": {
        "APIs": [
            "items()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Retain list elements value items",
        "Source": "Tutorial Websites"
    },
    "4059": {
        "APIs": [
            "count()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Retain records with N occurrences of K",
        "Source": "Tutorial Websites"
    },
    "4060": {
        "APIs": [
            "OrderedDict()",
            "reversed()",
            "items()",
            "list()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Reverse Dictionary Keys Order",
        "Source": "Tutorial Websites"
    },
    "4061": {
        "APIs": [
            "reversed()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Reverse Range in String List",
        "Source": "Tutorial Websites"
    },
    "4062": {
        "APIs": [
            "sort()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Reverse Row sort in Lists of List",
        "Source": "Tutorial Websites"
    },
    "4063": {
        "APIs": [
            "maketrans()",
            "upper()",
            "translate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Reverse Shift characters by K",
        "Source": "Tutorial Websites"
    },
    "4064": {
        "APIs": [
            "join()",
            "sorted()",
            "reduce()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Reverse Sort a String",
        "Source": "Tutorial Websites"
    },
    "4065": {
        "APIs": [
            "split()",
            "groupby()",
            "isalnum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Reverse String except punctuations",
        "Source": "Tutorial Websites"
    },
    "4066": {
        "APIs": [
            "sorted()",
            "sort()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Reverse sort Matrix Row by Kth Column",
        "Source": "Tutorial Websites"
    },
    "4067": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Right and Left Shift characters in String",
        "Source": "Tutorial Websites"
    },
    "4068": {
        "APIs": [
            "items()",
            "deque.rotate()"
        ],
        "APIClasses": [
            "deque"
        ],
        "OriginalQuery": "Python \u2013 Rotate dictionary by K",
        "Source": "Tutorial Websites"
    },
    "4069": {
        "APIs": [
            "round()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Round Off Dictionary Values to K decimals",
        "Source": "Tutorial Websites"
    },
    "4070": {
        "APIs": [
            "enumerate()",
            "append()",
            "map()",
            "sum()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Row Summation of Like Index Product",
        "Source": "Tutorial Websites"
    },
    "4071": {
        "APIs": [
            "reduce()",
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Row with Maximum Product",
        "Source": "Tutorial Websites"
    },
    "4072": {
        "APIs": [
            "max()",
            "itemgetter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Row with Maximum Record Element",
        "Source": "Tutorial Websites"
    },
    "4073": {
        "APIs": [
            "reduce()",
            "min()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Row with Minimum Sum in Matrix",
        "Source": "Tutorial Websites"
    },
    "4074": {
        "APIs": [
            "min()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Row with Minimum difference in extreme values",
        "Source": "Tutorial Websites"
    },
    "4075": {
        "APIs": [
            "enumerate()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Row-wise element Addition in Tuple Matrix",
        "Source": "Tutorial Websites"
    },
    "4076": {
        "APIs": [
            "sum()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Rows intersection with K",
        "Source": "Tutorial Websites"
    },
    "4077": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Rows with all List elements",
        "Source": "Tutorial Websites"
    },
    "4078": {
        "APIs": [
            "append()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Scoring Matrix using Dictionary",
        "Source": "Tutorial Websites"
    },
    "4079": {
        "APIs": [
            "split()",
            "map()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Segregate elements by delimiter",
        "Source": "Tutorial Websites"
    },
    "4080": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Selective Key Values Summation",
        "Source": "Tutorial Websites"
    },
    "4081": {
        "APIs": [
            "endswith()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Selective consecutive Suffix Join",
        "Source": "Tutorial Websites"
    },
    "4082": {
        "APIs": [
            "re.findall()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python \u2013 Selectively Split in Strings",
        "Source": "Tutorial Websites"
    },
    "4083": {
        "APIs": [
            "append()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Separate first word from String",
        "Source": "Tutorial Websites"
    },
    "4084": {
        "APIs": [
            "enumerate()",
            "dict()",
            "split()",
            "zip()",
            "count()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sequence Assignment to Words",
        "Source": "Tutorial Websites"
    },
    "4085": {
        "APIs": [
            "shuffle()",
            "zip()",
            "dict()",
            "sample()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Shuffle dictionary Values",
        "Source": "Tutorial Websites"
    },
    "4086": {
        "APIs": [
            "range()",
            "len()",
            "append()",
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Similar Consecutive elements frequency",
        "Source": "Tutorial Websites"
    },
    "4087": {
        "APIs": [
            "sorted()",
            "split()",
            "set()",
            "sort()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Similar characters Strings comparison",
        "Source": "Tutorial Websites"
    },
    "4088": {
        "APIs": [
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Similar index elements Matrix",
        "Source": "Tutorial Websites"
    },
    "4089": {
        "APIs": [
            "sum()",
            "zip()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Similar index elements frequency",
        "Source": "Tutorial Websites"
    },
    "4090": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Similar index pairs in Tuple lists",
        "Source": "Tutorial Websites"
    },
    "4091": {
        "APIs": [
            "enumerate()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Similar other index element of K",
        "Source": "Tutorial Websites"
    },
    "4092": {
        "APIs": [
            "range()",
            "len()",
            "rfind()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Slice from Last Occurrence of K",
        "Source": "Tutorial Websites"
    },
    "4093": {
        "APIs": [
            "itemgetter()",
            "items()",
            "sorted()",
            "nsmallest()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Smallest K values in Dictionary",
        "Source": "Tutorial Websites"
    },
    "4094": {
        "APIs": [
            "len()",
            "min()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Smallest Length String",
        "Source": "Tutorial Websites"
    },
    "4095": {
        "APIs": [
            "sorted()",
            "itertools.permutation()",
            "join()",
            "min()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python \u2013 Smallest integer possible from combination of list elements",
        "Source": "Tutorial Websites"
    },
    "4096": {
        "APIs": [
            "len()",
            "sort()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort Dictionaries by Size",
        "Source": "Tutorial Websites"
    },
    "4097": {
        "APIs": [
            "sort()",
            "get()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort Dictionary List by Key\u2019s ith Index value",
        "Source": "Tutorial Websites"
    },
    "4098": {
        "APIs": [
            "sorted()",
            "abs()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort Dictionary by Value Difference",
        "Source": "Tutorial Websites"
    },
    "4099": {
        "APIs": [
            "sorted()",
            "sum()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort Dictionary by Values Summation",
        "Source": "Tutorial Websites"
    },
    "4100": {
        "APIs": [
            "sorted()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort Dictionary by Values and Keys",
        "Source": "Tutorial Websites"
    },
    "4101": {
        "APIs": [
            "sorted()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort Dictionary by key-value Summation",
        "Source": "Tutorial Websites"
    },
    "4102": {
        "APIs": [
            "next()",
            "sorted()",
            "insert()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort Dictionary ignoring Key",
        "Source": "Tutorial Websites"
    },
    "4103": {
        "APIs": [
            "sorted()",
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort Dictionary key and values List",
        "Source": "Tutorial Websites"
    },
    "4104": {
        "APIs": [
            "sorted()",
            "get()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort List by Dictionary values",
        "Source": "Tutorial Websites"
    },
    "4105": {
        "APIs": [
            "map()",
            "str()",
            "ljust()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort List items on basis of their Digits",
        "Source": "Tutorial Websites"
    },
    "4106": {
        "APIs": [
            "max()",
            "sum()",
            "sort()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort Matrix by K Sized Subarray Maximum Sum",
        "Source": "Tutorial Websites"
    },
    "4107": {
        "APIs": [
            "sort()",
            "len()",
            "max()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort Matrix by Maximum String Length",
        "Source": "Tutorial Websites"
    },
    "4108": {
        "APIs": [
            "sort()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort Matrix by None frequency",
        "Source": "Tutorial Websites"
    },
    "4109": {
        "APIs": [
            "sort()",
            "len()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort Matrix by Number of elements greater than its previous element",
        "Source": "Tutorial Websites"
    },
    "4110": {
        "APIs": [
            "reversed()",
            "len()",
            "sort()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort Matrix by Palindrome count",
        "Source": "Tutorial Websites"
    },
    "4111": {
        "APIs": [
            "sort()",
            "median()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort Matrix by Row Median",
        "Source": "Tutorial Websites"
    },
    "4112": {
        "APIs": [
            "sort()",
            "len()",
            "sum()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort Matrix by total characters",
        "Source": "Tutorial Websites"
    },
    "4113": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort Nested keys by Value",
        "Source": "Tutorial Websites"
    },
    "4114": {
        "APIs": [
            "sort()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort Records by Kth Index List",
        "Source": "Tutorial Websites"
    },
    "4115": {
        "APIs": [
            "sorted()",
            "zip()",
            "regex()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort String by Custom Integer Substrings",
        "Source": "Tutorial Websites"
    },
    "4116": {
        "APIs": [
            "sorted()",
            "count()",
            "sort()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort String list by K character frequency",
        "Source": "Tutorial Websites"
    },
    "4117": {
        "APIs": [
            "sort()",
            "islower()",
            "isupper()",
            "abs()",
            "sorted()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort Strings by Case difference",
        "Source": "Tutorial Websites"
    },
    "4118": {
        "APIs": [
            "sort()",
            "max()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort Strings by Maximum ASCII value",
        "Source": "Tutorial Websites"
    },
    "4119": {
        "APIs": [
            "sort()",
            "Counter()",
            "max()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort Strings by maximum frequency character",
        "Source": "Tutorial Websites"
    },
    "4120": {
        "APIs": [
            "sort()",
            "len()",
            "sum()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort Tuples by Total digits",
        "Source": "Tutorial Websites"
    },
    "4121": {
        "APIs": [
            "sort()",
            "len()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort by Factor count",
        "Source": "Tutorial Websites"
    },
    "4122": {
        "APIs": [
            "sorted()",
            "defaultdict()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort by Frequency of second element in Tuple List",
        "Source": "Tutorial Websites"
    },
    "4123": {
        "APIs": [
            "max()",
            "sort()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort by Maximum digit in Element",
        "Source": "Tutorial Websites"
    },
    "4124": {
        "APIs": [
            "sort()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort by Rear Character in Strings List",
        "Source": "Tutorial Websites"
    },
    "4125": {
        "APIs": [
            "sort()",
            "str()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort by Units Digit in List",
        "Source": "Tutorial Websites"
    },
    "4126": {
        "APIs": [
            "sort()",
            "isupper()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort by Uppercase Frequency",
        "Source": "Tutorial Websites"
    },
    "4127": {
        "APIs": [
            "str()",
            "count()",
            "sort()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort by a partciular digit count in elements",
        "Source": "Tutorial Websites"
    },
    "4128": {
        "APIs": [
            "sort()",
            "sum()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort by range inclusion",
        "Source": "Tutorial Websites"
    },
    "4129": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort dictionaries list by Key\u2019s Value list index",
        "Source": "Tutorial Websites"
    },
    "4130": {
        "APIs": [
            "sorted()",
            "sort()",
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort dictionary by Tuple Key Product",
        "Source": "Tutorial Websites"
    },
    "4131": {
        "APIs": [
            "sorted()",
            "max()",
            "min()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort dictionary by max/min element in value list",
        "Source": "Tutorial Websites"
    },
    "4132": {
        "APIs": [
            "sort()",
            "re.findall()",
            "findall()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python \u2013 Sort given list of strings by part the numeric part of string",
        "Source": "Tutorial Websites"
    },
    "4133": {
        "APIs": [
            "sorted()",
            "index()",
            "keys()",
            "sort()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort list of Single Item dictionaries according to custom ordering",
        "Source": "Tutorial Websites"
    },
    "4134": {
        "APIs": [
            "sort()",
            "reverse()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort on basis of reverse Strings",
        "Source": "Tutorial Websites"
    },
    "4135": {
        "APIs": [
            "sort()",
            "len()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort row by K multiples",
        "Source": "Tutorial Websites"
    },
    "4136": {
        "APIs": [
            "sort()",
            "count()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort rows by Frequency of K",
        "Source": "Tutorial Websites"
    },
    "4137": {
        "APIs": [
            "sorted()",
            "join()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sort words separated by Delimiter",
        "Source": "Tutorial Websites"
    },
    "4138": {
        "APIs": [
            "isinstance()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sorted Nested Keys in Dictionary",
        "Source": "Tutorial Websites"
    },
    "4139": {
        "APIs": [
            "zip()",
            "sort()",
            "keys()",
            "values()",
            "map()",
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sorted order Dictionary items pairing",
        "Source": "Tutorial Websites"
    },
    "4140": {
        "APIs": [
            "join()",
            "Counter()",
            "chain.from_iterable()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python \u2013 Specific Characters Frequency in String List",
        "Source": "Tutorial Websites"
    },
    "4141": {
        "APIs": [
            "range()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Specific Range Addition in List",
        "Source": "Tutorial Websites"
    },
    "4142": {
        "APIs": [
            "upper()",
            "enumerate()",
            "capitalize()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Specific case change in String List",
        "Source": "Tutorial Websites"
    },
    "4143": {
        "APIs": [
            "enumerate()",
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Split Dictionary values on size limit of values",
        "Source": "Tutorial Websites"
    },
    "4144": {
        "APIs": [
            "int()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Split Numeric String into K digit integers",
        "Source": "Tutorial Websites"
    },
    "4145": {
        "APIs": [
            "split()",
            "extend()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Split String of list on K character",
        "Source": "Tutorial Websites"
    },
    "4146": {
        "APIs": [
            "findall()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Split String on all punctuations",
        "Source": "Tutorial Websites"
    },
    "4147": {
        "APIs": [
            "regex()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Split String on vowels",
        "Source": "Tutorial Websites"
    },
    "4148": {
        "APIs": [
            "startswith()",
            "zip_longest()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Split Strings on Prefix Occurrence",
        "Source": "Tutorial Websites"
    },
    "4149": {
        "APIs": [
            "join()",
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Split a String by Custom Lengths",
        "Source": "Tutorial Websites"
    },
    "4150": {
        "APIs": [
            "isinstance()",
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Split heterogeneous type list",
        "Source": "Tutorial Websites"
    },
    "4151": {
        "APIs": [
            "map()",
            "list()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Split in Nested tuples",
        "Source": "Tutorial Websites"
    },
    "4152": {
        "APIs": [
            "re.split()",
            "split()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python \u2013 Split strings ignoring the space formatting characters",
        "Source": "Tutorial Websites"
    },
    "4153": {
        "APIs": [
            "zip()",
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Squash consecutive values of K",
        "Source": "Tutorial Websites"
    },
    "4154": {
        "APIs": [
            "index()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Start and End Indices of words from list in String",
        "Source": "Tutorial Websites"
    },
    "4155": {
        "APIs": [
            "defaultdict()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Step Frequency of elements in List",
        "Source": "Tutorial Websites"
    },
    "4156": {
        "APIs": [
            "\u2018()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Store Function as dictionary value",
        "Source": "Tutorial Websites"
    },
    "4157": {
        "APIs": [
            "dict()",
            "enumerate()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Storing Elements Greater than K as Dictionary",
        "Source": "Tutorial Websites"
    },
    "4158": {
        "APIs": [
            "int()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 String Integer Product",
        "Source": "Tutorial Websites"
    },
    "4159": {
        "APIs": [
            "join()",
            "chain()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 String Matrix Concatenation",
        "Source": "Tutorial Websites"
    },
    "4160": {
        "APIs": [
            "append()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 String Repetition and spacing in List",
        "Source": "Tutorial Websites"
    },
    "4161": {
        "APIs": [
            "type()",
            "join()",
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 String concatenation in Heterogenous list",
        "Source": "Tutorial Websites"
    },
    "4162": {
        "APIs": [
            "set()",
            "symmetric_difference()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 String uncommon characters",
        "Source": "Tutorial Websites"
    },
    "4163": {
        "APIs": [
            "max()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 String with most unique characters",
        "Source": "Tutorial Websites"
    },
    "4164": {
        "APIs": [
            "len()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Strings with Maximum K length",
        "Source": "Tutorial Websites"
    },
    "4165": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Strings with all given List characters",
        "Source": "Tutorial Websites"
    },
    "4166": {
        "APIs": [
            "punctuation()",
            "strip()",
            "split()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Strip front and rear Punctuations from given String",
        "Source": "Tutorial Websites"
    },
    "4167": {
        "APIs": [
            "itertools.islice()",
            "max()",
            "islice()",
            "zip()",
            "accumulate()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Python \u2013 Sublist Maximum in custom sliced List",
        "Source": "Tutorial Websites"
    },
    "4168": {
        "APIs": [
            "ord()",
            "chr()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Subscript Dictionary",
        "Source": "Tutorial Websites"
    },
    "4169": {
        "APIs": [
            "set()",
            "add()",
            "append()",
            "defaultdict()",
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Substitute K for first occurrence of elements",
        "Source": "Tutorial Websites"
    },
    "4170": {
        "APIs": [
            "enumerate()",
            "len()",
            "int()",
            "join()",
            "str()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Substitute digits using Dictionary",
        "Source": "Tutorial Websites"
    },
    "4171": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Substitute prefix part of List",
        "Source": "Tutorial Websites"
    },
    "4172": {
        "APIs": [
            "regex()",
            "defaultdict()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Substring Suffix Frequency",
        "Source": "Tutorial Websites"
    },
    "4173": {
        "APIs": [
            "append()",
            "join()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Substring concatenation by Separator",
        "Source": "Tutorial Websites"
    },
    "4174": {
        "APIs": [
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Substring presence in Strings List",
        "Source": "Tutorial Websites"
    },
    "4175": {
        "APIs": [
            "tuple()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Subtract K from tuples list",
        "Source": "Tutorial Websites"
    },
    "4176": {
        "APIs": [
            "count()",
            "re.findall()",
            "findall()",
            "Counter()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python \u2013 Successive Characters Frequency",
        "Source": "Tutorial Websites"
    },
    "4177": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Successive element pairing",
        "Source": "Tutorial Websites"
    },
    "4178": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Suffix List Sum",
        "Source": "Tutorial Websites"
    },
    "4179": {
        "APIs": [
            "reverse()",
            "prod()",
            "range()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Suffix Product in list",
        "Source": "Tutorial Websites"
    },
    "4180": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sum elements matching condition",
        "Source": "Tutorial Websites"
    },
    "4181": {
        "APIs": [
            "reduce()",
            "map()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sum of Cubes in List",
        "Source": "Tutorial Websites"
    },
    "4182": {
        "APIs": [
            "sum()",
            "chain()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sum of different length Lists of list",
        "Source": "Tutorial Websites"
    },
    "4183": {
        "APIs": [
            "sum()",
            "count()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sum of each List element occurrence in another",
        "Source": "Tutorial Websites"
    },
    "4184": {
        "APIs": [
            "list()",
            "sum()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Sum of tuple elements",
        "Source": "Tutorial Websites"
    },
    "4185": {
        "APIs": [
            "int()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Summation Grouping in Dictionary List",
        "Source": "Tutorial Websites"
    },
    "4186": {
        "APIs": [
            "sum()",
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Summation Matrix columns",
        "Source": "Tutorial Websites"
    },
    "4187": {
        "APIs": [
            "sum()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Summation after elements removal",
        "Source": "Tutorial Websites"
    },
    "4188": {
        "APIs": [
            "reduce()",
            "add()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Summation in Dual element Records List",
        "Source": "Tutorial Websites"
    },
    "4189": {
        "APIs": [
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Summation of Custom nested keys in Dictionary",
        "Source": "Tutorial Websites"
    },
    "4190": {
        "APIs": [
            "sum()",
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Summation of Unique elements",
        "Source": "Tutorial Websites"
    },
    "4191": {
        "APIs": [
            "defaultdict()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Summation of consecutive elements power",
        "Source": "Tutorial Websites"
    },
    "4192": {
        "APIs": [
            "sum()",
            "float()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Summation of float string list",
        "Source": "Tutorial Websites"
    },
    "4193": {
        "APIs": [
            "sum()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Summation of kth column in a matrix",
        "Source": "Tutorial Websites"
    },
    "4194": {
        "APIs": [
            "tuple()",
            "sum()",
            "zip()",
            "values()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Summation of tuple dictionary values",
        "Source": "Tutorial Websites"
    },
    "4195": {
        "APIs": [
            "index()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Surrounding elements to K",
        "Source": "Tutorial Websites"
    },
    "4196": {
        "APIs": [
            "replace()",
            "join()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Swap elements in String list",
        "Source": "Tutorial Websites"
    },
    "4197": {
        "APIs": [
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Swap ith and jth key\u2019s value in dictionary",
        "Source": "Tutorial Websites"
    },
    "4198": {
        "APIs": [
            "items()",
            "defaultdict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Swapping Hierarchy in Nested Dictionaries",
        "Source": "Tutorial Websites"
    },
    "4199": {
        "APIs": [
            "keys()",
            "set.symmetric_difference()",
            "symmetric_difference()"
        ],
        "APIClasses": [
            "set"
        ],
        "OriginalQuery": "Python \u2013 Symmetric Difference of Dictionaries",
        "Source": "Tutorial Websites"
    },
    "4200": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Synchronized Sorting of Keys",
        "Source": "Tutorial Websites"
    },
    "4201": {
        "APIs": [
            "map()",
            "zip()",
            "enumerate()",
            "split()",
            "chain.from_iterables()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python \u2013 Synchronized Split list with other",
        "Source": "Tutorial Websites"
    },
    "4202": {
        "APIs": [
            "all()",
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test Boolean Value of Dictionary",
        "Source": "Tutorial Websites"
    },
    "4203": {
        "APIs": [
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test Common Elements Order",
        "Source": "Tutorial Websites"
    },
    "4204": {
        "APIs": [
            "chain.from_iterable()",
            "all()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python \u2013 Test Consecutive Element Matrix",
        "Source": "Tutorial Websites"
    },
    "4205": {
        "APIs": [
            "any()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test K in Range",
        "Source": "Tutorial Websites"
    },
    "4206": {
        "APIs": [
            "items()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test Kth index in Dictionary value list",
        "Source": "Tutorial Websites"
    },
    "4207": {
        "APIs": [
            "any()",
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test Record existence in Dictionary",
        "Source": "Tutorial Websites"
    },
    "4208": {
        "APIs": [
            "isinstance()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test Similar Data Type in Tuple",
        "Source": "Tutorial Websites"
    },
    "4209": {
        "APIs": [
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test String in Character List and vice-versa",
        "Source": "Tutorial Websites"
    },
    "4210": {
        "APIs": [
            "any()",
            "values()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test for Empty Dictionary Value List",
        "Source": "Tutorial Websites"
    },
    "4211": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test for Even values dictionary values lists",
        "Source": "Tutorial Websites"
    },
    "4212": {
        "APIs": [
            "items()",
            "extend()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test for Incrementing Dictionary",
        "Source": "Tutorial Websites"
    },
    "4213": {
        "APIs": [
            "set()",
            "setdefault()",
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test for Unique Frequencies",
        "Source": "Tutorial Websites"
    },
    "4214": {
        "APIs": [
            "all()",
            "count()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test for Word construction from character list",
        "Source": "Tutorial Websites"
    },
    "4215": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test for all Even elements in the List for the given Range",
        "Source": "Tutorial Websites"
    },
    "4216": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test for desired String Lengths",
        "Source": "Tutorial Websites"
    },
    "4217": {
        "APIs": [
            "all()",
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test for empty Nested Records",
        "Source": "Tutorial Websites"
    },
    "4218": {
        "APIs": [
            "all()",
            "zip()",
            "reduce()",
            "lambdareduce()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test for strictly decreasing list",
        "Source": "Tutorial Websites"
    },
    "4219": {
        "APIs": [
            "range()",
            "len()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test if K occurs N consecutive times",
        "Source": "Tutorial Websites"
    },
    "4220": {
        "APIs": [
            "isdigit()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test if Kth character is digit in String",
        "Source": "Tutorial Websites"
    },
    "4221": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test if List contains elements in Range",
        "Source": "Tutorial Websites"
    },
    "4222": {
        "APIs": [
            "Counter()",
            "sorted()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test if Rows have Similar frequency",
        "Source": "Tutorial Websites"
    },
    "4223": {
        "APIs": [
            "isupper()",
            "any()",
            "regex()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test if String contains any Uppercase character",
        "Source": "Tutorial Websites"
    },
    "4224": {
        "APIs": [
            "range()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test if Substring occurs in specific position",
        "Source": "Tutorial Websites"
    },
    "4225": {
        "APIs": [
            "any()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test if Tuple contains K",
        "Source": "Tutorial Websites"
    },
    "4226": {
        "APIs": [
            "sum()",
            "values()",
            "keys()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test if Values Sum is Greater than Keys Sum in dictionary",
        "Source": "Tutorial Websites"
    },
    "4227": {
        "APIs": [
            "bool()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test if a list is completely True",
        "Source": "Tutorial Websites"
    },
    "4228": {
        "APIs": [
            "set()",
            "values()",
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test if all Values are Same in Dictionary",
        "Source": "Tutorial Websites"
    },
    "4229": {
        "APIs": [
            "map()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test if all digits starts from % K digit",
        "Source": "Tutorial Websites"
    },
    "4230": {
        "APIs": [
            "set()",
            "len()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test if all elements are unique in columns in a Matrix",
        "Source": "Tutorial Websites"
    },
    "4231": {
        "APIs": [
            "isinstance()",
            "all()",
            "instance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test if all elements in list are of same type",
        "Source": "Tutorial Websites"
    },
    "4232": {
        "APIs": [
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test if all rows contain any common element with other Matrix",
        "Source": "Tutorial Websites"
    },
    "4233": {
        "APIs": [
            "set()",
            "len()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test if common values are greater than K",
        "Source": "Tutorial Websites"
    },
    "4234": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test if custom keys equal to K in dictionary",
        "Source": "Tutorial Websites"
    },
    "4235": {
        "APIs": [
            "any()",
            "items()",
            "chain.from_iterables()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python \u2013 Test if element is part of dictionary",
        "Source": "Tutorial Websites"
    },
    "4236": {
        "APIs": [
            "min()",
            "max()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test if elements of list are in Min/Max range from other list",
        "Source": "Tutorial Websites"
    },
    "4237": {
        "APIs": [
            "enumerate()",
            "tee()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test if greater than preceding element in Tuple List",
        "Source": "Tutorial Websites"
    },
    "4238": {
        "APIs": [
            "reversed()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test if list is Palindrome",
        "Source": "Tutorial Websites"
    },
    "4239": {
        "APIs": [
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test if tuple list has Single element",
        "Source": "Tutorial Websites"
    },
    "4240": {
        "APIs": [
            "map()",
            "all()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test rear digit match in all list elements",
        "Source": "Tutorial Websites"
    },
    "4241": {
        "APIs": [
            "join()",
            "all()",
            "next()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Test substring order",
        "Source": "Tutorial Websites"
    },
    "4242": {
        "APIs": [
            "split()",
            "int()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Time Strings to Seconds in Tuple List",
        "Source": "Tutorial Websites"
    },
    "4243": {
        "APIs": [
            "count()",
            "set()",
            "Counter()",
            "sum()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Total equal pairs in List",
        "Source": "Tutorial Websites"
    },
    "4244": {
        "APIs": [
            "splitlines()",
            "strip()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Triple quote String concatenation",
        "Source": "Tutorial Websites"
    },
    "4245": {
        "APIs": [
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Truth values deletion in List",
        "Source": "Tutorial Websites"
    },
    "4246": {
        "APIs": [
            "set()",
            "sorted()",
            "map()",
            "frozenset()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Tuple List intersection (Order irrespective)",
        "Source": "Tutorial Websites"
    },
    "4247": {
        "APIs": [
            "zip()",
            "sum()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Tuple Matrix Columns Summation",
        "Source": "Tutorial Websites"
    },
    "4248": {
        "APIs": [
            "map()",
            "list()",
            "tuple()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Tuple elements inversions",
        "Source": "Tutorial Websites"
    },
    "4249": {
        "APIs": [
            "filter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Tuple key detection from value list",
        "Source": "Tutorial Websites"
    },
    "4250": {
        "APIs": [
            "defaultdict()",
            "sum()",
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Tuple to Dictionary Summation conversion",
        "Source": "Tutorial Websites"
    },
    "4251": {
        "APIs": [
            "tuple()",
            "zip()",
            "values()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Tuple value product in dictionary",
        "Source": "Tutorial Websites"
    },
    "4252": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Type conversion in Nested and Mixed List",
        "Source": "Tutorial Websites"
    },
    "4253": {
        "APIs": [
            "min()",
            "filter()",
            "map()",
            "zip_longest()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Uneven Sized Matrix Column Minimum",
        "Source": "Tutorial Websites"
    },
    "4254": {
        "APIs": [
            "set()",
            "union()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Union of Tuples",
        "Source": "Tutorial Websites"
    },
    "4255": {
        "APIs": [
            "map()",
            "next()",
            "groupby()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Unique Kth positioned tuples",
        "Source": "Tutorial Websites"
    },
    "4256": {
        "APIs": [
            "tuple()",
            "sorted()",
            "len()",
            "map()",
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Unique Tuple Frequency (Order Irrespective)",
        "Source": "Tutorial Websites"
    },
    "4257": {
        "APIs": [
            "set()",
            "append()",
            "list()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Unique Values of Key in Dictionary",
        "Source": "Tutorial Websites"
    },
    "4258": {
        "APIs": [
            "count()",
            "any()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Unique value keys in a dictionary with lists as values",
        "Source": "Tutorial Websites"
    },
    "4259": {
        "APIs": [
            "append()",
            "prod()",
            "set()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Unique values Multiplication",
        "Source": "Tutorial Websites"
    },
    "4260": {
        "APIs": [
            "len()",
            "set()",
            "keys()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Unique values count of each Key",
        "Source": "Tutorial Websites"
    },
    "4261": {
        "APIs": [
            "isinstance()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Unlist Single Valued Dictionary List",
        "Source": "Tutorial Websites"
    },
    "4262": {
        "APIs": [
            "items()",
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Unnest single Key Nested Dictionary List",
        "Source": "Tutorial Websites"
    },
    "4263": {
        "APIs": [
            "format()",
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Unpacking Values in Strings",
        "Source": "Tutorial Websites"
    },
    "4264": {
        "APIs": [
            "get()",
            "items()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Update dictionary with other dictionary",
        "Source": "Tutorial Websites"
    },
    "4265": {
        "APIs": [
            "upper()",
            "len()",
            "join()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Uppercase Half String",
        "Source": "Tutorial Websites"
    },
    "4266": {
        "APIs": [
            "upper()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Uppercase Nth character",
        "Source": "Tutorial Websites"
    },
    "4267": {
        "APIs": [
            "split()",
            "join()",
            "re.sub()",
            "upper()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "Python \u2013 Uppercase Selective Substrings in String",
        "Source": "Tutorial Websites"
    },
    "4268": {
        "APIs": [
            "values()",
            "update()",
            "zip()",
            "iter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Value Dictionary from Record List",
        "Source": "Tutorial Websites"
    },
    "4269": {
        "APIs": [
            "items()",
            "append()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Value List Key Flattening",
        "Source": "Tutorial Websites"
    },
    "4270": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Value length dictionary",
        "Source": "Tutorial Websites"
    },
    "4271": {
        "APIs": [
            "max()",
            "min()",
            "keys()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Value limits to keys in Dictionaries List",
        "Source": "Tutorial Websites"
    },
    "4272": {
        "APIs": [
            "sum()",
            "len()",
            "dict()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Value list Mean",
        "Source": "Tutorial Websites"
    },
    "4273": {
        "APIs": [
            "len()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Value list lengths",
        "Source": "Tutorial Websites"
    },
    "4274": {
        "APIs": [
            "defaultdict()",
            "setdefault()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Value nested grouping on List",
        "Source": "Tutorial Websites"
    },
    "4275": {
        "APIs": [
            "range()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Values Frequency Index List",
        "Source": "Tutorial Websites"
    },
    "4276": {
        "APIs": [
            "Counter()",
            "chain.from_iterables()"
        ],
        "APIClasses": [
            "chain"
        ],
        "OriginalQuery": "Python \u2013 Values frequencies of key",
        "Source": "Tutorial Websites"
    },
    "4277": {
        "APIs": [
            "count()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Values frequency across Dictionaries lists",
        "Source": "Tutorial Websites"
    },
    "4278": {
        "APIs": [
            "get()",
            "itemgetter()",
            "intersection()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Values from custom List in Records",
        "Source": "Tutorial Websites"
    },
    "4279": {
        "APIs": [
            "join()",
            "zip_longest()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Vertical Concatenation in Matrix",
        "Source": "Tutorial Websites"
    },
    "4280": {
        "APIs": [
            "zip()",
            "values()",
            "list()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Vertical Grouping Value Lists",
        "Source": "Tutorial Websites"
    },
    "4281": {
        "APIs": [
            "range()",
            "len()",
            "float()",
            "pow()",
            "statistics.geometric_mean()",
            "geometric_mean()"
        ],
        "APIClasses": [
            "statistics"
        ],
        "OriginalQuery": "Python \u2013 Ways to find Geometric Mean in List",
        "Source": "Tutorial Websites"
    },
    "4282": {
        "APIs": [
            "append()",
            "set()",
            "enumerate()",
            "collections.OrderedDict.fromkeys()"
        ],
        "APIClasses": [
            "collections.OrderedDict"
        ],
        "OriginalQuery": "Python \u2013 Ways to remove duplicates from list",
        "Source": "Tutorial Websites"
    },
    "4283": {
        "APIs": [
            "strip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Ways to remove multiple empty spaces from string List",
        "Source": "Tutorial Websites"
    },
    "4284": {
        "APIs": [
            "re.search()",
            "search()",
            "re.finditer()"
        ],
        "APIClasses": [
            "re",
            "re"
        ],
        "OriginalQuery": "Python \u2013 Wildcard Substring search",
        "Source": "Tutorial Websites"
    },
    "4285": {
        "APIs": [
            "range()",
            "len()",
            "split()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Word starting at Index",
        "Source": "Tutorial Websites"
    },
    "4286": {
        "APIs": [
            "count()",
            "split()",
            "Counter()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Words Frequency in String Shorthands",
        "Source": "Tutorial Websites"
    },
    "4287": {
        "APIs": [
            "lower()",
            "endswith()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python \u2013 Words with Particular Rear letter",
        "Source": "Tutorial Websites"
    },
    "4288": {
        "APIs": [
            "func()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Python: Passing Dictionary as Arguments to Function",
        "Source": "Tutorial Websites"
    },
    "4289": {
        "APIs": [
            "random.sample()",
            "sample()",
            "random.choices()",
            "choices()",
            "random.choice()",
            "choice()",
            "range()"
        ],
        "APIClasses": [
            "random",
            "random",
            "random"
        ],
        "OriginalQuery": "Randomly select elements from list without repetition in Python",
        "Source": "Tutorial Websites"
    },
    "4290": {
        "APIs": [
            "are:-seed()",
            "getstate()",
            "choice()",
            "sample()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Randomly select n elements from list in Python",
        "Source": "Tutorial Websites"
    },
    "4291": {
        "APIs": [
            "findall()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Regex in Python to put spaces between words starting with capital letters",
        "Source": "Tutorial Websites"
    },
    "4292": {
        "APIs": [
            "remove_items()",
            "filter()",
            "remove()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Remove all the occurrences of an element from a list in Python",
        "Source": "Tutorial Websites"
    },
    "4293": {
        "APIs": [
            "reversed()",
            "reverse()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Reversing a List in Python",
        "Source": "Tutorial Websites"
    },
    "4294": {
        "APIs": [
            "sort()",
            "sorted()",
            "isdigit()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Sort mixed list in Python",
        "Source": "Tutorial Websites"
    },
    "4295": {
        "APIs": [
            "range()",
            "len()",
            "int()",
            "sort()",
            "sorted()",
            "()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Sort numeric strings in a list in Python",
        "Source": "Tutorial Websites"
    },
    "4296": {
        "APIs": [
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Sort the values of first list using second list in Python",
        "Source": "Tutorial Websites"
    },
    "4297": {
        "APIs": [
            "remove()",
            "Counter()",
            "elements()",
            "element()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Subtract String Lists in Python",
        "Source": "Tutorial Websites"
    },
    "4298": {
        "APIs": [
            "re.findall()"
        ],
        "APIClasses": [
            "re"
        ],
        "OriginalQuery": "The most occurring number in a string using Regex in python",
        "Source": "Tutorial Websites"
    },
    "4299": {
        "APIs": [
            "append()",
            "hlper_fnc()",
            "zip()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Transpose Dual Tuple List in Python",
        "Source": "Tutorial Websites"
    },
    "4300": {
        "APIs": [
            "zip()",
            "map()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Tuple Division in Python",
        "Source": "Tutorial Websites"
    },
    "4301": {
        "APIs": [
            "extend()",
            "itertools.chain()"
        ],
        "APIClasses": [
            "itertools"
        ],
        "OriginalQuery": "Ways to concatenate two lists in Python",
        "Source": "Tutorial Websites"
    },
    "4302": {
        "APIs": [
            "split()",
            "dict()",
            "zip()",
            "ast.literal_eval()"
        ],
        "APIClasses": [
            "ast"
        ],
        "OriginalQuery": "Ways to convert string to dictionary",
        "Source": "Tutorial Websites"
    },
    "4303": {
        "APIs": [
            "keys()",
            "values()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Ways to extract all dictionary values | Python",
        "Source": "Tutorial Websites"
    },
    "4304": {
        "APIs": [
            "range()",
            "len()",
            "replace()",
            "str.replace()",
            "str.join()"
        ],
        "APIClasses": [
            "str",
            "str"
        ],
        "OriginalQuery": "Ways to remove i\u2019th character from string in Python",
        "Source": "Tutorial Websites"
    },
    "4305": {
        "APIs": [
            "remove()",
            "set.disard()",
            "filter()",
            "pop()"
        ],
        "APIClasses": [
            "set"
        ],
        "OriginalQuery": "Ways to remove particular List element in Python",
        "Source": "Tutorial Websites"
    },
    "4306": {
        "APIs": [
            "sorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Ways to sort list of dictionaries by values in Python \u2013 Using itemgetter",
        "Source": "Tutorial Websites"
    },
    "4307": {
        "APIs": [
            "\u201csorted()"
        ],
        "APIClasses": [],
        "OriginalQuery": "Ways to sort list of dictionaries by values in Python \u2013 Using lambda function",
        "Source": "Tutorial Websites"
    },
    "4308": {
        "APIs": [
            "reduce()",
            "set()",
            "map()",
            "intersection()"
        ],
        "APIClasses": [],
        "OriginalQuery": "python | Nested List Intersection Matrix Product",
        "Source": "Tutorial Websites"
    },
    "4309": {
        "APIs": [
            "range()",
            "extend()"
        ],
        "APIClasses": [],
        "OriginalQuery": "range() to a list in Python",
        "Source": "Tutorial Websites"
    }
}